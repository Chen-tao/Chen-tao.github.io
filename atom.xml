<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chen-Tao</title>
  
  <subtitle>颂其诗，读其书，不知其人，可乎？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chen-tao.github.io/"/>
  <updated>2017-09-24T05:40:36.000Z</updated>
  <id>http://chen-tao.github.io/</id>
  
  <author>
    <name>Chen Tao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git submodule Note</title>
    <link href="http://chen-tao.github.io/2017/09/24/Git-submodule-Note/"/>
    <id>http://chen-tao.github.io/2017/09/24/Git-submodule-Note/</id>
    <published>2017-09-24T03:29:54.000Z</published>
    <updated>2017-09-24T05:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="add-submodule"><a href="#add-submodule" class="headerlink" title="add submodule"></a>add submodule</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule add --force gitr:service_rpc/idl idl</div></pre></td></tr></table></figure><p>If this repo has not previously been used submodule then Git will create a directory in the directory called <em>.gitmodules</em> , which records the URL of the remote repo and the submodule in this project path.</p><p>After executing this command submodule and <em>.gitmodules</em> will automatically staged, this time can commit and push.</p><h3 id="Update-submodule"><a href="#Update-submodule" class="headerlink" title="Update submodule"></a>Update submodule</h3><p>Individual repo update is too much trouble, it is necessary to separate directory under execution <code>git pull</code>to pull the upstream code, but that would be more secure; all at once to update all of submodule can use this <code>foreach</code>command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule foreach --recursive git pull origin master</div></pre></td></tr></table></figure><h3 id="Remove-submodule"><a href="#Remove-submodule" class="headerlink" title="Remove submodule"></a>Remove submodule</h3><p>I thought there will be like <code>git submodule rm</code>such an instruction, the result is not even, you must manually remove the hard ground one by one, not knowing what not to implement this directive considerations, I hope that future versions can add to it.</p><p>Remove submodule has the following steps to do, first remove the submodule directory from the version control system:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git rm --cached /path/to/files</div><div class="line">rm -rf /path/to/files</div></pre></td></tr></table></figure><p>Again to modify <em>.gitmodules</em> , remove the <em>unwrought</em> submodule, for example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[submodule <span class="string">".vim/bundle/vim-gitgutter"</span>]</div><div class="line">  path = .vim/bundle/vim-gitgutter</div><div class="line">  url = git://github.com/airblade/vim-gitgutter.git</div><div class="line">-[submodule <span class="string">".vim/bundle/vim-autoclose"</span>]</div><div class="line">- path = .vim/bundle/vim-autoclose</div><div class="line">- url = git://github.com/Townk/vim-autoclose.git</div></pre></td></tr></table></figure><p>Not yet finished! But also modify the contents of <em>.git / config</em> , with. <em>Gitmodules</em> , the need to remove the submodule deleted, and finally commit.</p><h3 id="clone-when-the-submodule-together-to-catch-down"><a href="#clone-when-the-submodule-together-to-catch-down" class="headerlink" title="clone when the submodule together to catch down"></a>clone when the submodule together to catch down</h3><p>Implementation of <code>git clone</code>Git clone does not automatically come together when submodule must be added <code>--recursive</code>recursive parameter, so you can catch all associated submodule in submodule down together:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> --recursive git@github.com:Chen-tao/go-stuff.git</div></pre></td></tr></table></figure><p>If you have been caught to find submodule is empty, you can use the following instructions to catch, <code>init</code>will be registered in _.git / config` remote repo URL and local path:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git submodule init</div><div class="line">git submodule update --recursive</div></pre></td></tr></table></figure><p>Or merged into one line <code>git submodule update --init --recursive</code>can, if upstream someone to turn over <em>.gitmodules</em> , it seems that local end also using this method update.</p><h2 id="Explanation-of-instructions"><a href="#Explanation-of-instructions" class="headerlink" title="Explanation of instructions"></a>Explanation of instructions</h2><ul><li><code>git submodule init</code>: According to <em>.gitmodules</em> name and URL, these information will be registered to . *Git *<em>/ config</em> , but not <em>.gitmodules</em> not removed submodule, the use of this directive and no way to automatically delete. <em>Git / config</em> related content, you must manually delete ;</li><li><code>git submodule update</code>: According to registered (that is, <em>.git / config</em> ) submodule to update, such as clone lost submodule, which is the last paragraph of the method, so the implementation of this instruction before the best plus <code>--init</code>;</li><li><code>git submodule sync</code>: If the submodule’s remote URL changes, you can correct the URL in <em>.gitmodules</em> , and then execute this command, the submodule’s remote URL will be corrected.</li></ul>]]></content>
    
    <summary type="html">
    
      项目中使用了git的submodule功能，但突然发现，更新项目或者重写clone项目时，submodule并没有一起更新……这里总结和学习一下submodule相关的功能
    
    </summary>
    
      <category term="Git" scheme="http://chen-tao.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://chen-tao.github.io/tags/Git/"/>
    
      <category term="github" scheme="http://chen-tao.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>使用gvm管理多版本golang</title>
    <link href="http://chen-tao.github.io/2017/09/14/Use-gvm-manage-golang-version/"/>
    <id>http://chen-tao.github.io/2017/09/14/Use-gvm-manage-golang-version/</id>
    <published>2017-09-14T05:36:32.000Z</published>
    <updated>2017-09-24T03:46:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Golang发展迅速，代码迭代非常快，想要调试和梳理项目进程就成了一件相对棘手的事情。偶然间发现了gvm - <a href="http://github.com/moovweb/gvm" target="_blank" rel="external">Go Version Manager</a>，算是找到了调试切换版本的福音。</p><h2 id="关于gvm"><a href="#关于gvm" class="headerlink" title="关于gvm"></a>关于gvm</h2><p>GVM，类似于ruby 中的<a href="https://rvm.io/" target="_blank" rel="external">RVM</a>，java 中的<a href="https://github.com/linux-china/jenv" target="_blank" rel="external">jenv</a>（国产），可用于方便管理 Go 的版本，它有如下几个主要特性：</p><ul><li><p>管理 Go 的多个版本，包括安装、卸载和指定使用 Go 的某个版本</p></li><li><p>查看官方所有可用的 Go 版本，同时可以查看本地已安装和默认使用的 Go 版本</p></li><li><p>管理多个 GOPATH，并可编辑 Go 的环境变量</p></li><li><p>可将当前目录关联到 GOPATH</p></li><li><p>可以查看 GOROOT 下的文件差异</p></li></ul><h2 id="Go-版本切换"><a href="#Go-版本切换" class="headerlink" title="Go 版本切换"></a>Go 版本切换</h2><p>二进制文件的管理比较简单，通过链接使用不同版本的程序即可，实际上主要是一些环境变量和标准库的设置问题，环境变量主要是 GOPATH 以及 GOROOT，标准库的话需要在切换 go 版本时也能跟着切换。gvm 实际上就是帮助完成这些配置工作。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>按照官方文档操作即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</div><div class="line"><span class="comment"># or</span></div><div class="line">zsh &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ gvm</div><div class="line">Usage: gvm [<span class="built_in">command</span>]</div><div class="line"></div><div class="line">Description:</div><div class="line">  GVM is the Go Version Manager</div><div class="line"></div><div class="line">Commands:</div><div class="line">  version    - <span class="built_in">print</span> the gvm version number</div><div class="line">  get        - gets the latest code (<span class="keyword">for</span> debugging)</div><div class="line">  use        - select a go version to use (--default to <span class="built_in">set</span> permanently)</div><div class="line">  diff       - view changes to Go root</div><div class="line">  <span class="built_in">help</span>       - display this usage text</div><div class="line">  implode    - completely remove gvm</div><div class="line">  install    - install go versions</div><div class="line">  uninstall  - uninstall go versions</div><div class="line">  cross      - install go cross compilers</div><div class="line">  linkthis   - link this directory into GOPATH</div><div class="line">  list       - list installed go versions</div><div class="line">  listall    - list available versions</div><div class="line">  <span class="built_in">alias</span>      - manage go version aliases</div><div class="line">  pkgset     - manage go packages sets</div><div class="line">  pkgenv     - edit the environment <span class="keyword">for</span> a package <span class="built_in">set</span></div></pre></td></tr></table></figure><p>Mac下需要这样一把（如果你的环境有问题的话）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xcode-select --install</div><div class="line">brew update</div><div class="line">brew install mercurial</div></pre></td></tr></table></figure><p>一般常规的操作是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先列一下看支持哪些版本</span></div><div class="line">gvm listall</div><div class="line"></div><div class="line"><span class="comment"># 看下自己环境有哪些版本</span></div><div class="line">gvm list</div><div class="line"></div><div class="line"><span class="comment"># 安装需要的版本，比如go1.8.3，加--default代表每次再进terminal时默认使用这个版本</span></div><div class="line">gvm install go1.8.3 [--default]</div><div class="line"></div><div class="line"><span class="comment"># 然后看下是否成功</span></div><div class="line">go version</div><div class="line">go env</div><div class="line"></div><div class="line"><span class="comment"># 如果不需要gvm的环境变量，则需要到GVM_ROOT/environments下面去删除</span></div><div class="line"><span class="comment"># 注意是清空文件</span></div><div class="line">&gt; <span class="variable">$GVM_ROOT</span>/environments/go1.8.3</div><div class="line"></div><div class="line"><span class="comment"># 如果需要每次打开terminal都生效的话，以下命令加入到bashrc/zshrc，注意要加在GOPATH/GOROOT的setting之前（如果希望环境变量不被修改的话）</span></div><div class="line"><span class="built_in">source</span> /Users/chentao/.gvm/scripts/gvm</div></pre></td></tr></table></figure><h2 id="几点注意"><a href="#几点注意" class="headerlink" title="几点注意"></a>几点注意</h2><ul><li>在 Linux 下安装 GVM，需要安装相关依赖，详情见<a href="https://github.com/moovweb/gvm" target="_blank" rel="external">官网说明</a></li><li>GVM 官方显示没对 Windows 做支持，考虑到 Windows 不是程序员的标配吧（有同学回复用 git-windows客户端，自带bash功能，可以自行尝试安装下）。</li><li>GVM 安装新版本之后，Go 环境变量会重新设置，为了节约磁盘空间和时间，建议把之前版本的 GOPATH 内容移动到新版本对应的 GOPATH 目录下，相关路径可以通过 go env 获取</li><li>在同一版本下，用 gvm pkgset 创建多个 GOPATH，可能会占用你比较大的磁盘空间</li><li>使用 gvm implode 需谨慎</li><li>GVM 是用 shell 编写</li></ul>]]></content>
    
    <summary type="html">
    
      go版本之间的变化较大，尤其从1.4开始，增删了很多包和相关的代码。使用gvm可以模拟各种版本的go环境，进行相关的代码调试
    
    </summary>
    
      <category term="Golang" scheme="http://chen-tao.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://chen-tao.github.io/tags/Golang/"/>
    
      <category term="gvm" scheme="http://chen-tao.github.io/tags/gvm/"/>
    
  </entry>
  
  <entry>
    <title>如何安全删除Github上的commit历史</title>
    <link href="http://chen-tao.github.io/2017/09/14/How-to-delete-github-history/"/>
    <id>http://chen-tao.github.io/2017/09/14/How-to-delete-github-history/</id>
    <published>2017-09-14T03:22:16.000Z</published>
    <updated>2017-09-14T03:29:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Remove the history from </span></div><div class="line">rm -rf .git</div><div class="line"></div><div class="line"><span class="comment"># recreate the repos from the current content only</span></div><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m <span class="string">"Initial commit"</span></div><div class="line"></div><div class="line"><span class="comment"># push to the github remote repos ensuring you overwrite history</span></div><div class="line">git remote add origin git@github.com:&lt;YOUR ACCOUNT&gt;/&lt;YOUR REPOS&gt;.git</div><div class="line">git push -u --force origin master</div></pre></td></tr></table></figure><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git checkout --orphan newBranch</div><div class="line">git add -A  <span class="comment"># Add all files and commit them</span></div><div class="line">git commit</div><div class="line">git branch -D master  <span class="comment"># Deletes the master branch</span></div><div class="line">git branch -m master  <span class="comment"># Rename the current branch to master</span></div><div class="line">git push -f origin master  <span class="comment"># Force push master branch to github</span></div><div class="line">git gc --aggressive --prune=all     <span class="comment"># remove the old files</span></div></pre></td></tr></table></figure><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h2><blockquote><p>Delete Github Repo = = ,that’s a sad but useful way to totally delete<br>Warning : solution 1&amp;2 not delete pull request history (discussion, file changes). If you do this in order to delete sensitive data, you should better delete the github repo (along with all its pull request history etc..) and recreate a new one from scratch.</p></blockquote><h2 id="Finnaly"><a href="#Finnaly" class="headerlink" title="Finnaly"></a>Finnaly</h2><p>说了半天，其实还是直接删除repo最安全…… 前两种我理解，大概是指向删除了，并没做物理删除。 = = SAD</p><p><em>EOF</em></p>]]></content>
    
    <summary type="html">
    
      有时候确实会有这种需求，摆烂的历史，或者，敏感信息的移除
    
    </summary>
    
      <category term="Github" scheme="http://chen-tao.github.io/categories/Github/"/>
    
    
      <category term="git" scheme="http://chen-tao.github.io/tags/git/"/>
    
      <category term="Github" scheme="http://chen-tao.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Golang Workers / Job Queue</title>
    <link href="http://chen-tao.github.io/2017/09/11/Golang-Workers-Job-Queue/"/>
    <id>http://chen-tao.github.io/2017/09/11/Golang-Workers-Job-Queue/</id>
    <published>2017-09-11T12:09:39.000Z</published>
    <updated>2017-09-11T12:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>A running example of the code from:</p><ul><li><a href="http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang" target="_blank" rel="external">http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang</a></li><li><a href="http://nesv.github.io/golang/2014/02/25/worker-queues-in-go.html" target="_blank" rel="external">http://nesv.github.io/golang/2014/02/25/worker-queues-in-go.html</a></li></ul><p>This gist creates a working example from blog post, and a alternate example using simple worker pool.</p><p>TLDR: if you want simple and controlled concurrency use a <a href="https://gist.github.com/harlow/49318d54f45d29f1a77cc641faf14054" target="_blank" rel="external">worker pool</a>.</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>Small refactorings made to original code:</p><ul><li>Use non-exported private methods</li><li>Remove global variables</li><li>Bring the flags closer to their usage in <code>main()</code> from <a href="https://robots.thoughtbot.com/where-to-define-command-line-flags-in-go" target="_blank" rel="external">where to define flags in program</a>.</li></ul><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>Simplify the worker queue by removing the <code>Dispatcher</code>.</p><ul><li>Creates workers directly and passes job queue to them</li></ul><p><a href="https://gist.github.com/harlow/dbcd639cf8d396a2ab73#file-worker_refactored-go" target="_blank" rel="external">https://gist.github.com/harlow/dbcd639cf8d396a2ab73#file-worker_refactored-go</a></p><h2 id="Run-the-Application"><a href="#Run-the-Application" class="headerlink" title="Run the Application"></a>Run the Application</h2><p>Boot either the <code>worker_original.go</code> or the <code>worker_refactored.go</code> applications. Use flags to adjust the <code>max_workers</code> and <code>max_queue_size</code> to override the default values.</p><pre><code>$ go run worker_original.go -max_workers 5</code></pre><p>cURL the application from another terminal window:</p><pre><code>$ for i in {1..15}; do curl localhost:8080/work -d name=job$i -d delay=$(expr $i % 9 + 1)s; done</code></pre><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><p>The test run with Pprof show performance characteristics remain the same between both examples.</p><h2 id="Code-Time"><a href="#Code-Time" class="headerlink" title="Code Time"></a>Code Time</h2><script src="https://gist.github.com/Chen-tao/69d3dd7202dba1beb8abedf6fe712308.js"></script>]]></content>
    
    <summary type="html">
    
      看 otium/queue 如何用go实现的后台处理任务队列
    
    </summary>
    
      <category term="Golang" scheme="http://chen-tao.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://chen-tao.github.io/tags/Golang/"/>
    
      <category term="MQ" scheme="http://chen-tao.github.io/tags/MQ/"/>
    
      <category term="消息队列" scheme="http://chen-tao.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Golang 如何确定App是否运行在Docker内</title>
    <link href="http://chen-tao.github.io/2017/09/11/Go-check-if-app-running-in-docker/"/>
    <id>http://chen-tao.github.io/2017/09/11/Go-check-if-app-running-in-docker/</id>
    <published>2017-09-11T05:48:47.000Z</published>
    <updated>2017-09-11T06:13:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景</p><p>项目需要隔离部署，如果在docker环境需要使用一些特殊的配置，之前没有太好的判别方法，现在总结一下。</p></blockquote><h2 id="V1-使用-dockerenv判断"><a href="#V1-使用-dockerenv判断" class="headerlink" title="V1 使用/.dockerenv判断"></a>V1 使用<code>/.dockerenv</code>判断</h2><p>如果是Docker容器内，根目录会生成一个可执行的<code>/.dockerenv</code>文件，判断此文件是否存在可以基本断定是否运行内容器内，注意是“基本”，极少数的发行版或者某些定制化较高的系统，可能会不存在此文件。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> DOCKERENV_FILE <span class="keyword">string</span> = <span class="string">"/.dockerenv"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathExist</span><span class="params">(_path <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">_, err := os.Stat(_path)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; os.IsNotExist(err) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> pathExist(DOCKERENV_FILE) &#123;</div><div class="line">logs.Warn(<span class="string">"Running in Docker, not check for now..."</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="V2-使用cgroup信息进行判断"><a href="#V2-使用cgroup信息进行判断" class="headerlink" title="V2 使用cgroup信息进行判断"></a>V2 使用<code>cgroup</code>信息进行判断</h2><p>Docker在Xnix下虚拟环境，使用了cgroup，容器内的group信息与物理机会有本质不同，可以根据Docker内特殊化的环境信息进行判断，这也是目前最靠谱的方案。</p><p>正常情况下物理机的cgroup:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cat /proc/1/cgroup</span></div><div class="line">9:blkio:/</div><div class="line">8:devices:/</div><div class="line">7:freezer:/</div><div class="line">6:cpuset:/</div><div class="line">5:memory:/</div><div class="line">4:cpu,cpuacct:/</div><div class="line">3:perf_event:/</div><div class="line">2:net_cls,net_prio:/</div><div class="line">1:name=systemd:/</div></pre></td></tr></table></figure><p>Docker内的cgroup(例子)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> cat /proc/1/cgroup </span></div><div class="line">10:freezer:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">9:memory:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">8:cpuset:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">7:pids:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">6:devices:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c/init.scope</div><div class="line">5:blkio:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">4:cpu,cpuacct:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">3:perf_event:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">2:net_cls,net_prio:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">1:name=systemd:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c/init.scope</div></pre></td></tr></table></figure><p>判断响应内容即可，一般情况下，主要看<code>name</code> &amp; <code>devices</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">Need Pkg:</span></div><div class="line"><span class="comment">    cgroup "github.com/containerd/cgroups"</span></div><div class="line"><span class="comment">    units "github.com/docker/go-units"</span></div><div class="line"><span class="comment">specs "github.com/opencontainers/runtime-spec/specs-go"</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    paths, err := parseCgroupFile(<span class="string">"/proc/1/cgroup"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">t.Fatal(err)</div><div class="line">&#125;</div><div class="line">dp := strings.TrimPrefix(paths[<span class="string">"devices"</span>], <span class="string">"/"</span>)</div><div class="line">path := PidPath(os.Getpid())</div><div class="line">p, err := path(<span class="string">"devices"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">t.Fatal(err)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> p != filepath.Join(<span class="string">"/"</span>, dp) &#123;</div><div class="line">t.Fatalf(<span class="string">"expected self path of %q but received %q"</span>, filepath.Join(<span class="string">"/"</span>, dp), p)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="V3-拓展"><a href="#V3-拓展" class="headerlink" title="V3 拓展"></a>V3 拓展</h2><p>如果需要当前协程的父进程信息，会对我们定位很多关键信息起到很大的帮助</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> processNameFormat = <span class="string">"/proc/%d/comm"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(os.Getppid())</div><div class="line"></div><div class="line">ppid := os.Getppid()</div><div class="line"></div><div class="line">bs, err := ioutil.ReadFile(fmt.Sprintf(processNameFormat, ppid))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Println(err.Error())</div><div class="line">&#125;</div><div class="line">    fmt.Println(<span class="keyword">string</span>(bs)) <span class="comment">// bs is ppid info</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>EOF</p></blockquote>]]></content>
    
    <summary type="html">
    
      几种判断Golang App当前运行环境的方法
    
    </summary>
    
      <category term="Golang" scheme="http://chen-tao.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://chen-tao.github.io/tags/Golang/"/>
    
      <category term="Docker" scheme="http://chen-tao.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>WTF hexo</title>
    <link href="http://chen-tao.github.io/2017/08/27/WTF-hexo/"/>
    <id>http://chen-tao.github.io/2017/08/27/WTF-hexo/</id>
    <published>2017-08-27T12:14:51.000Z</published>
    <updated>2017-09-11T05:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>真的不知道出了什么问题，突然这个hexo就不好用了，也许是我太久没用了吧 = = </p><p>昨天开始一直报错，找不到某个Trace，另外有一点我不太明白，deploy的时候替我提交了，那为何我本地还有这么多修改。</p><p>问题很多，但是确实很多没到这边来了，我的个人页也莫名其妙丢失了，SAD。</p><p>以上です。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;真的不知道出了什么问题，突然这个hexo就不好用了，也许是我太久没用了吧 = = &lt;/p&gt;
&lt;p&gt;昨天开始一直报错，找不到某个Trace，另外有一点我不太明白，deploy的时候替我提交了，那为何我本地还有这么多修改。&lt;/p&gt;
&lt;p&gt;问题很多，但是确实很多没到这边来了，我的
      
    
    </summary>
    
    
      <category term="感悟" scheme="http://chen-tao.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>告别腾讯-一点总结</title>
    <link href="http://chen-tao.github.io/2017/03/14/about-tencent/"/>
    <id>http://chen-tao.github.io/2017/03/14/about-tencent/</id>
    <published>2017-03-14T07:39:23.000Z</published>
    <updated>2017-09-11T05:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>鹅厂工作届满三年，明天即将离开，写一点自己的感受，希望能看到一些东西，也不被一些东西所影响。</p><a id="more"></a><h3 id="Leave"><a href="#Leave" class="headerlink" title="Leave"></a>Leave</h3><p>业内讲<strong>金山银四</strong>，我也到了发痒的年纪了。一方面有家庭上的原因，另一方面，也觉得北京发展的潜力远远大于深圳，机会也多得多，于是，过年期间准备了一下，拿到了今日头条的offer，即将在北京开始新的生活了。</p><h3 id="SNG"><a href="#SNG" class="headerlink" title="SNG"></a>SNG</h3><p>2014年毕业来到腾讯SNG(社交网络事业群)，做泛QQ方向的业务，在SNG内算是比较新的业务，老板也相对重视；但从整个公司的角度看来，SNG的优势都不太大，以至于我们经常自我调侃：CDG&amp;WXG天之骄子，IEG游戏土豪，OMG一门三杰，TEG养老送终，剩下SNG吭哧吭哧的干活儿，却不知道未来在何方。</p><h3 id="Engineering-Culture"><a href="#Engineering-Culture" class="headerlink" title="Engineering Culture"></a>Engineering Culture</h3><p>作为一个后端server研发，其实大多数时候是不会带入到公司大的场景中去的，但腾讯是一家特殊的公司，是一家以<strong>产品为导向</strong>的公司，每个人都<strong>有</strong>或者说<strong>需要有</strong>那么一点产品意识，这样的结果是：一方面产品在进化发展，产品运营开发测试，每个人对业务的理解更透彻了；另一方面，对技术不那么感冒，甚至可以说，<strong>工程师文化，在腾讯销声匿迹了</strong>，也不能说没有，而是被忽略掉了。</p><p>对于大部分员工来说，KPI还是很重要的，而落实到每个人身上，很可能就是如果快速的解决某个问题，达到某个目的，一件事情做完之后，回头看的机会真的不多，业务在前进，人也一样——在业务飞速前进的大背景下，从Demo改到V3V4，是一件很痛苦的事情，甚至在一些团队变成了不切实际的行动。这样的结果是：<strong>对于大多数非核心部门而言，资源是非常有限的，新的老的业务问题都不一定能搞定，自然无法将资源投放在解决工作效率与代码质量的问题上。半年一次的KPI考评，则从另一个更重要的方面去促使员工选择去解决最能体现价值的业务问题。长期的收敛结果，就是基础设施碎片化、野蛮化生长。</strong></p><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><p>DevOps在腾讯，大部分部门都是很空白的。</p><p>代码权限严格，网络权限一年比一年收紧，测试环境(SecureCRT 甚至加上 sz/rz)产能底下，很多生产力工具没提供比如Mac无法申请(其实比某些台式机便宜多了)，很多老员工用着落后其他公司一个时代的硬件产品，追赶着行业领先的技术，这种戴着镣铐跳舞的感觉，很多时候实在让人无奈。</p><p>在SNG内部，经过近几年的发展，是有集成化运维这类的东西的，但仍然不够，很多重复的事情，仍然不得不人肉，而且还有一些非常蛋疼的规范限制着你——比如通过内部系统，每人每天每个pkg只能pub一次，你pub过就只能找其他同事帮忙，不然就上了本月的研发黑榜 = =||，本人有幸连续三个月上榜过。</p><p>另外，腾讯里，很多新团队开发的自动化组件，没有人去用，或者用的很少，推行起来也是困难重重，部门之间，业务不同，KPI没有交集，互帮互助都显得异常珍贵，团队之间，尤其是<em>有点历史</em>的团队之间，技术栈是大相径庭的，要他们容和统一，短时间内实在也不太现实，而长期来看，团队技术栈成型后，他们更倾向于Hire那些符合他们技术点要求的人，而不是能力相当的人，如何循环，再去改造就更加困难了；对比阿里巴巴，内部其实没有特别大的决心去推动一些东西，有学长在阿里中间件工作，基本上集团内推行一种新技术是非常容易的，JDK6到7到8，遇到的阻力也无非是一些必经之路上的技术问题，而不是该不该用好不好用的扯皮，这些问题是腾讯需要思考的。</p><p><strong>说了这么多，从我工程师的角度看，腾讯在产品上确实冠绝业界，但在工程技术上，要走的路还很远很曲折。</strong></p><h3 id="Benefit"><a href="#Benefit" class="headerlink" title="Benefit"></a>Benefit</h3><p>讲完技术，讲点福利。腾讯的福利非常之好，包含了衣食住行的方方面面，每年的旅行团建，夜宵，兑换，住房保障计划，无息贷款，覆盖全深圳堪比中型城市公交系统的班车服务，逢年过节的红包，结婚生育的礼金，甚至给下一代的VIPQQ号……<strong>对于职场新人来说，确实是一家非常值得加入的公司；对于职业暮年的人来说，则可能是可以颐养天年的公司；而对于其他员工，我觉得就因人而异了，可能要看具体工作的方向，部门，和个人对工作的理解了。</strong></p><h3 id="One-More-Thing"><a href="#One-More-Thing" class="headerlink" title="One More Thing"></a>One More Thing</h3><p>毕业的三年是一个非常重要的职业阶段，在腾讯我成长了非常多，也学会了很多，感谢与我一同工作的同事们，他们对我的协助，对我的指导，我都铭记于心；而我在腾讯文化的熏陶下，也完成了从一个青涩学生到一个工程师的转变，这些，都是我职业道路上毕生的财富。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鹅厂工作届满三年，明天即将离开，写一点自己的感受，希望能看到一些东西，也不被一些东西所影响。&lt;/p&gt;
    
    </summary>
    
    
      <category term="感悟" scheme="http://chen-tao.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>从jekyll到hexo</title>
    <link href="http://chen-tao.github.io/2017/03/09/move-to-hexo/"/>
    <id>http://chen-tao.github.io/2017/03/09/move-to-hexo/</id>
    <published>2017-03-09T09:39:10.000Z</published>
    <updated>2017-09-11T05:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前折腾了很多次jekyll，不管是评论，还是文章目录，都很不顺手，<strong>这次花了一天，迁移到了hexo</strong></p><p>开始是nodejs的组件报错，某些文章里有特殊的jekyll使用的字符等等，这个就折腾了半天 = = </p><p>然后是git的rebase出问题，差点崩溃，还好解决了</p><p>官网上关于迁移就是这短短的一句话：</p><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fdgqabh8i6j31520aot9u.jpg" alt=""></p><p>结果却不是这样 = = </p><p>这边选择了next主题，觉得不错，喜欢的可以看下，后面有时间，也会折腾一下主题(可能有坑 = = )</p><p>新开始！</p>]]></content>
    
    <summary type="html">
    
      刀耕火种结束，顺利进入自动化时代。
    
    </summary>
    
    
      <category term="jekyll" scheme="http://chen-tao.github.io/tags/jekyll/"/>
    
      <category term="hexo" scheme="http://chen-tao.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm Anaysis</title>
    <link href="http://chen-tao.github.io/2017/02/08/algo-pic/"/>
    <id>http://chen-tao.github.io/2017/02/08/algo-pic/</id>
    <published>2017-02-07T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fcivc207a8j319z0pwq8b.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ww1.sinaimg.cn/large/006tKfTcgy1fcivc207a8j319z0pwq8b.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="算法" scheme="http://chen-tao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SOA面向服务架构浅析</title>
    <link href="http://chen-tao.github.io/2017/02/01/soa-and-micro-service/"/>
    <id>http://chen-tao.github.io/2017/02/01/soa-and-micro-service/</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SOA定义"><a href="#SOA定义" class="headerlink" title="SOA定义"></a>SOA定义</h2><p>SOA是一个组件模型，它将应用程序的不同功能单元(称为服务)通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种这样的系统中的服务可以以一种统一和通用的方式进行交互。</p><p>这种具有中立的接口定义(没有强制绑定到特定的实现上)的特征称为服务之间的松耦合。<strong>SOA的目的，就是要将复杂的紧耦合的系统进行解耦，划分成面向业务的，细粒度，松耦合，无状态的服务。</strong>松耦合系统的好处有两点，一点是它的灵活性，另一点是，当组成整个应用程序的每个服务的内部结构和实现逐渐地发生改变时，它能够继续存在。而另一方面，紧耦合意味着应用程序的不同组件之间的接口与其功能和结构是紧密相连的，因而当需要对部分或整个应用程序进行某种形式的更改时，它们就显得非常脆弱，变更可能会导致部分乃至整个系统的重构。</p><p>对松耦合的系统的需要来源于业务应用程序需要根据业务的需要变得更加灵活，以适应不断变化的环境，比如经常改变的政策、业务级别、业务重点、合作伙伴关系、行业地位以及其他与业务有关的因素，这些因素甚至会影响业务的性质。我们称能够灵活地适应环境变化的业务为按需(On demand)业务，在按需业务中，一旦需要，就可以对完成或执行任务的方式进行必要的更改。</p><p>SOA是传统的面向对象架构模型的替代模型，面向对象的模型是紧耦合的，已经存在二十多年了。虽然基于 SOA 的系统并不排除使用面向对象的设计来构建单个服务，但是其整体设计却是面向服务的。由于它考虑到了系统内的对象，所以虽然 SOA 是基于对象的，但是作为一个整体，它却不是面向对象的。不同之处在于接口本身。SOA 系统原型的一个典型例子是通用对象请求代理体系结构(Common Object Request Broker Architecture，CORBA)，它已经出现很长时间了，其定义的概念与 SOA 相似。</p><p>然而，现在的 SOA 已经有所不同了，因为它依赖于一些更新的进展，这些进展是以可扩展标记语言(eXtensible Markup Language，XML)为基础的。通过使用基于 XML 的语言(称为 Web 服务描述语言(Web Services Definition Language，WSDL))来描述接口，服务已经转到更动态且更灵活的接口系统中，非以前 CORBA 中的接口描述语言(Interface Definition Language，IDL)可比了。更新的，如protobuf，Thrift等标记语言，则已经在RPC与其他服务协议中占有极为重要的角色。</p><p>Web 服务并不是实现 SOA 的惟一方式。前面刚讲的 CORBA 是另一种方式，这样就有了面向消息的中间件(Message-Oriented Middleware)系统。但是为了建立体系结构模型，您所需要的并不只是服务描述。您需要定义整个应用程序如何在服务之间执行其工作流。您尤其需要找到业务的操作和业务中所使用的软件的操作之间的转换点。因此，SOA 应该能够将业务的商业流程与它们的技术流程联系起来，并且映射这两者之间的关系。例如，给供应商付款的操作是商业流程，而更新您的零件数据库，以包括进新供应的货物却是技术流程。因而，工作流还可以在 SOA 的设计中扮演重要的角色。</p><p>此外，动态业务的工作流不仅可以包括部门之间的操作，甚至还可以包括与不为您控制的外部合作伙伴进行的操作。因此，为了提高效率，您需要定义应该如何得知服务之间的关系的策略，这种策略常常采用服务级协定和操作策略的形式。</p><p>最后，所有这些都必须处于一个信任和可靠的环境之中，以同预期的一样根据约定的条款来执行流程。因此，安全、信任和可靠的消息传递应该在任何 SOA 中都起着重要的作用。</p><h2 id="SOA原则"><a href="#SOA原则" class="headerlink" title="SOA原则"></a>SOA原则</h2><p>FROM <a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84" target="_blank" rel="external">WIKI</a></p><p>以下指导原则是开发，维护和使用SOA的基本原则：</p><ul><li>可重复使用, 粒度, 模组性, 可组合型, 物件化原件, 构件化以及具交互操作性</li><li>符合开放标准(通用的或行业的)</li><li>服务的识别和分类，提供和发布，监控和跟踪。</li></ul><p>下面是一些特定的体系架构原则：</p><ul><li>服务封装</li><li>服务松耦合(Loosely coupled) – 服务之间的关系最小化，只是互相知道。(Decouple Infrastructure)</li><li>服务契约 - 服务按照服务描述文档所定义的服务契约行事。</li><li>服务抽象 - 除了服务契约中所描述的内容，服务将对外部隐藏逻辑。</li><li>服务的重用性 - 将逻辑分布在不同的服务中，以提高服务的重用性。</li><li>服务的可组合性 - 一组服务可以协调工作并组合起来形成一个组合服务。</li><li>服务自治 – 服务对所封装的逻辑具有控制权</li><li>服务无状态 – 服务将一个活动所需保存的资讯最小化。</li><li>服务的可被发现性 – 服务需要对外部提供描述资讯，这样可以通过现有的发现机制发现并访问这些服务。[4]</li></ul><p>除此以外，在定义一个SOA实现时，还需要考虑以下因素：</p><ul><li>生命周期管理</li><li>有效使用系统资源</li><li>服务成熟度和性能</li></ul><h2 id="SOA用途"><a href="#SOA用途" class="headerlink" title="SOA用途"></a>SOA用途</h2><p>对 SOA 的需要来源于需要使业务 IT 系统变得更加灵活，以适应业务中的改变。通过允许强定义的关系和依然灵活的特定实现，IT 系统既可以利用现有系统的功能，又可以准备在以后做一些改变来满足它们之间交互的需要。</p><p>改变和 SOA 系统适应改变的能力是最重要的部分。对于开发人员来说，这样的改变无论是在他们工作的范围之内还是在他们工作的范围之外都有可能发生，这取决于是否有改变需要知道接口是如何定义的以及它们相互之间如何进行交互。与开发人员不同的是，架构师的作用就是引起对 SOA 模型大的改变。这种分工，就是让开发人员集中精力于创建作为服务定义的功能单元，而让架构师和建模人员集中精力于如何将这些单元适当地组织在一起。</p><h2 id="SOA与微服务"><a href="#SOA与微服务" class="headerlink" title="SOA与微服务"></a>SOA与微服务</h2><p>相比于基于业务的SOA，微服务则纯粹基于服务模块，也就是每个服务独立为一个子系统，平行扩容对其他服务透明，强调系统的伸缩性，服务发现，负载均衡，故障转移，高可用。微服务是互联网时代的新产物，它对服务的容错与可用提出了更新的思考，比如多版本，灰度发布，服务降级，分布式跟踪，这些都是SOA在实践中重视不够的地方，。</p><p>SOA在企业领域的应用更为广泛，对服务的可用性保证也很高，而很多现代互联网企业，对实时性的要求，对数据一致性的要求，甚至对大流量下可用性的要求都是弹性的，比如腾讯，很多业务服务的运营核心是：有损服务，动态运营，这时候，微服务的作用就显现出来，在海量请求下，尽量保证大多数用户的服务，尽量快（弱一致性）的实现数据的同步。可以说，SOA与微服务在不同的领域，但做法可以相互借鉴。</p>]]></content>
    
    <summary type="html">
    
      SOA面向服务架构的一点自我分析，同时对比一下SOA与微服务，互相借鉴，有的放失。
    
    </summary>
    
      <category term="感悟" scheme="http://chen-tao.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="server" scheme="http://chen-tao.github.io/tags/server/"/>
    
      <category term="服务" scheme="http://chen-tao.github.io/tags/%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>quick sort快速排序算法总结 </title>
    <link href="http://chen-tao.github.io/2017/01/28/quick-sort/"/>
    <id>http://chen-tao.github.io/2017/01/28/quick-sort/</id>
    <published>2017-01-27T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天总结一下非常有用的快速排序(qsort)算法, 以及由此衍生的一些其他相关算法(Knuth shuffle, quick select, 3-way partition).</p><p>快速排序的算法可以用三句话描述:<br><strong>[Algo]</strong></p><blockquote><ul><li>选择基准项(pivot element, 一般取第一个元素为pivot)</li><li>把数组里所有小于pivot的移动到pivot左边, 大于pivot的移动到右边 ⇒ 此时pivot已经位于最终排序时的正确位置</li><li>对pivot左右两个数组分别递归进行快速排序</li></ul></blockquote><p>由以上描述可见, qsort是一个递归算法, 我们可以把它的函数声明写成: <code>void qsort(int[] a, int lo, int hi)</code>, 表示排序a[lo, hi]之间(闭区间)的所有元素.</p><h2 id="quick-partition"><a href="#quick-partition" class="headerlink" title="quick partition"></a>quick partition</h2><p>由上面描述可以见, qsort最关键的是第二步: 把数组元素以pivot分为两部分. 这个操作就是quick partition.</p><p>函数声明为: <code>int partition(int[] a, int lo, int hi)</code>, 该函数返回pivot(即subarray的第一个元素<code>a[lo]</code>)所在的位置.</p><p>如果允许新建一个临时数组的话, 那么这个就不是什么问题, 但是为了节约空间占用, 现在需要直接修改(in-place)使得a[lo] 到, 而且希望可以用尽量少的交换(<code>swap(int[]a, int i, int j)</code>)操作, 就不是很evident了.</p><p>这个函数的写法是用两个指针i和j分别从两端向中间走, 如果两个指针指向的元素一个小于pivot一个大于pivot那么就进行交换, 当两个指针碰面的时候结束(最后把pivot和指针元素交换). 请看下面这个萌萌的图(图片来自&lt;&lt;啊哈!算法&gt;&gt;):<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fc7ns2lgb3j30f005p3yp.jpg" alt=""></p><p>选取第一个元素(6)为pivot, 然后j向左走直到遇到一个小于pivot(6)的数停止, i向右走直到遇到一个大于pivot的数停止(<em>注意要让j先移动</em>), 此时二者交换:<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fc7nsfvemtj30dm0a83yz.jpg" alt=""></p><p>只要重复这个过程, 直到i&gt;=j为止, 此时只要最后把pivot和j(<em>注意是j而不是i</em>)指向的元素交换即可:<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fc7nsr0uuxj30dp0bidga.jpg" alt=""></p><p>所以pivot的位置就是j, 函数返回j即可.</p><p>java实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> pivot = a[lo], i=lo, j=hi;  </div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </div><div class="line">        <span class="keyword">for</span>(;j&gt;=lo &amp;&amp; a[j]&gt;=pivot;j--);<span class="comment">// move j to a point where a[j]&lt;pivot  </span></div><div class="line">        <span class="keyword">for</span>(;i&lt;=hi &amp;&amp; a[i]&lt;=pivot;i++);<span class="comment">// move i to a point where a[i]&gt;pivot  </span></div><div class="line">        <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;<span class="comment">// break if i and j meets  </span></div><div class="line">        swap(a, i++, j--);  </div><div class="line">    &#125;  </div><div class="line">    swap(a, lo, j);<span class="comment">// swap pivot with a[j]  </span></div><div class="line">    <span class="keyword">return</span> j;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里有几点要注意的:</p><ul><li>让j先移动</li><li>最后pivot要和j交换而不是和i交换: 因为最后放在最左边的应该是一个小于pivot的数嘛</li><li>移动的时候别忘了需要加数组下标的边界检查(<code>i&lt;=hi</code>, <code>j&gt;=lo</code>)</li><li>partition()的复杂度是线性的<strong>O(n)</strong></li></ul><h2 id="Knuth-shuffle"><a href="#Knuth-shuffle" class="headerlink" title="Knuth shuffle"></a>Knuth shuffle</h2><p>qsort之所以快, 是因为每次都能够按照pivot分为大致同样长度的两个子数组(所以每次子问题的规模除以二), 所以复杂度为<strong>O(NlogN)</strong>. 最坏情况下, 如果每次两个子数组中可能有一个长度为0, 那么每次子问题的规模只减少了1, 所以复杂度变成了quadratic <strong>O(N2)</strong>.</p><p>为了防止这种最坏情况的出现, 可以在一切开始之前把数组打乱顺序, 所以这一节讨论快速shuffle的算法. 最经典的就是Knuth的shuffle算法了, 算法很简答, 描述为: for(k=1 to n): 每次把第k个元素和前k个元素中的随机一个元素交换.</p><p>代码只有两行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> K=<span class="number">0</span>; K&lt;a.length; K++)  </div><div class="line">        swap(K, Random.nextInt(K+<span class="number">1</span>));  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>关于算法的正确性, 其实只要证明”元素i在shuffle后最终位于位置i”的概率为1/N即可, 不难证明.</p><h2 id="quick-sort"><a href="#quick-sort" class="headerlink" title="quick sort"></a>quick sort</h2><p>好了 有了以上两个辅助函数就可以写qsort函数了:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;<span class="comment">//recursive helper function  </span></div><div class="line">    <span class="keyword">if</span>(lo&gt;=hi) <span class="keyword">return</span>;  </div><div class="line">    <span class="keyword">int</span> p = partition(a, lo, hi);  </div><div class="line">    qsort(a, lo, p-<span class="number">1</span>);  </div><div class="line">    qsort(a, hi, p+<span class="number">1</span>);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;  </div><div class="line">    shuffle(a);  </div><div class="line">    qsort(a, <span class="number">0</span>, a.length-<span class="number">1</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其实qsort的主体就是那个partition函数, 单独把partition列出来是因为它不止可以用在排序, 还可以用来做quick select, 见quick select节.</p><h2 id="quick-select"><a href="#quick-select" class="headerlink" title="quick select"></a>quick select</h2><p><em>对于一个没有排序的数组, 如何快速找到它的中值(median)?</em><br>以上这个问题的答案就在<code>partition()</code>函数.</p><p>之前说过, <code>partition()</code>函数的返回值表示pivot在排序好的数组中的位置(rank), 这个消息非常有用: 中值只不过是rank等于长度除以2的元素而已.</p><p>为了寻找rank等于k的元素, 我们用partition函数可以每次把问题规模缩小: 如果partition()=pk那么右边subarray不用考虑, 如果数组事先shuffle过了的话, 问题规模每次缩小一半.</p><p>定义一个函数, 寻找rank等于k的元素, 代码类似于二分查找:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">int findKth(int[] a, int k)&#123;  </div><div class="line">    shuffle(a);  </div><div class="line">    int lo=0, hi=a.length-1;  </div><div class="line">    while(lo&lt;hi)&#123;  </div><div class="line">    int p = partition(a, lo, hi);  </div><div class="line">    if(p==k) return a[k];  </div><div class="line">    else if(p&lt;k) lo=p+1;  </div><div class="line">    else hi=p-1;  </div><div class="line">    &#125;  </div><div class="line">    return a[k];  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该算法内层循环为O(hi-lo), 每次问题规模减少一半, 所以复杂度为N+N/2+N/4+…+1 = 2N, 复杂度为线性时间!</p><h2 id="3-way-qsort"><a href="#3-way-qsort" class="headerlink" title="3-way qsort"></a>3-way qsort</h2><p>qsort之前有个bug: 在数组里很多重复元素的时候, 效率会下降为O(N2). 原因是qsort没有好好处理重复元素的问题.</p><p>于是Dijkstra提出了一个<strong>3-way partition</strong>的算法: 把数组分为三部分: 左边<code>[lo, lt)</code>严格小于pivot, 中间<code>[lt, gt]</code>等于pivot, 右边<code>(gt, hi]</code>严格大于pivot.</p><p>算法初始化<code>lt=lo, gt=hi, i=lo</code>, 用指针i向右扫描, [i,gt]为未处理到的部分.<br>算法很subtle, invariant是这样的:</p><blockquote><ul><li>a[lo,lt-1] &lt; pivot</li><li>a[lt, i-1] = pivot</li><li>a[i,gt] = unseen</li><li>a[gt+1, hi] &gt; pivot</li></ul></blockquote><p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fc7nt1aur7j309k03gq2v.jpg" alt=""><br>这个图很有助于写代码:<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fc7nta4jkzj308704s0sr.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort3way</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;  </div><div class="line">    <span class="keyword">if</span>(hi&lt;=lo) <span class="keyword">return</span>;  </div><div class="line">    <span class="keyword">int</span> lt=lo, i=lo, gt=hi, pivot=a[lo];  </div><div class="line">    <span class="keyword">while</span> (i&lt;=gt)&#123;<span class="comment">// [i,gt] is unseen elements  </span></div><div class="line">        <span class="keyword">if</span>(a[i]==pivot) <span class="comment">//a[lt,i-1] are elements == pivot  </span></div><div class="line">            i++;  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;pivot) <span class="comment">// a[gt+1, hi] are elements &gt; pivot  </span></div><div class="line">            swap(a, gt--, i);  </div><div class="line">        <span class="keyword">else</span> <span class="comment">// a[lo, lt-1] are elements &lt; pivot  </span></div><div class="line">            swap(a, lt++, i++);  </div><div class="line">    &#125;  </div><div class="line">    qsort3way(a, lo, lt-<span class="number">1</span>);  </div><div class="line">    qsort3way(a, gt+<span class="number">1</span>, hi);  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>说它很subtle, 除了因为没有那个图我写不出来以外, 还有就是, 在把i和lt交换时, i可以increment (因为我们知道<code>a[lt]==pivot</code>), 但是i和gt交换时, i<strong>不能</strong>increment: 因为a[gt]不知道多大, 所以i位置要继续检查.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天总结一下非常有用的快速排序(qsort)算法, 以及由此衍生的一些其他相关算法(Knuth shuffle, quick select, 3-way partition).&lt;/p&gt;
&lt;p&gt;快速排序的算法可以用三句话描述:&lt;br&gt;&lt;strong&gt;[Algo]&lt;/stron
      
    
    </summary>
    
      <category term="算法" scheme="http://chen-tao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://chen-tao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="快速排序" scheme="http://chen-tao.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
      <category term="sort" scheme="http://chen-tao.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>递归，回溯，DFS，BFS的理解和模板</title>
    <link href="http://chen-tao.github.io/2017/01/27/al-template/"/>
    <id>http://chen-tao.github.io/2017/01/27/al-template/</id>
    <published>2017-01-26T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode 里面很大一部分题目都是属于这个范围，例如Path Sum用的就是递归+DFS，Path Sum2用的是递归+DFS+回溯</p><p>这里参考了一些网上写得很不错的文章，总结一下理解与模板</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归：就是出现这种情况的代码： （或者说是用到了栈）</p><p>解答树角度：在dfs遍历一棵解答树      </p><p>优点：结构简洁</p><p>缺点：效率低，可能栈溢出</p><p>递归的一般结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     <span class="keyword">if</span>(符合边界条件)</div><div class="line">    &#123;</div><div class="line">       <span class="comment">///////</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">     <span class="comment">//某种形式的调用</span></div><div class="line">     f();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>回溯：递归的一种，或者说是通过递归这种代码结构来实现回溯这个目的。回溯法可以被认为是一个有过剪枝的DFS过程。</p><p>解答树角度：带回溯的dfs遍历一棵解答树</p><p>回溯的一般结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> 当前状态)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">      <span class="keyword">if</span>(当前状态为边界状态)</div><div class="line">      &#123;</div><div class="line">        记录或输出</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//横向遍历解答树所有子节点</span></div><div class="line">     &#123;</div><div class="line">           <span class="comment">//扩展出一个子状态。</span></div><div class="line">           修改了全局变量</div><div class="line">           <span class="keyword">if</span>(子状态满足约束条件)</div><div class="line">            &#123;</div><div class="line">              dfs(子状态)</div><div class="line">           &#125;</div><div class="line">            恢复全局变量<span class="comment">//回溯部分</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="BFS-amp-DFS"><a href="#BFS-amp-DFS" class="headerlink" title="BFS&amp;DFS"></a>BFS&amp;DFS</h2><p>常用的搜索方式。</p><ol><li>枚举。枚举运算量很大，需要预先确定枚举的定义域。</li><li>广度优先搜索（BFS ）——通常可以用于计算图的连通性、单源最短路径、计算最小操作次数等。</li><li>深度优先搜索（DFS）——经典题：火力中心布局。</li></ol><p>BFS的占用的是队列的空间</p><p>DFS 占用的是栈的空间（因为递归）</p><p>BFS和DFS的空间复杂度恰好相反</p><p>对链状图，BFS最好（队列中最多只有1个元素），DFS最差（所有节点都在根节点的递归内）</p><p>对起点与其他所有点相邻的图，DFS最好（递归深度为1），BFS最差（队列中放满了所有与起点相邻的图）。</p><h3 id="BFS模版"><a href="#BFS模版" class="headerlink" title="BFS模版"></a>BFS模版</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">queue</span>&lt;type&gt; q;</div><div class="line">q.push(初始状态);</div><div class="line"><span class="keyword">while</span> (!q.empty())</div><div class="line">&#123;</div><div class="line">  type t = q.front() ;</div><div class="line">  q.pop();</div><div class="line">  遍历 t 的各个Next状态  next</div><div class="line">  &#123; </div><div class="line">    <span class="keyword">if</span> (next is legal)</div><div class="line">      q.push(next); 计数或维护等; </div><div class="line">  &#125; </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是BFS的状态数一多，需要的空间就会较大。因此就需要状态压缩，BUPT OJ上的1180就是一个典型的例子，但是状态压缩以及解压的时候，又会涉及效率，反正1180将80M的状态压缩到40K以后就超时了……</p><h3 id="DFS模板"><a href="#DFS模板" class="headerlink" title="DFS模板"></a>DFS模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DFS（顶点） </div><div class="line">&#123;</div><div class="line">　　处理当前顶点，记录为已访问</div><div class="line">　　遍历与当前顶点相邻的所有未访问顶点</div><div class="line">　　&#123;</div><div class="line">　　　　　　标记更改;</div><div class="line">　　　　　　DFS( 下一子状态);</div><div class="line">　　　　　　恢复更改;</div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>回溯法：DFS适用于 显式图，但是对于一些隐式关系，我们需要使用回溯法，通过定义或找到各个状态、边界条件、搜索范围、约束条件和最优解结果进行建模求解。</p><p>边界条件：达到某状态时，需要检查并确定是继续搜索还是回到上一状态的条件（例如当前已使用时间比当前最优解要长，此时就不需要再进行搜索）</p><p>搜索范围：当前从当前状态开始进行搜索的所有下一级状态。 </p><p>搜索范围：</p><p>另外一定要注意，假如参与递归的参数不是通过传参形式的方式进入递归的话，那么一定要做好数据恢复。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Trace（当前状态） </div><div class="line">&#123;</div><div class="line">    if 当前状态是结束状态</div><div class="line">    &#123;</div><div class="line">         if 是最佳解： 记录。</div><div class="line">         退出</div><div class="line">    &#125;</div><div class="line">    遍历当前状态的各个邻接状态</div><div class="line">    &#123;</div><div class="line">        if 当前状态满足约束条件 且 满足最优性要求 ： Trace（子状态） </div><div class="line">    &#125; </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;LeetCode 里面很大一部分题目都是属于这个范围，例如Path Sum用的就是递归+DFS，Path Sum2用的是递归+DFS+回溯&lt;/p&gt;
&lt;p&gt;这里参考了一些网上写得很不错的文章，总结一下理解与模板&lt;/p&gt;
&lt;h2 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; cl
      
    
    </summary>
    
      <category term="算法" scheme="http://chen-tao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://chen-tao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="http://chen-tao.github.io/tags/BFS/"/>
    
      <category term="DFS" scheme="http://chen-tao.github.io/tags/DFS/"/>
    
      <category term="递归" scheme="http://chen-tao.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="回溯" scheme="http://chen-tao.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>DFS深度优先搜索算法总结</title>
    <link href="http://chen-tao.github.io/2017/01/26/about-dfs/"/>
    <id>http://chen-tao.github.io/2017/01/26/about-dfs/</id>
    <published>2017-01-25T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update --><ul><li><a href="#recursive-dfs">Recursive DFS</a></li><li><a href="#non-recursive-dfs">Non-Recursive DFS</a><ul><li><a href="#for-tree-dfs-with-depth">(for Tree) DFS with depth</a></li><li><a href="#dfs-for-binary-tree--preorder-traversal">DFS for binary tree–PreOrder traversal</a></li></ul></li><li><a href="#cycle-detection">Cycle Detection</a></li><li><a href="#topology-sort">Topology Sort</a></li><li><a href="#leetcode-dfs">LeetCode DFS</a><ul><li><a href="#subsets">Subsets</a></li></ul></li></ul><!-- END doctoc generated TOC please keep comment here to allow auto update --><p>总结复习一下DFS算法。</p><p>深度优先算法是N种算法的基础，是算法学习中的重中之重。</p><p>可以解决的问题类型也很多：递归，回溯，隐图式搜索，甚至是暴力类型算法的万金油。</p><h2 id="DFS-intro"><a href="#DFS-intro" class="headerlink" title="DFS intro"></a>DFS intro</h2><p>图的深度优先搜索(Depth First Search)，和树的先序遍历比较类似。</p><p>它的思想：假设初始状态是图中所有顶点均未被访问，则从某个顶点v出发，首先访问该顶点，然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。 若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。</p><p>显然，深度优先搜索是一个递归的过程。</p><h2 id="Understand-DFS"><a href="#Understand-DFS" class="headerlink" title="Understand DFS"></a>Understand DFS</h2><h3 id="无向图-undirected-graph"><a href="#无向图-undirected-graph" class="headerlink" title="无向图(undirected graph)"></a>无向图(undirected graph)</h3><p><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fc7glkmecsj30bl08fq3b.jpg" alt=""></p><p>对于上图的遍历，步骤如下：</p><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fc7gowbrw3j30c409hmxs.jpg" alt=""></p><p><strong>第1步</strong>：访问A。 </p><p><strong>第2步</strong>：访问(A的邻接点)C。 </p><pre><code>在第1步访问A之后，接下来应该访问的是A的邻接点，即&quot;C,D,F&quot;中的一个。但在本文的实现中，顶点ABCDEFG是按照顺序存储，C在&quot;D和F&quot;的前面，因此，先访问C。 </code></pre><p><strong>第3步</strong>：访问(C的邻接点)B。 </p><pre><code>在第2步访问C之后，接下来应该访问C的邻接点，即&quot;B和D&quot;中一个(A已经被访问过，就不算在内)。而由于B在D之前，先访问B。 </code></pre><p><strong>第4步</strong>：访问(C的邻接点)D。 </p><pre><code>在第3步访问了C的邻接点B之后，B没有未被访问的邻接点；因此，返回到访问C的另一个邻接点D。 </code></pre><p><strong>第5步</strong>：访问(A的邻接点)F。 </p><pre><code>前面已经访问了A，并且访问完了&quot;A的邻接点B的所有邻接点(包括递归的邻接点在内)&quot;；因此，此时返回到访问A的另一个邻接点F。 </code></pre><p><strong>第6步</strong>：访问(F的邻接点)G。 </p><p><strong>第7步</strong>：访问(G的邻接点)E。</p><p>因此访问顺序是：<strong>A -&gt; C -&gt; B -&gt; D -&gt; F -&gt; G -&gt; E</strong></p><h3 id="有向图-directed-graph"><a href="#有向图-directed-graph" class="headerlink" title="有向图(directed graph)"></a>有向图(directed graph)</h3><p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fc7gqb4esdj308f08y74n.jpg" alt=""></p><p><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fc7gqggvlfj308f0a0gm7.jpg" alt=""></p><p><strong>第1步</strong>：访问A。 </p><p><strong>第2步</strong>：访问B。 </p><pre><code>在访问了A之后，接下来应该访问的是A的出边的另一个顶点，即顶点B。 </code></pre><p><strong>第3步</strong>：访问C。 </p><pre><code>在访问了B之后，接下来应该访问的是B的出边的另一个顶点，即顶点C,E,F。在本文实现的图中，顶点ABCDEFG按照顺序存储，因此先访问C。 </code></pre><p><strong>第4步</strong>：访问E。 </p><pre><code>接下来访问C的出边的另一个顶点，即顶点E。 </code></pre><p><strong>第5步</strong>：访问D。 </p><pre><code>接下来访问E的出边的另一个顶点，即顶点B,D。顶点B已经被访问过，因此访问顶点D。 </code></pre><p><strong>第6步</strong>：访问F。 </p><pre><code>接下应该回溯&quot;访问A的出边的另一个顶点F&quot;。 </code></pre><p><strong>第7步</strong>：访问G。</p><p>因此访问顺序是：<strong>A -&gt; B -&gt; C -&gt; E -&gt; D -&gt; F -&gt; G</strong></p><h2 id="DFS-implement"><a href="#DFS-implement" class="headerlink" title="DFS implement"></a>DFS implement</h2><p>由于tree可以看做特殊的graph，这里针对graph来实现</p><p>​<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> calss GraphNode&#123;</div><div class="line">  <span class="keyword">int</span> val;</div><div class="line">  List&lt;GraphNode&gt; neighnors;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>为了防止重复，使用一个HashSet来保存已经遍历过的节点</p><p>​<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HashSet&lt;GraphNode&gt; visited = <span class="keyword">new</span> HashSet&lt;GraphNode&gt;();</div></pre></td></tr></table></figure></p><h3 id="Recursive-DFS"><a href="#Recursive-DFS" class="headerlink" title="Recursive DFS"></a>Recursive DFS</h3><p>每到一个节点，标记已经被访问过，对邻居里没有访问的节点进行DFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(GraphNode nd)</span></span>&#123;</div><div class="line">  <span class="comment">//print nd.val</span></div><div class="line">  visited.add(nd);</div><div class="line">  <span class="keyword">for</span>(GraphNode next : nd.neighbours)&#123;</div><div class="line">    <span class="keyword">if</span>(!visited.contains(next))&#123;</div><div class="line">      DFS(next);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>经典的DFS，回溯算法(backtracking)其实相当于在一个求解域做DFS(剪枝)，另外，拓扑排序也是基于递归DFS进行的一点修改</p><h3 id="Non-Recursive-DFS"><a href="#Non-Recursive-DFS" class="headerlink" title="Non-Recursive DFS"></a>Non-Recursive DFS</h3><p>非递归版本，相比递归版本效率高，且不会导致栈溢出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(GraphNode start)</span></span>&#123;</div><div class="line">  Stack&lt;GraphNode&gt; s = <span class="keyword">new</span> Stack&lt;GraphNode&gt;();</div><div class="line">  q.push(start);</div><div class="line">  visited.add(start);</div><div class="line">  <span class="keyword">while</span>(!s.empty())&#123;</div><div class="line">    GraphNode cur = s.pop();</div><div class="line">    <span class="comment">//print cur.val</span></div><div class="line">    <span class="keyword">for</span>(GraphNode next : cur.children)&#123;</div><div class="line">      <span class="keyword">if</span>(!visited.contains(next))&#123;</div><div class="line">        s.push(next);</div><div class="line">        visited.add(next);<span class="comment">//mark node as visited when adding to stack.</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;<span class="comment">//while end</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="for-Tree-DFS-with-depth"><a href="#for-Tree-DFS-with-depth" class="headerlink" title="(for Tree) DFS with depth"></a>(for Tree) DFS with depth</h3><p>深度在搜索中记录，递归版本加一个depth参数++就可以了，非递归版本用一个和s平行的栈记录深度</p><h3 id="DFS-for-binary-tree–PreOrder-traversal"><a href="#DFS-for-binary-tree–PreOrder-traversal" class="headerlink" title="DFS for binary tree–PreOrder traversal"></a>DFS for binary tree–PreOrder traversal</h3><p>DFS对于二叉树而言，其遍历序列就是其前序遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[preorder(node)] = node.val + [preorder(node.left)] + [preorder(node.right)]</div></pre></td></tr></table></figure><h2 id="Cycle-Detection"><a href="#Cycle-Detection" class="headerlink" title="Cycle Detection"></a>Cycle Detection</h2><p>对DFS稍作修改，可以判断一个有向图是否有回路</p><p>在递归版本里，我们队每一个点改为三种标记：</p><ul><li>未访问过(0)</li><li>正在访问其邻居节点(1)</li><li>已经访问完毕该节点以及所有该节点可以到达的节点(2)</li></ul><p>什么时候会出现回路？<strong>就是当前节点v的一个邻居u的状态为1的时候。</strong></p><p>因为该节点状态为1，即还没有把它以后的节点全部遍历，所以当前节点v肯定可以从u到达，而现在又可以从v到达u，所以回路构成。</p><p>为了表示一个节点的三种状态, 我们把visited的定义改一下, 定义为一个hashmap:<br><code>HasheMap visited = new HasheMap();</code></p><p>节点不在visited表示还未访问过, 节点对应为false表示正在访问, 节点对应为true表示已经访问该节点以及所有可以从它到达的节点.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(GraphNode nd)</span></span>&#123;      </div><div class="line">    visited.put(nd, <span class="keyword">false</span>); <span class="comment">// mark as status-1   </span></div><div class="line">    <span class="keyword">for</span>(GraphNode next: nd.neighbors)&#123;   </div><div class="line">        <span class="keyword">if</span>( !visited.contains(next) )   </div><div class="line">            DFS(next);   </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(visited.get(next)==<span class="keyword">false</span>) <span class="comment">// found cycle   </span></div><div class="line">            System.out.println(<span class="string">"Cycle detected!!!"</span>);   </div><div class="line">    &#125;<span class="comment">// now all touchable nodes from nd are visited   </span></div><div class="line">    visited.put(nd, <span class="keyword">true</span>); <span class="comment">// mark as status-2   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Topology-Sort"><a href="#Topology-Sort" class="headerlink" title="Topology Sort"></a>Topology Sort</h2><p>这一节(以及上一节)参考这个非常棒的视频: <a href="https://class.coursera.org/algo-003/lecture/52" target="_blank" rel="external">https://class.coursera.org/algo-003/lecture/52</a></p><p>拓扑排序是一个dfs的应用, 所谓拓扑排序是指在一个DAG(有向无回路图)里给每个节点定义一个顺序(v1…vn), 使得按照这个顺序遍历的节点, 每一个节点vi都是之前遍历过的的节点(v1 ~ vi-1)所指向的(或没有任何其他节点指向的).</p><p>好像还没说清楚… 拓扑排序的一个应用就是对于各种依赖性(比如学习课程A需要先学习过课程B)组成的图寻找一个节点遍历的顺序使其可行.</p><p><strong>propositions</strong>:</p><blockquote><ul><li>拓扑排序的结果不唯一.</li><li>有回路的图不存在拓扑顺序.</li><li>如果一个节点没有出边, 那么它可以放在拓扑排序的最后面(没有节点以来它).</li><li>如果一个节点没有入边, 那么它可以放在拓扑排序的最后面.</li></ul></blockquote><p>简单修改一下递归的dfs就可以处理拓扑排序: 维护一个计数器<code>K</code>(初始化为n=所有节点数), 每当一个点已经遍历完毕(所有通过这个点可以到达的点都已经被走过)以后, 就把这个点的顺序设为K, 同时减少K.</p><p>就用一个HashMap来为每个节点关联一个序号好了:<br><code>HasheMap order = new HasheMap();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(GraphNode nd)</span></span>&#123;      </div><div class="line">    <span class="keyword">for</span>(GraphNode next: nd.neighbors)&#123;   </div><div class="line">        <span class="keyword">if</span>( !visited.contains(next) )   </div><div class="line">            DFS(next);   </div><div class="line">    &#125;<span class="comment">// all touchable nodes from nd are visited   </span></div><div class="line">    order.put(nd, K--);   </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面只是对于一个点进行的, 为了给所有点拓扑排序, 只要从一个没有出边的节点出发进行遍历, 一直运行到所有的节点都已经访问过为止。</p><h2 id="LeetCode-DFS"><a href="#LeetCode-DFS" class="headerlink" title="LeetCode DFS"></a>LeetCode DFS</h2><p>LeetCode上很多题目都是使用DFS或其思想进行处理的</p><p>DFS的框架可以理解为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//结果集</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> T ans = <span class="keyword">new</span> T();</div><div class="line"><span class="comment">//中间结果集</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> T path = <span class="keyword">new</span> T();</div><div class="line"><span class="comment">//问题</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">problem</span><span class="params">()</span></span>&#123;</div><div class="line">  ans.clear();<span class="comment">//leetcode的一个特殊点，每次要清空结果集，避免重复</span></div><div class="line">  robot(idx ,...);<span class="comment">//DFS部分，常用idx作为结果递归的标志</span></div><div class="line">  <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="comment">//DFS</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">robot</span><span class="params">(<span class="keyword">int</span> idx, ...)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(xxx)&#123;<span class="comment">//边界条件，递归出口条件</span></div><div class="line">    <span class="comment">//用当前path内容生成一部分结果集</span></div><div class="line">    <span class="comment">//handle path </span></div><div class="line">    ans.add(tmp);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//递归处理</span></div><div class="line">  path[idx] = <span class="keyword">true</span>;<span class="comment">//递归前假设</span></div><div class="line">  robot(++idx, ...);<span class="comment">//根据不同情况进行处理</span></div><div class="line">  path[idx] = <span class="keyword">false</span>;<span class="comment">//递归后还原</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里举例进行分析：</p><h3 id="Subsets"><a href="#Subsets" class="headerlink" title="Subsets"></a>Subsets</h3><p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets.</p><p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p><p>For example,<br>If <strong>nums</strong> = <code>[1,2,3]</code>, a solution is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [3],</div><div class="line">  [1],</div><div class="line">  [2],</div><div class="line">  [1,2,3],</div><div class="line">  [1,3],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure><script src="https://gist.github.com/Chen-tao/f97f5628bdf96b2ce8ea3b11822d40c5.js"></script><p>原集合每一个数字只有两种状态，要么存在，要么不存在，那么在构造子集时就有选择和不选择两种情况，所以可以构造一棵二叉树，左子树表示选择该层处理的节点，右子树表示不选择，最终的叶节点就是所有子集合，树的结构如下：</p><p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fc7i519tsrj30d6083jru.jpg" alt=""></p><p>DFS几乎可以算是图与树种最重要的算法，这里总结不算全面，但基本涵盖，这里最主要是搜索递归的思想。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#recursive-dfs&quot;&gt;Recursive DFS&lt;/a&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://chen-tao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://chen-tao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="http://chen-tao.github.io/tags/DFS/"/>
    
      <category term="搜索" scheme="http://chen-tao.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="递归" scheme="http://chen-tao.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="回溯" scheme="http://chen-tao.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>BFS广度优先搜索算法总结</title>
    <link href="http://chen-tao.github.io/2017/01/25/about-bfs/"/>
    <id>http://chen-tao.github.io/2017/01/25/about-bfs/</id>
    <published>2017-01-24T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BFS-intro"><a href="#BFS-intro" class="headerlink" title="BFS intro"></a>BFS intro</h2><p>广度优先搜索算法(Breadth First Search)，又称为”宽度优先搜索”或”横向优先搜索”，简称BFS。</p><p>它的思想是：从图中某顶点v出发，在访问了v之后依次访问v的各个未曾访问过的邻接点，然后分别从这些邻接点出发依次访问它们的邻接点，并使得“先被访问的顶点的邻接点先于后被访问的顶点的邻接点被访问，直至图中所有已被访问的顶点的邻接点都被访问到。如果此时图中尚有顶点未被访问，则需要另选一个未曾被访问过的顶点作为新的起始点，重复上述过程，直至图中所有顶点都被访问到为止。</p><p>换句话说，广度优先搜索遍历图的过程是以v为起点，由近至远，依次访问和v有路径相通且路径长度为1,2…的顶点。</p><h2 id="Understand-BFS"><a href="#Understand-BFS" class="headerlink" title="Understand BFS"></a>Understand BFS</h2><h3 id="无向图-undirected-graph"><a href="#无向图-undirected-graph" class="headerlink" title="无向图(undirected graph)"></a>无向图(undirected graph)</h3><p><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fc7jidbnayj30eq0e73zi.jpg" alt=""></p><p><strong>第1步</strong>：访问A。 </p><p><strong>第2步</strong>：依次访问C,D,F。 </p><pre><code>在访问了A之后，接下来访问A的邻接点。前面已经说过，在本文实现中，顶点ABCDEFG按照顺序存储的，C在&quot;D和F&quot;的前面，因此，先访问C。再访问完C之后，再依次访问D,F。 </code></pre><p><strong>第3步</strong>：依次访问B,G。 </p><pre><code>在第2步访问完C,D,F之后，再依次访问它们的邻接点。首先访问C的邻接点B，再访问F的邻接点G。 </code></pre><p><strong>第4步</strong>：访问E。 </p><pre><code>在第3步访问完B,G之后，再依次访问它们的邻接点。只有G有邻接点E，因此访问G的邻接点E。</code></pre><p>因此访问顺序是：<strong>A -&gt; C -&gt; D -&gt; F -&gt; B -&gt; G -&gt; E</strong></p><h3 id="有向图-directed-graph"><a href="#有向图-directed-graph" class="headerlink" title="有向图(directed graph)"></a>有向图(directed graph)</h3><p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fc7jjkk7w8j30fs0cn75e.jpg" alt=""></p><p><strong>第1步</strong>：访问A。 </p><p><strong>第2步</strong>：访问B。 </p><p><strong>第3步</strong>：依次访问C,E,F。 </p><pre><code>在访问了B之后，接下来访问B的出边的另一个顶点，即C,E,F。前面已经说过，在本文实现中，顶点ABCDEFG按照顺序存储的，因此会先访问C，再依次访问E,F。 </code></pre><p><strong>第4步</strong>：依次访问D,G。 </p><pre><code>在访问完C,E,F之后，再依次访问它们的出边的另一个顶点。还是按照C,E,F的顺序访问，C的已经全部访问过了，那么就只剩下E,F；先访问E的邻接点D，再访问F的邻接点G。</code></pre><p>因此访问顺序是：<strong>A -&gt; B -&gt; C -&gt; E -&gt; F -&gt; D -&gt; G</strong></p><h2 id="BFS-implement"><a href="#BFS-implement" class="headerlink" title="BFS implement"></a>BFS implement</h2><p>对于没有边权重的图来说可以计算最短路径. </p><p>由于树的BFS只是图的BFS的一种特殊情况, 而且比较简单不需要visited标记, 这里只写一下图的BFS好了. </p><p>先定义一个Graph类, 这里在每一个节点保存邻居信息:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphNode</span></span>&#123;   </div><div class="line">    <span class="keyword">int</span> val;   </div><div class="line">    List&lt;GraphNode&gt; neighbors;   </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BFS-for-trees-graphs"><a href="#BFS-for-trees-graphs" class="headerlink" title="BFS for trees/graphs"></a>BFS for trees/graphs</h3><p>图的遍历需要注意不走重复节点, 所以需要一个HashSet(名字叫visited)来保存哪些节点已经访问过了. </p><p>需要注意的是, <em>在把一个节点放进队列queue的时刻就要把它放进visited</em>, 而不是在队列里取出来的时刻再放.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BFS</span><span class="params">(GraphNode start)</span></span>&#123;   </div><div class="line">    LinkedList&lt;GraphNode&gt; q = <span class="keyword">new</span> LinkedList&lt;GraphNode&gt;();   </div><div class="line">    HasheSet&lt;GraphNode&gt; visited = <span class="keyword">new</span> HasheSet&lt;GraphNode&gt;();   </div><div class="line">    q.push(start);   </div><div class="line">    visited.add(start);   </div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;   </div><div class="line">        GraphNode cur = q.poll();   </div><div class="line">        System.out.println(cur.val);   </div><div class="line">        <span class="keyword">for</span>(GraphNode next: cur.children)&#123;    </div><div class="line">            <span class="keyword">if</span>(!visited.contains(next))&#123;   </div><div class="line">                q.push(next);   </div><div class="line">                visited.add(next); <span class="comment">// mark node as visited when adding to queue!    </span></div><div class="line">            &#125;   </div><div class="line">        &#125;   </div><div class="line">    &#125;<span class="comment">//while   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BFS-with-distance"><a href="#BFS-with-distance" class="headerlink" title="BFS with distance"></a>BFS with distance</h3><p>在BFS的同时我们可以记录从start节点到当前node的距离, 方法是把一个距离信息同时入队(封装一个<code>Pair</code>), 或者使用一个与queue<em>平行</em>的队列保存距离信息. </p><p>在上面的代码中, 加入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//...   </span></div><div class="line">LinkedList&lt;Integer&gt; distq = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();   </div><div class="line">distq.push(<span class="number">0</span>);<span class="comment">// distance from start to start   </span></div><div class="line"><span class="comment">//...   </span></div><div class="line"><span class="comment">// in the while(!q.empty()) loop:    </span></div><div class="line">    <span class="keyword">int</span> d = distq.poll();<span class="comment">//get distance from start to current node   </span></div><div class="line">    <span class="keyword">for</span>(GraphNode next: node.children)&#123;   </div><div class="line">        distq.push(d+<span class="number">1</span>);<span class="comment">// distance from start to next node   </span></div><div class="line">        <span class="comment">//...</span></div></pre></td></tr></table></figure><p>对于Tree的情况来说, 这里的dist其实就是当前节点的深度depth.</p><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p><strong>性质1:</strong><br>每个节点node的distance都是node距离起始点start的最短距离.</p><p><strong>性质2:</strong><br>距离start近的节点(depth浅的节点)一定比距离start远的节点早被访问到.</p><p>这是对一个树BFS的时候节点的访问顺序:<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fc7jvepss7j309f06l3yq.jpg" alt=""></p><h3 id="BFS-“by-layer”"><a href="#BFS-“by-layer”" class="headerlink" title="BFS “by layer”"></a>BFS “by layer”</h3><p>参考上面的性质, 可以一次处理”一层”的节点, “一层”的意思是指所有节点距离start的距离相同. 代码在while循环里不是一次poll一个节点, 而是一次把queue的内容处理完, 然后换新的queue进入下一次while循环. 代码重新写一下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BFS</span><span class="params">(GraphNode start)</span></span>&#123;   </div><div class="line">    ArrayList&lt;GraphNode&gt; q = <span class="keyword">new</span> ArrayList&lt;Tree&gt;();   </div><div class="line">    HasheSet&lt;GraphNode&gt; visited = <span class="keyword">new</span> HasheSet&lt;GraphNode&gt;();   </div><div class="line">    q.push(start);   </div><div class="line">    visited.add(start);   </div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;   </div><div class="line">        ArrayList&lt;GraphNode&gt; newq = <span class="keyword">new</span> ArrayList&lt;Tree&gt;();<span class="comment">// create a new queue   </span></div><div class="line">        <span class="keyword">for</span>(GraphNode cur: q)&#123;<span class="comment">// deal with all nodes in the queue    </span></div><div class="line">            System.out.print(cur.val+<span class="string">", "</span>);<span class="comment">// all nodes in q are of the same distance/depth   </span></div><div class="line">            <span class="keyword">for</span>(GraphNode next: cur.children)    </div><div class="line">                <span class="keyword">if</span>(!visited.contains(next))   </div><div class="line">                    &#123; newq.push(next);visited.add(next); &#125;   </div><div class="line">        &#125;   </div><div class="line">        System.out.println();   </div><div class="line">        q = newq;<span class="comment">//replace q with newq   </span></div><div class="line">    &#125;<span class="comment">//while   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上程序每次打印一行, 第i行包括了距start距离为i的所有节点. </p><p>由于这样的话每次不必在队首poll出元素(而是依次处理所有queue的元素), 所以可以改用ArrayList. 此时while循环里的不变量是: 所有q里面的节点距离start的距离都相同.</p><h3 id="complexity"><a href="#complexity" class="headerlink" title="complexity"></a>complexity</h3><p>假设一个图有N个节点和M条边, BFS会走遍所有节点, 时间是O(N), 然后由于每个节点会检查所有的出边, 最终所有的边都会被检查过, 时间是O(M), 所以BFS的时间复杂度是<strong>O(N+M)</strong>.</p><p>队列里面最多可能存放所有节点, 空间复杂度为<strong>O(N)</strong>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BFS-intro&quot;&gt;&lt;a href=&quot;#BFS-intro&quot; class=&quot;headerlink&quot; title=&quot;BFS intro&quot;&gt;&lt;/a&gt;BFS intro&lt;/h2&gt;&lt;p&gt;广度优先搜索算法(Breadth First Search)，又称为”宽度优先搜索”
      
    
    </summary>
    
      <category term="算法" scheme="http://chen-tao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://chen-tao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="http://chen-tao.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>日语授受关系总结</title>
    <link href="http://chen-tao.github.io/2017/01/18/japanese-shou-shou-rela/"/>
    <id>http://chen-tao.github.io/2017/01/18/japanese-shou-shou-rela/</id>
    <published>2017-01-17T16:00:00.000Z</published>
    <updated>2017-09-11T05:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./授受关系.png" alt="授受关系"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;./授受关系.png&quot; alt=&quot;授受关系&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="日语" scheme="http://chen-tao.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>云计算那点事</title>
    <link href="http://chen-tao.github.io/2017/01/12/cloud-things/"/>
    <id>http://chen-tao.github.io/2017/01/12/cloud-things/</id>
    <published>2017-01-11T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="FROM-知乎专栏"><a href="#FROM-知乎专栏" class="headerlink" title="FROM 知乎专栏"></a>FROM <a href="https://zhuanlan.zhihu.com/p/22445510?refer=mintshow" target="_blank" rel="external">知乎专栏</a></h6><blockquote><p>来自知乎专栏的一篇文章，信息量真的很大，也有不少很风趣的逸事。</p><p>其实我也浅短的接触过一些云计算：13年金山云起步，有幸参与其中，那时候和斌神被老盘带进公司，他搞SDK(就是直接拿S3的转换)，我在另一侧搞运维和Hadoop生态相关的东西，每周一都会在上地桥东见到雷老板来开会，虎虎生风的，那时候也是小米上升期，真的是恍若隔世。</p><p>如文中所述，金山云确实当时很依赖小米，刚总可能觉得这样的状态他不喜欢，然而雷老板似乎又没给他多大的活动空间(参照下傅盛)，于是，约莫一年刚总出走，金山云又被迅雷吞吃，这一段历史，也算基本告一段落。</p></blockquote><h2 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a><strong>（一）</strong></h2><ol><li>高升科技（000971）的老大于平十年前跟我是同行，在东北做声讯电话业务。后来有人欠他钱，就抄家伙喊帮手去要钱，借钱的没办法说你把我砍了也没钱，我有个机房，要不抵给你吧。老于想想也没办法只好接管了机房，拿下来后就找关系卖IDC，卖着卖着发现，100万的欠款换来的机房，竟然卖了130万，敢情这东西有利润啊。 于是下血本进入IDC市场，9年后公司上市，市值100多亿。 有些做地产的主动找老于要给地，说这地租出去租不了几个钱，还不如给你拿去盖机房赚的更多。</li><li>Openstack是个坑，谁用谁知道，国内一些订制openstack的企业能搞出一些私有云的项目，然而其实做起来都是苦不堪言。想想也是的，rackspace和NASA能搞出什么东西呢？ 主流云计算服务商都不用openstack， 小米运维那边的几个好友也说试了openstack感觉不行。</li><li>360在openstack出来之前内部搞过一套类似的东西，有点作用，后来openstack出来之后就全面拥抱openstack，这下好了完美入坑，360云事业部后来裁掉了，不过老周倒也直爽，尽管自己的兴趣点都在智能硬件和花椒直播上，但也给云那边烧过几个亿，后来拆VIE业绩有些压力就动手砍掉了，360云当时的老大是惠普过来的，业务能力超强，以前把惠普走下坡路的服务器业务从上一年的8个亿做到20多个亿，这人脾气很好，老周说分手就同意分手了，后来跳槽去了乐视云。</li><li>黄允松在IBM就负责云，从18摸出来后，有点担心老东家找麻烦，于是自学python，换了门语言吭哧吭哧写出了青云， 这下你没法告我了吧，你吹得我涨不？ 不过Qingcloud的发展也挺坎坷，一度认为互联网公司会成为云计算的忠实客户，后来发现客户都在深圳，那些金融大土豪才是最喜欢给云计算付费的。于是黄云松搬去深圳住了大半年，把业务撑起来了。</li><li>13年的时候研究过SDN，那时候SDN太火了，饭桌上不提两下openflow都没法在圈子里混了。只有钱伯斯敢站出来说openflow是个垃圾， 于是很自然地，钱伯斯被骂成猪头，大家觉得他廉颇老矣。 后来事实证明钱伯斯是正确的，技术细节就不多说了，说一个小问题：某银行某年采购了15亿的网络设备，第二年有人提议说咱们上SDN，用openflow，然后发现老设备不兼容全部处理掉把，上SDN差不多需要再投入18亿……   后面的结果可想而知。</li><li>UCloud刚成立的时候，冲着季昕华那名头很多投资人都追上去想投资，一问融资金额就犹豫了，再细问一下发现云计算挺烧钱，烧服务器烧带宽，在IDC上的投入简直堪比炒房，那时候阿里云还备受质疑，云计算市场很不明朗， 于是各种认怂了说季总威武霸气，小的我看不懂不敢投祝你幸福之类。 后来DCM和君联杀进后越做越好， 投资人聊到云计算就提自己当年如何看过以及如何错过Ucloud，说得都是绘声绘色栩栩如生。</li><li>CDN市场以前是网宿蓝汛90%，帝联7%，剩下的包括BAT在内抢3%，可惜蓝汛在美国上市，市值惨不忍睹。蓝汛催钱也挺辛苦，经常要拉横幅鼓励员工开催款动员大会。 后来霍涛景楠等人离开蓝汛，出去搞了个白山云，蓝汛昔日的地位不复存在了。</li><li><strong>金山云靠小米渠道去圈游戏客户是真的，你用金山云小米就帮你推，为此还从其他云平台撬过几个耳熟能详的大客户。 雷军玩生态是下血本的，不像某些企业内部要资源还难如上青天。</strong></li><li><strong>阿里云每年双十一的时候全国各地都是通宵值守的，尽管这样也扛不住，各种问题层出不穷， 后来甚至把事务逻辑都拿掉了，于是就造成了超卖，超卖得赔钱啊，每年为超卖要补很多钱。</strong></li><li>再说个阿里云的，阿里云处理的一些问题确实是世界级的，前所未有的，包括被黑客攻击也1是，光DDOS的量级就屡屡破世界纪录。几年前没怎么上SSD的时候和阿里云和AWS一样存在I/O问题，后来好了很多。</li><li>七牛是做网盘起家的，网盘实在不赚钱于是做企业存储把收入做起来了，再到混合云。2014年在GiTC上碰到许式伟，旁边人问他最多的就是七牛和又拍有啥区别，他说了十几遍又拍做CDN，七牛做存储。后来七牛不仅CDN做得风生水起，还基于CDN做直播云。 不过说起直播，很多直播平台的量都是刷的，CDN厂商没怎么赚到钱。</li><li><strong>2013年QCon见到季昕华，问他怎么做安全的，怎么抗DDOS，他说他不抗D，业内黑客基本都认识他，如果要打的话会知会一声， 他会跟客户说有人要打你，建议你去阿里云……  后来UCloud真被打了，我们就在说时代变了，新人黑客都不认识老季了。</strong></li><li>青云的服务是1000倍赔付的，有次广州机房被雷劈了， 我也是受害者，那次被劈据说赔了1000多万。网宿有一次被打也连带七牛服务挂掉，损失未知，后来七牛就不把鸡蛋放在一个笼子里了。</li></ol><p><strong>今日推荐： fit2cloud</strong></p><p>我第一次见到fit2cloud这个产品的时候，就觉得一个技术负责人最需要的就是这个产品。</p><p>试想一下技术实现最头疼的不是把需求给做出来，而是你代码写好后发现你有一刀子东西要去部署，你要面对大量的工具，多种基础设施平台，你缺乏一个好的管理工具。</p><ul><li>「FIT2CLOUD 混合云管理平台」帮助企业统一管理异构和异地基础设施，包括物理机(AIX)、虚拟化平台（vSphere，FusionSphere等）、私有云 （Openstack等）和公有云（亚马逊AWS、阿里云等），以服务目录形式对外统一交付IT资源，实现自服务IT。</li><li>「FIT2CLOUD DevOps协作平台」帮助企业在混合云环境下落地亚马逊AWS DevOps解决方案，实现对应用全生命周期的自动化管理，打通从代码到服务的转化通道，实现云应用的持续部署、交付和自动化运维。</li><li>「FIT2CLOUD 云费用管理平台」帮助企业管控云成本，实现对云费用和资源使用情况的可视化分析，优化和预测。 </li></ul><p>作为一个CMP云平台管理产品，Fit2Cloud目前支持主流公有云（阿里云、AWS、腾讯、青云、UCLOUD等）使用Fit2Cloud，你就不需要再繁琐地分别维护各个基础设施，管理多个独立的系统，对成长期的企业来说大大减少了投入，对技术人员来说也解决了一个刚需——懒。</p><p>Fit2Cloud的团队成员普遍是具有多年经验的Devops，公司拥有10多位AWS认证架构师，其中有两位为专业级认证架构师。同时，公司也是AWS中国区域的“高级技术平台合作伙伴”。</p><h2 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a><strong>（二）</strong></h2><ol><li><strong>政企云跟ISV类似，区域性很强，东北就是东软，东软到了山东就不好使了，山东是浪潮，北京则是中软和软通。 再到了地级市都有更细分的运营公司，比如山东有个地方叫日照市，那里有家快上市的公司叫展望科技，垄断了日照市政企云业务，展望的董事长在我办公室里用浓重的山普说：只要一天有展望在，日照政企就只认展望。</strong></li><li>两年前我刚创业时参加itech在西湖的一个高尔夫活动，当时见识了著名的华三“铁娘子”——吴敬传女士。 这位前华三CEO在过去10年间做到了百亿的年销售额，把思科打出了中国。除此之外，她还是个高尔夫80杆上下的高手。 华三那时候也是国内率先进军SDN和NFV的企业，势不可挡。 只不过没想到2015年初一场政变， 母公司惠普的CEO（也是一位女性）在她休假的时候解除了她的职务， 当时还有大量人员出走。 后来华三和惠普中国一起成为新华三，被紫光收购，成了一家校办企业的子公司。 惠普中国也怪好玩的，一帮满嘴洋文的港台东南亚高管现在成了校企人士了，那画面不敢直视。  政变期出走的一批老兵出来跟阿里合作做了数梦工厂，专做私有云， 吴敬传卸下兵权后休息了一年半，最后出任数梦工厂的CEO，政变结束。</li><li>安全圈几家竞争公司很容易大打出手，但码头工人组织（docker圈）还是很团结的，有时会聚聚一起合个影啥的，毕竟市场还在成长阶段，谈竞争还早。 Daocloud的喻勇自称为胖子，但是论吨位还是灵雀云的左钥更胜一筹。</li><li>云计算好赚钱吗？我找些参照物吧，citrix是卖虚拟桌面的，单子都是几千万的，销售提成据说有10%…… VMware比citrix公司更有名更大，也是出了名的简单粗暴而暴利。 国外卖VPS的比卖独立服务器的更富得流油。 国内各种复杂原因很不好说， 我记得盛大云一个哥们跟我说：<strong>看ROI无非就是看我怎么虚，给得起钱我自然有更好的性能，一个核虚20个核和一个核虚5个核是不一样的。 厉哥你要追求性能的话，我大不了两个核给你虚成一个核……</strong></li><li>云计算公司加班都很辛苦， 尽管在上海，Daocloud 也要996赶产品。 Qingcloud有这么一句话，在非工作日如果你不在工作的话，你得没有愧疚感才行。所以来炜在小米996的环境下竟然可以折腾出Openfalcon这样的开源产品，让我对他不由地肃然起敬。 <strong>来炜在北京的活动半径不超过西二旗，从百度到小米级别一直不高，后来能成为滴滴五大技术台柱之一完全非人般的努力下的结果。</strong></li><li>季昕华在圈内的评价极高，但他的普通话有一种浓浓的非洲土语的感觉，需要配同声翻译，所幸圈子里的朋友们都比较有耐心，积极主动地跟他交流，在朋友们的支持和他自己的努力下，如今交流越来越顺畅了。这里希望蔡文胜也能早日战胜口音障碍。</li><li>互联网就算大公司很多时候也很苦逼，技术这边压榨硬件性能很常见， 很好，单节点并发再多一点，对，单节点吞吐再高一点。 土豪金融公司就不一样了，那个采购清单华丽啊，有的技术人员做了十几年技术，给客户实施的时候望着那些装备都会流口水。 青藤云安全最大的客户是借贷宝，有6000多个节点。</li><li>极光推送用户超10亿了，最早是做IM的，后来发现没法跟微信竞争就把技术开放出来做长连接，立马to B，单台服务器可以支持400万长连接。极光的创始人是开宾利的，找IDG融资的那一轮自己也投了融资金额的20%。 </li><li>Leancloud原来叫AVOS，创始人里有youtube的创始人陈士骏，明星团队，也得到了李开复的大力推荐。但是那个时候PaaS的概念真心不好讲，江宏博士后来完全独立出来成了Leancloud，SDK做的非常好，用起来很舒服，但叫好不叫座。他们的存储、推送等都是自己做的，这一点也被我吐槽过还因此差点结下了梁子。</li><li><strong>云计算的销售往往都是原来卖IDC的，套用一个蓝汛妹子的话：反正都是出来卖的，卖什么不是卖？ 但是市场一般都是互联网公司背景的。如果你在活动上看到美团云的展台上有美女，不要以为那是他们请来的showgirl，那是他们员工。美团云试用下来感觉还可以，价格不错， 有个做用大数据算命的朋友用了不少美团云的服务，反馈说真心不错。 京东云也有一些特色，不要小看二线云产品，外部用户数量都不少，说明这个大市场还远未成熟。</strong></li><li>秋野是运维界郭德纲，名震天下。从世纪佳缘出来的时候，看到刘惠璞去了聚美，于是就去了乐蜂，一度把乐蜂的技术全部接管了下来，可惜乐蜂这个庙越来越破留不住神仙，后来去了民生电商，也不只限于运维了，管一大片技术业务。 但凡技术大会上只要有秋野出现，必然是全场爆满，我有几次想进去瞅两眼结果都挤不进去。 类似的情况我只见过陈浩（左耳朵耗子，前阿里云的）有过。 运维界撒贝宁是匡萃彪，51到安居客到途牛再到自己创业，以往人们不太意识到运维人员的存在，现在娱乐化了之后这个圈子有活力多了，是好事。</li><li>试用了sumo logic，折腾两天未果，然后果断弃，后来sumo logic就反复给我电话，我到了国内也不被放过，一直无力吐槽。直到有一天红杉的人跟我说他们投了sumo logic，有一种如释重负的感觉，就像捂着肚子转了三圈终于找到一个厕所一样，当天吐槽到红杉的人脸色跟吃了大便一样难看。 不知道现在产品如何，但是当时的我很难想象怎么会有一家公司的产品部署体验如此反人类的，仿佛就是为增加你部署难度而生的。</li><li>戴尔曾经以call center黄埔军校著称，时代不一样了，日子也越来越不好过。上次去崇明岛戴尔大会上听一位金博士用纯正的台湾腔讲硬件，说硬件也就这样了都是上面的软件贵，一台8000美金的服务器，你们猜上面的Oracle多少钱？ 台下有人说有8000吗？ 金博士： 8000？ 一个核就要8000，怎么也得要近5万美金。  台下顿时鸦雀无声，大家垂头丧气地，感觉自己都入错行了。</li><li>云公司的CEO一般以业务能力为先，七牛是个特例，七牛已经快上市了但许式伟还在写代码。《docker源代码分析》的作者，Daocloud初创成员孙宏亮单身，有相亲节目看中了他，三顾茅庐请他上节目，人都没见到就被该厂市场老大霍太太按住了，霍太太的老公不是霍元甲的后代，是瑞典人，姓Hall。</li></ol>]]></content>
    
    <summary type="html">
    
      来自知乎专栏的一篇文章，信息量很大，也有不少很风趣的逸事。很多甚至是我见过错过的人生。
    
    </summary>
    
    
      <category term="感悟" scheme="http://chen-tao.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="云计算" scheme="http://chen-tao.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>关键业务系统jvm参数推荐</title>
    <link href="http://chen-tao.github.io/2017/01/10/jvm-param-rcmd-2016/"/>
    <id>http://chen-tao.github.io/2017/01/10/jvm-param-rcmd-2016/</id>
    <published>2017-01-09T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言1，资料"><a href="#前言1，资料" class="headerlink" title="前言1，资料"></a>前言1，资料</h3><p>学习开源项目的启动脚本是个不错的主意，比如<a href="http://github.com/apache/cassandra/blob/trunk/conf/jvm.options" target="_blank" rel="external">Cassandra家的</a>， 附送一篇<a href="http://tobert.github.io/pages/als-cassandra-21-tuning-guide.html" target="_blank" rel="external">解释它的文章</a>。</p><p><a href="http://hllvm.group.iteye.com/group/topic/27945" target="_blank" rel="external">JVM调优的”标准参数”的各种陷阱</a> R大的文章，在JDK6时写的，期待更新。</p><p>偶然翻到Linkedin工程师的<a href="http://www.importnew.com/11336.html" target="_blank" rel="external">一篇文章</a>。</p><p>更偶然翻到的<a href="http://www.techpaste.com/2012/02/java-command-line-options-jvm-performance-improvement/" target="_blank" rel="external">一份不错的参数列表</a>。</p><p>并发编程网上的<a href="http://ifeve.com/useful-jvm-flags/" target="_blank" rel="external">JVM实用参数系列</a></p><h3 id="前言2，-XX-PrintFlagsFinal打印参数值"><a href="#前言2，-XX-PrintFlagsFinal打印参数值" class="headerlink" title="前言2， -XX:+PrintFlagsFinal打印参数值"></a>前言2， -XX:+PrintFlagsFinal打印参数值</h3><p>当你在网上兴冲冲找到一个可优化的参数时，先用-XX: +PrintFlagsFinal看看，它可能已经默认打开了，再找到一个，还是默认打开了…</p><p>JDK7与JDK8，甚至JDK7中的不同版本，有些参数值都不一样，所以不要轻信网上任何文章，一切以生产环境同版本的JDK打出来的为准。</p><p>经常以类似下面的语句去查看参数，偷懒不起应用，用-version代替。有些参数设置后会影响其他参数，所以查看时也把它带上。</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">  java -server -Xmx1024m -Xms1024m -XX:+UseConcMarkSweepGC -XX:+PrintFlagsFinal -version| grep ParallelGCThread</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><p> <img src="https://ww4.sinaimg.cn/large/006tNc79gw1fblkzb6tzoj30z2080tao.jpg" alt=""></p><h3 id="前言3，关于默认值"><a href="#前言3，关于默认值" class="headerlink" title="前言3，关于默认值"></a>前言3，关于默认值</h3><p>JDK8会默认打开-XX:+TieredCompilation多层编译，而JDK7则不会。JDK7u40以后的版本会默认打开-XX:+OptimizeStringConcat优化字符串拼接，而之前的则不打开。</p><p>对于这些参数，我的建议是<strong>顺势而为，JDK在那个版本默认打开不打开总有它的理由。安全第一，没有很好的因由，不要随便因为网上某篇文章的推荐(包括你现在在读的这篇)就去设置。</strong></p><h3 id="1-性能篇"><a href="#1-性能篇" class="headerlink" title="1. 性能篇"></a>1. 性能篇</h3><p>先写一些不那么常见的，后面再来老生常谈。</p><h4 id="1-1-取消偏向锁-XX-UseBiasedLocking"><a href="#1-1-取消偏向锁-XX-UseBiasedLocking" class="headerlink" title="1.1 取消偏向锁 -XX:-UseBiasedLocking"></a>1.1 取消偏向锁 -XX:-UseBiasedLocking</h4><p>JDK1.6开始默认打开的偏向锁，会尝试把锁赋给第一个访问它的线程，取消同步块上的synchronized原语。如果始终只有一条线程在访问它，就成功略过同步操作以获得性能提升。</p><p>但一旦有第二条线程访问这把锁，JVM就要撤销偏向锁恢复到未锁定线程的状态，详见 <a href="http://calvin1978.blogcn.com/articles/safepoint.html" target="_blank" rel="external">JVM的Stop The World，安全点，黑暗的地底世界</a>， 可以看到不少RevokeBiasd的纪录，像GC一样，会Stop The World的干活，虽然只是很短很短的停顿，但对于多线程并发的应用，取消掉它反而有性能的提升和延时的极微的缩短，所以Cassandra就取消了它。</p><h4 id="1-2-提高数字缓存-XX-AutoBoxCacheMax-20000"><a href="#1-2-提高数字缓存-XX-AutoBoxCacheMax-20000" class="headerlink" title="1.2 提高数字缓存 -XX:AutoBoxCacheMax=20000"></a>1.2 提高数字缓存 -XX:AutoBoxCacheMax=20000</h4><p><code>Integer i = 3;</code>这语句有着 int自动装箱成Integer的过程，JDK默认只缓存 -128 ~ +127的int 和 long，超出范围的数字就要即时构建新的Integer对象。设为20000后，我们应用的QPS从48,000提升到50,000，足足4%的影响。详见<a href="http://blog.csdn.net/chengzhezhijian/article/details/9628251" target="_blank" rel="external">Java Integer(-128~127)值的==和equals比较产生的思考</a></p><h4 id="1-3-启动时访问并置零内存页面-XX-AlwaysPreTouch"><a href="#1-3-启动时访问并置零内存页面-XX-AlwaysPreTouch" class="headerlink" title="1.3 启动时访问并置零内存页面-XX:+AlwaysPreTouch"></a>1.3 启动时访问并置零内存页面-XX:+AlwaysPreTouch</h4><p>启动时就把参数里说好了的内存全部touch一遍，可能启动时慢上一点，但后面访问时会更流畅，比如页面会连续分配，比如不会在晋升新生代到老生代时才去访问页面使得GC停顿时间加长。不过这选项对大堆才会更有感觉一点。</p><h4 id="1-4-禁止JVM写statistics数据-XX-PerfDisableSharedMem"><a href="#1-4-禁止JVM写statistics数据-XX-PerfDisableSharedMem" class="headerlink" title="1.4 禁止JVM写statistics数据 -XX:+PerfDisableSharedMem"></a>1.4 禁止JVM写statistics数据 -XX:+PerfDisableSharedMem</h4><p>Cassandra家的一个参数，一直没留意，直到发生高IO时的JVM停顿。原来JVM经常会默默的在/tmp/hperf 目录写上一点statistics数据，如果刚好遇到PageCache刷盘，把文件阻塞了，就不能结束这个Stop the World的安全点了。用此参数可以禁止JVM写statistics数据，代价是jps, jstat 用不了，只能用JMX取数据。有时用JMX取新生代老生代使用百分比还真没jstat方便。详见<a href="http://www.evanjones.ca/jvm-mmap-pause.html" target="_blank" rel="external">The Four Month Bug: JVM statistics cause garbage collection pauses</a></p><h4 id="1-5-Djava-security-egd-file-dev-urandom"><a href="#1-5-Djava-security-egd-file-dev-urandom" class="headerlink" title="1.5 -Djava.security.egd=file:/dev/./urandom"></a>1.5 -Djava.security.egd=file:/dev/./urandom</h4><p>此江湖偏方原用于Tomcat显式使用SHA1PRNG算法时，初始因子从/dev/random读取导致堵塞。而使用此设置后，额外效果是默认的SecureRandom算法也变成SHA1了。 SHA1PRNG 比 NativePRNG消耗小一半，synchronized的代码少一半，所以没特殊安全要求的话建议用SHA1。详见 <a href="http://calvin1978.blogcn.com/articles/securerandom.html" target="_blank" rel="external">SecureRandom的江湖偏方与真实效果</a></p><h4 id="1-6-不建议的参数"><a href="#1-6-不建议的参数" class="headerlink" title="1.6 不建议的参数"></a>1.6 不建议的参数</h4><ol><li><strong>-XX:+AggressiveOpts</strong>是一些还没默认打开的优化参数集合, -XX:AutoBoxCacheMax是其中的一项。但如前所述，关键系统里不建议打开。虽然通过-XX:+AggressiveOpts 与 -XX:-AggressiveOpts 的对比，目前才改变了三个参数，但为免以后某个版本的JDK里默默改变更多激进的配置，还是不要了。</li></ol><ol><li>Linkined那种黑科技，先要解锁VMOptions才能配置的就更不用说了，比如</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> -XX:+UnlockDiagnosticVMOptions -XX: ParGCCardsPerStrideChunk=32768</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><ol><li>JIT Compile相关的参数，函数调用多少次之后开始编译的阀值，内联函数大小的阀值等等，没有经过严格的性能测试，尽量不去改动这里，JIT和javac的编译环节是官方经过长期实验才确定下来的。</li><li><strong>-XX:+UseFastAccessorMethods</strong>，JDK6的优化，据说在多层编译下还慢了，所以是默认关闭的。</li><li><strong>-server</strong>，在64位linux中，你想设成-client都不行的，所以写了也是白写。</li></ol><h4 id="1-7-可选参数"><a href="#1-7-可选参数" class="headerlink" title="1.7 可选参数"></a>1.7 可选参数</h4><ol><li><strong>-Djava.awt.headless=true</strong>，如果服务器上没有屏幕，键盘，鼠标，又需要用到它们的时候，详见<a href="http://www.oschina.net/translate/using-headless-mode-in-java-se" target="_blank" rel="external">在 Java SE 平台上使用 Headless 模式</a></li><li><strong>-XX:-UseCounterDecay</strong>，禁止JIT调用计数器衰减。默认情况下，每次GC时会对调用计数器进行砍半的操作，导致有些方法一直是个温热，可能永远都达不到C2编译的1万次的阀值。</li><li><strong>-XX:-TieredCompilation</strong>，禁止JDK8默认的多层编译，在某些情况下因为有些方法C1编译后C2不再编译，多层编译反而比C2编译慢，如果发现此情况可进行禁止。</li></ol><h3 id="2-GC篇"><a href="#2-GC篇" class="headerlink" title="2. GC篇"></a>2. GC篇</h3><h4 id="2-1-GC策略"><a href="#2-1-GC策略" class="headerlink" title="2.1 GC策略"></a>2.1 GC策略</h4><p>为了稳健，还是8G以下的堆还是CMS好了，G1的细节实现起来难度太大，从理论提出到现在都做了六七年了。</p><p>CMS真正可设的东西也不多，详见<a href="http://ifeve.com/useful-jvm-flags-part-7-cms-collector/" target="_blank" rel="external">JVM实用参数（七）CMS收集器</a></p><p> 1.基本配置</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><p>因为我们的监控系统会通过JMX监控内存达到90%的状况（留点处理的时间），所以设置让它75%就开始跑了，早点开始也能避免Full GC等意外情况(概念重申，这种主动的CMS GC，和JVM的老生代、永久代、堆外内存完全不能分配内存了而强制Full GC是不同的概念)。为了让这个设置生效，还要设置-XX:+UseCMSInitiatingOccupancyOnly，否则75只被用来做开始的参考值，后面还是JVM自己算。</p><ol><li><strong>-XX:MaxTenuringThreshold=2</strong>，这是GC里改动效果最明显的一个参数了。对象在Survivor区熬过多少次Young GC后晋升到年老代，JDK7里看起来默认是6，跑起来好像变成了15。</li></ol><p>Young GC是最大的应用停顿来源，而新生代里GC后存活对象的多少又直接影响停顿的时间，所以如果清楚Young GC的执行频率和应用里大部分临时对象的最长生命周期，可以把它设的更短一点，让其实不是临时对象的新生代长期对象赶紧晋升到年老代，别呆着。</p><p>用-XX:+PrintTenuringDistribution观察下，如果后面几代都差不多，就可以设小，比如JMeter里是2。</p><ol><li><strong>-XX:+ExplicitGCInvokesConcurrent</strong>， 但不要<strong>-XX:+DisableExplicitGC</strong>， 比如<a href="http://calvin1978.blogcn.com/articles/directbytebuffer.html" target="_blank" rel="external">Netty之堆外内存扫盲篇</a>，可见禁了system.gc() 未必是好事，只要自己的代码里没有调它，也没用什么特别烂的类库，真有人调了总有调的原因。-XX+ExplicitGCInvokesConcurrent 则在full gc时，并不全程停顿，依然只在ygc和两个remark阶段停顿，详见<a href="http://lovestblog.cn/blog/2015/05/07/system-gc/" target="_blank" rel="external">JVM源码分析之SystemGC完全解读</a></li><li><strong>-XX: ParallelRefProcEnabled</strong> , 默认为false，并行的处理Reference对象，如WeakReference，除非在GC log里出现Reference处理时间较长的日志，否则效果不会很明显，但我们总是要JVM尽量的并行，所以设了也就设了。</li></ol><h4 id="2-2-GC里不建议修改的参数"><a href="#2-2-GC里不建议修改的参数" class="headerlink" title="2.2 GC里不建议修改的参数"></a>2.2 GC里不建议修改的参数</h4><ol><li><strong>-XX:+CMSClassUnloadingEnabled</strong>，在CMS中清理永久代中的过期的Class而不等到Full GC，JDK7默认关闭而JDK8打开。看自己情况，比如有没有运行动态语言脚本如Groovy产生大量的临时类。它会增加CMS remark的暂停时间，所以如果新类加载并不频繁，这个参数还是不开的好。</li><li>用了CMS，新生代收集默认就是<strong>-XX:+UseParNewGC</strong>，不用自己设。</li><li>并发收集线程数</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> ParallelGCThreads＝8+( Processor - 8 ) ( 5/8 )，</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> ConcGCThreads = (ParallelGCThreads + 3)/4</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><p>比如双CPU，六核，超线程就是24个处理器，小于8个处理器时ParallelGCThreads按处理器数量，大于时按上述公式ParallelGCThreads＝18， ConcGCThreads＝5。除了一些不在乎停顿时间的后台辅助程序会特意把它减少，平时不建议动。</p><ol><li><p><strong>-XX:+CMSScavengeBeforeRemark</strong>，默认为关闭，在CMS remark前，先执行一次minor GC将新生代清掉，这样从老生代的对象引用到的新生代对象的个数就少了，停止全世界的CMS remark阶段就短一些。如果看到GC日志里remark阶段的时间超长，可以打开此项看看有没有效果，否则还是不要打开了，白白多了次YGC。</p></li><li><p><strong>-XX:CMSFullGCsBeforeCompaction</strong>，默认为0，即每次full gc都对老生代进行碎片整理压缩。<strong>Full GC 不同于前面设置的75%老生代时触发的CMS GC，只在System.gc()，老生代达到100%，老生代碎片过大无法分配空间给新晋升的大对象这些特殊情况里发生，所以设为每次都进行碎片整理是合适的</strong>。</p><p>CMS并发GC不是“full GC”。HotSpot VM里对concurrent collection和full collection有明确的区分。所有带有“FullCollection”字样的VM参数都是跟真正的full GC相关，而跟CMS并发GC无关的。 </p><p>CMSFullGCsBeforeCompaction这个参数在HotSpot VM里是这样声明的： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">product(<span class="keyword">bool</span>, UseCMSCompactAtFullCollection, <span class="literal">true</span>,                     </div><div class="line"></div><div class="line"><span class="string">"Use mark sweep compact at full collections"</span>)                  </div><div class="line"></div><div class="line">product(uintx, CMSFullGCsBeforeCompaction, <span class="number">0</span>,                          </div><div class="line"></div><div class="line">        <span class="string">"Number of CMS full collection done before compaction if &gt; 0"</span>)</div></pre></td></tr></table></figure><p>然后这样使用的： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*should_compact =  </div><div class="line">   UseCMSCompactAtFullCollection &amp;&amp;  </div><div class="line">   ((_full_gcs_since_conc_gc &gt;= CMSFullGCsBeforeCompaction) ||  </div><div class="line">    GCCause::is_user_requested_gc(gch-&gt;gc_cause()) ||  </div><div class="line">    gch-&gt;incremental_collection_will_fail(<span class="literal">true</span> <span class="comment">/* consult_young */</span>));</div></pre></td></tr></table></figure><p>CMS GC要决定是否在full GC时做压缩，会依赖几个条件。其中， </p><p>第一种条件，UseCMSCompactAtFullCollection 与 CMSFullGCsBeforeCompaction 是搭配使用的；前者目前默认就是true了，也就是关键在后者上。 </p><p>第二种条件是用户调用了System.gc()，而且DisableExplicitGC没有开启。 </p><p>第三种条件是young gen报告接下来如果做增量收集会失败；简单来说也就是young gen预计old gen没有足够空间来容纳下次young GC晋升的对象。 </p><p>上述三种条件的任意一种成立都会让CMS决定这次做full GC时要做压缩。 </p><p>（还有另一个参数，CMSCompactWhenClearAllSoftRefs，这个就先不说了，反正你没有配置它，而且默认也是true） </p><p>CMSFullGCsBeforeCompaction 说的是，在上一次CMS并发GC执行过后，到底还要再执行多少次full GC才会做压缩。默认是0，也就是在默认配置下每次CMS GC顶不住了而要转入full GC的时候都会做压缩。 </p><p><strong>把CMSFullGCsBeforeCompaction配置为10，就会让上面说的第一个条件变成每隔10次真正的full GC才做一次压缩（而不是每10次CMS并发GC就做一次压缩，目前VM里没有这样的参数）。这会使full GC更少做压缩，也就更容易使CMS的old gen受碎片化问题的困扰。</strong> </p><p><strong>本来这个参数就是用来配置降低full GC压缩的频率，以期减少某些full GC的暂停时间。CMS回退到full GC时用的算法是mark-sweep-compact，但compaction是可选的，不做的话碎片化会严重些但这次full GC的暂停时间会短些；这是个取舍。</strong></p><p>​</p></li></ol><h4 id="2-3-内存大小的设置"><a href="#2-3-内存大小的设置" class="headerlink" title="2.3 内存大小的设置"></a>2.3 内存大小的设置</h4><p>这些关于大小的参数，给人感觉是最踏实可控的。</p><p>其实JVM除了显式设置的-Xmx堆内存，还有一堆其他占内存的地方(堆外内存，线程栈，永久代，二进制代码cache)，在容量规划的时候要留意。</p><p>关键业务系统的服务器上内存一般都是够的，所以尽管设得宽松点。</p><ol><li><strong>-Xmx, -Xms</strong>, 堆内存大小，2～4G均可，再大了注意GC时间。</li><li><strong>-Xmn or -XX:NewSize and -XX:MaxNewSize or -XX:NewRatio</strong>， JDK默认新生代占堆大小的1/3， 个人喜欢把对半分， 增大新生代的大小，能减少GC的频率（但也会加大每次GC的停顿时间），主要是看老生代里没多少长期对象的话，占2/3太多了。可以用-Xmn 直接赋值(等于-XX:NewSize and -XX:MaxNewSize同值的缩写)，或把NewRatio设为1来对半分(但如果想设置新生代比老生代大就只能用-Xmn)。</li><li><strong>-XX: PermSize=128m -XX:MaxPermSize=512m （JDK7）</strong>现在的应用有Hibernate/Spring这些闹腾的家伙AOP之后类都比较多，可以一开始就把初始值从64M设到128M，并设一个更大的Max值以求保险，之前就遇到反射的类过多把永久代撑爆的案例，不过这时候业务也应该考虑拆分了，过多的代码集中在同个项目中，长期看来不易于维护。</li><li><strong>-XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m（JDK8）</strong>，JDK8的永生代几乎可用完机器的所有内存(可怕😱)，同样设一个128M的初始值，512M的最大值保护一下。</li></ol><h4 id="2-4-其他内存大小等可选设置"><a href="#2-4-其他内存大小等可选设置" class="headerlink" title="2.4 其他内存大小等可选设置"></a>2.4 其他内存大小等可选设置</h4><ol><li><strong>-XX:SurvivorRatio</strong> 新生代中每个存活区的大小，默认为8，即1/10的新生代 1/(SurvivorRatio+2)，有人喜欢设小点省点给新生代，但要避免太小使得存活区放不下临时对象而要晋升到老生代，还是从GC Log里看实际情况了。</li></ol><ol><li><strong>-Xss</strong> 在堆之外，线程占用栈内存，默认每条线程为1M（以前是256K）。存放方法调用出参入参的栈，局部变量，标量替换后掉局部变量等，有人喜欢设小点节约内存开更多线程。但反正内存够也就不必要设小，有人喜欢再设大点，特别是有JSON解析之类的递归调用时不能设太小。</li><li><strong>-XX:MaxDirectMemorySize</strong>，堆外内存/直接内存的大小，默认为Heap区总内存减去一个Survivor区的大小，详见<a href="http://calvin1978.blogcn.com/articles/directbytebuffer.html" target="_blank" rel="external">Netty之堆外内存扫盲篇</a>。</li><li><strong>-XX:ReservedCodeCacheSize</strong>， JIT编译后二进制代码的存放区，满了之后就不再编译。JDK7默认不开多层编译48M，开了96M，而JDK8默认开多层编译240M。可以在JMX里看看CodeCache的大小，JDK7下的48M一般够了，也可以把它设大点，反正内存多。</li></ol><h4 id="2-5-GC日志"><a href="#2-5-GC日志" class="headerlink" title="2.5 GC日志"></a>2.5 GC日志</h4><p> 1.基本配置</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">  -Xloggc:/dev/shm/gc.log -XX:+PrintGCDateStamps -XX:+PrintGCDetails</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>一般的，上面的就足够了，我们生产环境一个离线服务的配置是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationConcurrentTime -XX:+PrintHeapAtGC -Xloggc:/dev/shm/xx_gclog.txt</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><p>详见<a href="http://ifeve.com/useful-jvm-flags-part-8-gc-logging/" target="_blank" rel="external">JVM实用参数（八）GC日志</a>，有人担心写GC日志会影响性能，但测试下来实在没什么影响，还是留一份用来排查好。</p><p>到后来，又发现如果遇上高IO的情况，如果GC的时候，操作系统正在flush pageCache 到磁盘，也可能导致GC log文件被锁住，从而让GC结束不了。所以把它指向了/dev/shm 这种内存中文件系统，避免这种停顿，详见<a href="http://calvin1978.blogcn.com/articles/%E2%80%9Chttp://engineering.linkedin.com/blog/2016/02/eliminating-large-jvm-gc-pauses-caused-by-background-io-traffic%E2%80%9D" target="_blank" rel="external">Eliminating Large JVM GC Pauses Caused by Background IO Traffic</a></p><p>用+PrintGCDateStamps而不是PrintGCTimeStamps，打印可读的日期而不是时间戳。</p><ol><li><strong>-XX:+PrintGCApplicationStoppedTime</strong>，它的名字没起好，它除了打印清晰的GC停顿时间外，还可以打印其他的停顿时间，比如取消偏向锁，class 被agent redefine，code deoptimization等等，有助于发现一些原来没想到的问题，建议也加上。如果真的发现了一些不知什么的停顿，再临时加上<code>&quot;-XX:+PrintSafepointStatistics -XX: PrintSafepointStatisticsCount=1&quot;</code> 找原因。</li><li>GC日志默认会在重启后清空，但有人担心长期运行不重启的应用会把文件弄得很大，有<figure class="highlight plain"><figcaption><span>-XX:NumberOfGCLogFiles</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">### 3. 监控篇</div><div class="line"></div><div class="line">JVM输出的各种日志，如果未指定路径，通常会生成到运行应用的相同目录，为了避免有时候在不同的地方执行启动脚本，一般将日志路径集中设到一个固定的地方。</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">#### 3.1 -XX:+PrintCommandLineFlags</div><div class="line"></div><div class="line">运维有时会对启动参数做一些临时的更改，将每次启动的参数输出到stdout，将来有据可查。</div><div class="line">打印出来的是命令行里设置了的参数以及因为这些参数隐式影响的参数，比如开了CMS后，-XX:+UseParNewGC也被自动打开。</div><div class="line"></div><div class="line">#### 3.2 -XX:-OmitStackTraceInFastThrow</div><div class="line"></div><div class="line">为异常设置StackTrace是个昂贵的操作，所以当应用在相同地方抛出相同的异常N次(两万?)之后，JVM会对某些特定异常如NPE，数组越界等进行优化，不再带上异常栈。此时，你可能会看到日志里一条条Nul Point Exception，而真正输出完整栈的日志早被滚动到不知哪里去了，也就完全不知道这NPE发生在什么地方，欲哭无泪。 所以，将它禁止吧。</div><div class="line"></div><div class="line">#### 3.3 coredump与 -XX:ErrorFile</div><div class="line"></div><div class="line">JVM crash时，hotspot 会生成一个error文件，提供JVM状态信息的细节。如前所述，将其输出到固定目录，避免到时会到处找这文件。文件名中的%p会被自动替换为应用的PID</div><div class="line"></div><div class="line">&gt; ```shell</div><div class="line">&gt;  -XX:ErrorFile=$&#123;MYLOGDIR&#125;/hs_err_%p.log</div><div class="line">&gt;</div></pre></td></tr></table></figure></li></ol><p>&gt;</p><blockquote></blockquote><p>当然，更好的做法是生成coredump，从CoreDump能够转出Heap Dump 和 Thread Dump 还有crash的地方，非常实用。</p><p>在启动脚本里加上 ulimit -c unlimited或其他的设置方式，如果有root权限，设一下输出目录更好</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">  <span class="built_in">echo</span> <span class="string">"/&#123;MYLOGDIR&#125;/coredump.%p"</span> &gt; /proc/sys/kernel/core_pattern</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><p>什么？你不知道这coredump有什么用？看来你是没遇过JVM Segment Fault的幸福人。</p><h4 id="3-4-XX-HeapDumpOnOutOfMemoryError"><a href="#3-4-XX-HeapDumpOnOutOfMemoryError" class="headerlink" title="3.4 -XX:+HeapDumpOnOutOfMemoryError"></a>3.4 -XX:+HeapDumpOnOutOfMemoryError</h4><p>在Out Of Memory，JVM快死快死掉的时候，输出Heap Dump到指定文件。不然开发很多时候还真不知道怎么重现错误。</p><p>路径只指向目录，JVM会保持文件名的唯一性，叫java_pid${pid}.hprof。如果指向文件，而文件已存在，反而不能写入。</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> -XX:+HeapDumpOnOutOfMemoryError </span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> -XX:HeapDumpPath=<span class="variable">$&#123;LOGDIR&#125;</span>/</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><h4 id="3-5-JMX"><a href="#3-5-JMX" class="headerlink" title="3.5 JMX"></a>3.5 JMX</h4><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">  -Dcom.sun.management.jmxremote.port=<span class="variable">$&#123;MY_JMX_PORT&#125;</span> -Dcom.sun.management.jmxremote </span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> -Dcom.sun.management.jmxremote.authenticate=<span class="literal">false</span> -Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span> </span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> -Djava.rmi.server.hostname=127.0.0.1</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><p>以上设置，只让本地的Zabbix之类监控软件通过JMX监控JVM，不允许远程访问。</p><h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h3><h4 id="4-1-性能相关"><a href="#4-1-性能相关" class="headerlink" title="4.1 性能相关"></a>4.1 性能相关</h4><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:-UseBiasedLocking </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:-UseCounterDecay </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:AutoBoxCacheMax=20000 </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+PerfDisableSharedMem </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+AlwaysPreTouch </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -Djava.security.egd=file:/dev/./urandom</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><h4 id="4-2-内存大小相关-JDK7"><a href="#4-2-内存大小相关-JDK7" class="headerlink" title="4.2 内存大小相关(JDK7)"></a>4.2 内存大小相关(JDK7)</h4><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">  -Xms4096m </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -Xmx4096m </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -Xmn2048m </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:MaxDirectMemorySize=4096m </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX: PermSize=256m </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:MaxPermSize=512m </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:ReservedCodeCacheSize=240M</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><h4 id="4-3-CMS-GC-相关"><a href="#4-3-CMS-GC-相关" class="headerlink" title="4.3 CMS GC 相关"></a>4.3 CMS GC 相关</h4><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+UseConcMarkSweepGC </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:CMSInitiatingOccupancyFraction=75 </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+UseCMSInitiatingOccupancyOnly </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:MaxTenuringThreshold=6 </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+ExplicitGCInvokesConcurrent </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+ParallelRefProcEnabled</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><h4 id="4-4-GC-日志-相关"><a href="#4-4-GC-日志-相关" class="headerlink" title="4.4 GC 日志 相关"></a>4.4 GC 日志 相关</h4><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">  -Xloggc:/dev/shm/app-gc.log </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+PrintGCApplicationStoppedTime </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+PrintGCDateStamps </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+PrintGCDetails</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><h4 id="4-5-异常-日志-相关"><a href="#4-5-异常-日志-相关" class="headerlink" title="4.5 异常 日志 相关"></a>4.5 异常 日志 相关</h4><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:-OmitStackTraceInFastThrow </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:ErrorFile=<span class="variable">$&#123;LOGDIR&#125;</span>/hs_err_%p.log </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:+HeapDumpOnOutOfMemoryError</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">  -XX:HeapDumpPath=<span class="variable">$&#123;LOGDIR&#125;</span>/</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><h4 id="4-6-JMX相关"><a href="#4-6-JMX相关" class="headerlink" title="4.6 JMX相关"></a>4.6 JMX相关</h4><p>见3.5</p><h3 id="最后，上图总结一把："><a href="#最后，上图总结一把：" class="headerlink" title="最后，上图总结一把："></a>最后，上图总结一把：</h3><p><img src="https://ww3.sinaimg.cn/large/006tNc79gw1fblo4zsqbdj317k1he1kx.jpg" alt=""></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="http://calvin1978.blogcn.com/articles/jvmoption-2.html" target="_blank" rel="external">JVM参数推荐</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言1，资料&quot;&gt;&lt;a href=&quot;#前言1，资料&quot; class=&quot;headerlink&quot; title=&quot;前言1，资料&quot;&gt;&lt;/a&gt;前言1，资料&lt;/h3&gt;&lt;p&gt;学习开源项目的启动脚本是个不错的主意，比如&lt;a href=&quot;http://github.com/apache
      
    
    </summary>
    
      <category term="jvm" scheme="http://chen-tao.github.io/categories/jvm/"/>
    
    
      <category term="java" scheme="http://chen-tao.github.io/tags/java/"/>
    
      <category term="jvm" scheme="http://chen-tao.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JIT编译器解读</title>
    <link href="http://chen-tao.github.io/2017/01/09/jit/"/>
    <id>http://chen-tao.github.io/2017/01/09/jit/</id>
    <published>2017-01-08T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么JIT"><a href="#为什么JIT" class="headerlink" title="为什么JIT"></a>为什么JIT</h2><p><strong>JIT 是 just in time 的缩写, 也就是即时编译编译器。</strong>使用即时编译器技术，能够加速程序的执行速度。</p><p>以Java/C#,NET为代表的Coffee Based 语言，是建立在虚拟机之上的。</p><p>这种虚拟机和一般其他语言的运行库有一个很大不同，就是它好像一个有独立体系结构的计算机。 </p><p>Java/C#,NET的程序要运行在这些虚拟机之上，就必须要编译成虚拟机独有的中间语言。Java叫字节码，C#,NET有很多种叫法，姑且简称CIL。这些中间语言身上有很深很深的汇编指令集样式语法痕迹，这也从 另一个侧面说明虚拟机的体系结构多么像一个冯诺依曼计算机。</p><p>虚拟机传统的解释器，就是要在中间语言，和真正的平台体系结构之间的指令做映射。比如把Java的load指令换成native code 的load指令。</p><p> <strong>JIT的出现，是为了补强虚拟机边运行边解释的低性能。它会智能地对热点代码进行优化且重复利用。从策略的角度来讲，就是通过查表或者缓存而不是重复解决子问题而大大缩短解决问题的时间。</strong></p><p><u><em>它的优点是，智能缩短映射的过程。</em></u></p><p><u><em>它的缺点是，过于复杂。</em></u></p><p>首先代码优化的种种策略都是基于各种各样的假定，假定不一定会成真，即使费尽心机做的代码优化，也有可能在现实中无法提高性能。其次，不同平台和体系结构的技术特点千差万别，这个映射过程只能单独定制。比如至今Java平台还不能在IOS上做基本映射（即解释器都不行）。</p><p>以前JIT刚出现的时候，只是一个挂载的外挂一样的东西。现在开始喧宾夺主取代了解释器。这种转变其实是对中间语言解释器作为一个“薄的胶合层”的一个设计上的自我否定，极大地增加了设计的复杂性。目前对于这种强行加速做得比较好的，就是Java系为代表的各种虚拟机，微软的虚拟机，或者谷歌搞出来的V8引擎（这不知道是不是目前为止设计进生产实践中惟一被广泛应用的动态强行加速）。这几件东西其实无一不是大型商业公司的强大支持的产物。现在主流的动态语言大多都是社区在推进，没那么多资源来投入JIT，这是他们没有好的JIT的一个关键因素。</p><p>本身动态语言的应用场景就不是为了追求高性能，更何况现在各种应用场景下的瓶颈大部分都在语言之外，语言的性能考量又是一个比较次要的需求了。但是JIT对于编译层的优化还是显而易见的，甚至可以说汇聚了很多生产环境中的经验，通过JIT的优化，服务的请求质量可以提升一个档次，对于业务帮助也很大，下面我们着重介绍一下java中的JIT与其实现。</p><h2 id="Java中的JIT"><a href="#Java中的JIT" class="headerlink" title="Java中的JIT"></a>Java中的JIT</h2><p><img src="https://ww3.sinaimg.cn/large/006y8lVagw1fbldh80l07j30fh0h576f.jpg" alt=""> </p><pre><code>Java程序最初是仅仅通过解释器解释执行的，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低。于是后来在虚拟机中引入了JIT编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是JIT编译器。现在主流的商用虚拟机（如Sun HotSpot、IBM J9）中几乎都同时包含解释器和编译器（三大商用虚拟机之一的JRockit是个例外，它内部没有解释器，因此会有启动相应时间长之类的缺点，但它主要是面向服务端的应用，这类应用一般不会重点关注启动时间）。二者各有优势：当程序需要迅速启动和执行时，解释器可以首先发挥作用，省去编译的时间，立即执行；当程序运行后，随着时间的推移，编译器逐渐会返回作用，把越来越多的代码编译成本地代码后，可以获取更高的执行效率。解释执行可以节约内存，而编译执行可以提升效率。HotSpot虚拟机中内置了两个JIT编译器：Client Complier和Server Complier，分别用在客户端和服务端，分别对应JVM的Client与Server模式，目前主流的HotSpot虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作。</code></pre><p>运行过程中会被即时编译器编译的“热点代码”有两类：</p><ul><li>被多次调用的方法。</li><li><p>被多次调用的循环体。</p><p>  两种情况，编译器都是以整个方法作为编译对象，这种编译也是虚拟机中标准的编译方式。要知道一段代码或方法是不是热点代码，是不是需要触发即时编译，需要进行Hot Spot Detection（热点探测）。目前主要的热点 判定方式有以下两种：</p></li><li><p>基于采样的热点探测：采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是“热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</p></li><li><p>基于计数器的热点探测：采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。</p><p>  在HotSpot虚拟机中使用的是第二种——基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器。</p><p>  方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。</p><p>  回边计数器用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为“回边”。</p><p>  在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阀值，当计数器的值超过了阀值，就会触发JIT编译。触发了JIT编译后，在默认设置下，执行引擎并不会同步等待编译请求完成，而是继续进入解释器按照解释方式执行字节码，直到提交的请求被编译器编译完成为止（编译工作在后台线程中进行）。当编译工作完成后，下一次调用该方法或代码时，就会使用已编译的版本。</p><p>  由于方法计数器触发即时编译的过程与回边计数器触发即时编译的过程类似，因此这里仅给出方法调用计数器触发即时编译的流程：</p></li></ul><p><img src="https://ww2.sinaimg.cn/large/006y8lVagw1fbldpe8c6vj30f50gut9l.jpg" alt=""></p><h2 id="jvm使用JIT"><a href="#jvm使用JIT" class="headerlink" title="jvm使用JIT"></a>jvm使用JIT</h2><p><strong>JIT是java性能在同等条件下课超越C系列语言的关键！</strong></p><p><img src="https://ww3.sinaimg.cn/large/006y8lVagw1fbldzegb7sj31380lmae5.jpg" alt=""></p><p><a href="https://wiki.openjdk.java.net/display/HotSpot/PerformanceTacticIndex" target="_blank" rel="external">JIT优化项一览(2009)</a></p><p><img src="https://ww1.sinaimg.cn/large/006y8lVagw1fbldzuain2j31360m40vp.jpg" alt=""></p><p><img src="https://ww3.sinaimg.cn/large/006y8lVagw1fble0dpvrwj31320m0q76.jpg" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.reverberate.org/2012/12/hello-jit-world-joy-of-simple-jits.html" target="_blank" rel="external">hello_JIT</a></p><p><a href="http://blog.csdn.net/ns_code/article/details/18009455" target="_blank" rel="external">javac与JIT编译</a></p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-just-in-time/" target="_blank" rel="external">深入浅出JIT</a></p><p><a href="http://calvin1978.blogcn.com/articles/javatuning.html" target="_blank" rel="external">java性能优化指南</a></p><p><a href="https://github.com/adoptopenjdk/jitwatch" target="_blank" rel="external">jitwatch github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么JIT&quot;&gt;&lt;a href=&quot;#为什么JIT&quot; class=&quot;headerlink&quot; title=&quot;为什么JIT&quot;&gt;&lt;/a&gt;为什么JIT&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;JIT 是 just in time 的缩写, 也就是即时编译编译器。&lt;/strong&gt;使用
      
    
    </summary>
    
      <category term="jvm" scheme="http://chen-tao.github.io/categories/jvm/"/>
    
    
      <category term="java" scheme="http://chen-tao.github.io/tags/java/"/>
    
      <category term="jvm" scheme="http://chen-tao.github.io/tags/jvm/"/>
    
      <category term="jit" scheme="http://chen-tao.github.io/tags/jit/"/>
    
  </entry>
  
  <entry>
    <title>java单例模式与指令重排</title>
    <link href="http://chen-tao.github.io/2016/12/30/about-java-singleton/"/>
    <id>http://chen-tao.github.io/2016/12/30/about-java-singleton/</id>
    <published>2016-12-29T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 今天看到之前某同学写的单例创建异步httoclient的代码，发现了一个双重校验线程安全的问题，这里顺带回顾一下单例，重点介绍一下单例的2种经典实现–基于volatile的双重校验 和 静态内部类</p></blockquote><h2 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h2><p>当被问到要实现一个单例模式时，很多人的第一反应是写出如下的代码，包括教科书上也是这样教我们的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">         instance = <span class="keyword">new</span> Singleton();</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码简单明了，而且使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p><h2 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h2><p>为了解决上面的问题，最简单的方法是将整个 getInstance() 方法设为同步（synchronized）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">        instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。这就引出了双重检验锁。</p><h2 id="双重检验锁-重点"><a href="#双重检验锁-重点" class="headerlink" title="双重检验锁(重点)"></a>双重检验锁(重点)</h2><p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 <code>instance == null</code>，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         <span class="comment">//Single Checked</span></div><div class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                 <span class="comment">//Double Checked</span></div><div class="line">                instance = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码看起来很完美，很可惜，它是有问题。主要在于<code>instance = new Singleton()</code>这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p><ol><li>给 instance 分配内存</li><li>调用 Singleton 的构造函数来初始化成员变量</li><li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）</li></ol><p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p><p>我们只需要将 instance 变量声明成 volatile 就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance; <span class="comment">//声明成 volatile</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         </div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;       </div><div class="line">                    instance = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p><p>但是特别注意在 jdk 1.5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 jdk 1.5 (JSR-133)中才得以修复，这时候jdk对volatile增强了语义，对volatile对象都会加入读写的内存屏障，以此来保证『可见性』，这时候2-3就变成了代码序而不会被CPU重排，所以在这之后才可以放心使用 volatile。</p><h2 id="饿汉式-static-final-field-正常的初始化"><a href="#饿汉式-static-final-field-正常的初始化" class="headerlink" title="饿汉式 static final field(正常的初始化)"></a>饿汉式 static final field(正常的初始化)</h2><p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="comment">//类加载时就初始化</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p><h2 id="静态内部类-static-nested-class-重点"><a href="#静态内部类-static-nested-class-重点" class="headerlink" title="静态内部类 static nested class(重点)"></a>静态内部类 static nested class(重点)</h2><p>我比较倾向于使用静态内部类的方法，这种方法也是《Effective Java》上所推荐的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE; </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p><h2 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h2><p>用枚举写单例实在太简单了！这也是它最大的优点。下面这段代码就是声明枚举实例的通常做法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EasySingleton&#123;</div><div class="line">    INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking。</p><p>传统单例存在的另外一个问题是<strong>一旦你实现了序列化接口，可以反序列化创建该实例，那么它们不再保持单例了</strong>，因为readObject()方法一直返回一个新的对象就像java的构造方法一样，你可以通过使用readResolve()方法来避免此事发生，看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> Single.INSTANCE.getInstance();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样甚至还可以更复杂，如果你的单例类维持了其他对象的状态的话，因此你需要使他们成为transient的对象。但是枚举单例，JVM对序列化有保证，为了保证枚举类型像Java规范中所说的那样，每一个枚举类型极其定义的枚举变量在JVM中都是唯一的，在枚举类型的序列化和反序列化上，Java做了特殊的规定。我们可以查看枚举源码来说明这个问题， 所有的Java枚举类型都继承自该抽象类。我们用关键字enum来声明枚举类型，不可以通过显式继承该抽象类的方式来声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;  </div><div class="line">    <span class="comment">// 当前枚举常量名称  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ordinal;  </div><div class="line">    <span class="comment">// 当前枚举常量次序，从0开始  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> ordinal;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 专有构造器，我们无法调用。该构造方法用于由响应枚举类型声明的编译器发出的代码。   </span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Enum</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span> </span>&#123;  </div><div class="line">    <span class="keyword">this</span>.name = name;  </div><div class="line">    <span class="keyword">this</span>.ordinal = ordinal;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 返回枚举常量的名称，默认是返回name值。可以重写该方法，输出更加友好的描述。  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 比较当前枚举常量是否和指定的对象相等。因为枚举常量是单例的，所以直接调用==操作符。子类不可以重写该方法。 </span></div><div class="line">    <span class="comment">//由于子类是不能重写这个方法   保证枚举本身就是单例  线程安全</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;   </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>==other;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 返回该枚举常量的哈希码。和equals一致，该方法不可以被重写。  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 因为枚举常量是单例的，所以不允许克隆。  </span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;  </div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CloneNotSupportedException();  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 比较该枚举常量和指定对象的大小。它们的类型要相同，根据它们在枚举声明中的先后顺序来返回大小（前面的小，后面的大）。子类不可以重写该方法  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> </span>&#123;  </div><div class="line">    Enum other = (Enum)o;  </div><div class="line">    Enum self = <span class="keyword">this</span>;  </div><div class="line">    <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization  </span></div><div class="line">            self.getDeclaringClass() != other.getDeclaringClass())  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();  </div><div class="line">    <span class="keyword">return</span> self.ordinal - other.ordinal;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 得到枚举常量所属枚举类型的Class对象  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class&lt;E&gt; <span class="title">getDeclaringClass</span><span class="params">()</span> </span>&#123;  </div><div class="line">    Class clazz = getClass();  </div><div class="line">    Class zuper = clazz.getSuperclass();  </div><div class="line">    <span class="keyword">return</span> (zuper == Enum.class) ? clazz : zuper;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 返回带指定名称的指定枚举类型的枚举常量。名称必须与在此类型中声明枚举常量所用的标识符完全匹配。不允许使用额外的空白字符。  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class="function">T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; enumType, String name)</span> </span>&#123;  </div><div class="line">        T result = enumType.enumConstantDirectory().get(name);  </div><div class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>)  </div><div class="line">            <span class="keyword">return</span> result;  </div><div class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>)  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Name is null"</span>);  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(  </div><div class="line">            <span class="string">"No enum const "</span> + enumType +<span class="string">"."</span> + name);  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 不允许反序列化枚举对象  从这里我们可以看出枚举在反序列化创建对象的时候也能保证实例是单例的 </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException,  </span></div><div class="line"><span class="function">        ClassNotFoundException </span>&#123;  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"can't deserialize enum"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 不允许反序列化枚举对象  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObjectNoData</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"can't deserialize enum"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 枚举类不可以有finalize方法，子类不可以重写该方法  保证实例的对象唯一</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> </span>&#123; &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。上述所说都是线程安全的实现，文章开头给出的第一种方法不算正确的写法。</p><p>这里要特别注意的是，双重检验锁的方法，需要在instance上加volatile，这样才能保证线程安全。</p><p>这里的建议是：</p><h4 id="条件允许-JDK5-，这个条件很容易满足了-，使用单例是最好的方法。"><a href="#条件允许-JDK5-，这个条件很容易满足了-，使用单例是最好的方法。" class="headerlink" title="条件允许(JDK5+，这个条件很容易满足了)，使用单例是最好的方法。"></a>条件允许(JDK5+，这个条件很容易满足了)，使用单例是最好的方法。</h4><h4 id="其他正常情况下，最好的方法是使用静态内部类或者饿汉式，毕竟对于大多数业务场景，正常的初始化要优于延迟初始化，内部类方式可以写的很『优秀』，而对于新手来说，饿汉式很简单且不易出错；如果需要对实例字段进行线程安全的延迟初始化，则可以用基于volatile的延迟方案；如果需要对静态字段进行线程安全的延迟初始化，则依然使用静态内部类的初始化方法。"><a href="#其他正常情况下，最好的方法是使用静态内部类或者饿汉式，毕竟对于大多数业务场景，正常的初始化要优于延迟初始化，内部类方式可以写的很『优秀』，而对于新手来说，饿汉式很简单且不易出错；如果需要对实例字段进行线程安全的延迟初始化，则可以用基于volatile的延迟方案；如果需要对静态字段进行线程安全的延迟初始化，则依然使用静态内部类的初始化方法。" class="headerlink" title="其他正常情况下，最好的方法是使用静态内部类或者饿汉式，毕竟对于大多数业务场景，正常的初始化要优于延迟初始化，内部类方式可以写的很『优秀』，而对于新手来说，饿汉式很简单且不易出错；如果需要对实例字段进行线程安全的延迟初始化，则可以用基于volatile的延迟方案；如果需要对静态字段进行线程安全的延迟初始化，则依然使用静态内部类的初始化方法。"></a>其他正常情况下，最好的方法是使用静态内部类或者饿汉式，毕竟对于大多数业务场景，正常的初始化要优于延迟初始化，内部类方式可以写的很『优秀』，而对于新手来说，饿汉式很简单且不易出错；如果需要对实例字段进行线程安全的延迟初始化，则可以用基于volatile的延迟方案；如果需要对静态字段进行线程安全的延迟初始化，则依然使用静态内部类的初始化方法。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 今天看到之前某同学写的单例创建异步httoclient的代码，发现了一个双重校验线程安全的问题，这里顺带回顾一下单例，重点介绍一下单例的2种经典实现–基于volatile的双重校验 和 静态内部类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id
      
    
    </summary>
    
    
      <category term="java" scheme="http://chen-tao.github.io/tags/java/"/>
    
      <category term="jvm" scheme="http://chen-tao.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>vim奇技淫巧--向大师冲刺</title>
    <link href="http://chen-tao.github.io/2016/12/23/best-tips-of-vim/"/>
    <id>http://chen-tao.github.io/2016/12/23/best-tips-of-vim/</id>
    <published>2016-12-22T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> FROM: <a href="http://rayninfo.co.uk/vimtips.html" target="_blank" rel="external">vimtips</a> 有空翻译一下~</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div><div class="line">1011</div><div class="line">1012</div><div class="line">1013</div><div class="line">1014</div><div class="line">1015</div><div class="line">1016</div><div class="line">1017</div><div class="line">1018</div><div class="line">1019</div><div class="line">1020</div><div class="line">1021</div><div class="line">1022</div><div class="line">1023</div><div class="line">1024</div><div class="line">1025</div><div class="line">1026</div><div class="line">1027</div><div class="line">1028</div><div class="line">1029</div><div class="line">1030</div><div class="line">1031</div><div class="line">1032</div><div class="line">1033</div><div class="line">1034</div><div class="line">1035</div><div class="line">1036</div><div class="line">1037</div><div class="line">1038</div></pre></td><td class="code"><pre><div class="line">__BEGIN__</div><div class="line">*vimtips.txt*For Vim version 7.3.  </div><div class="line">------------------------------------------------------------------------------</div><div class="line">" new items marked [N] , corrected items marked [C]</div><div class="line">" *best-searching*</div><div class="line">/joe/e                      : cursor set to End of match</div><div class="line">3/joe/e+1                   : find 3rd joe cursor set to End of match plus 1 [C]</div><div class="line">/joe/s-2                    : cursor set to Start of match minus 2</div><div class="line">/joe/+3                     : find joe move cursor 3 lines down</div><div class="line">/^joe.*fred.*bill/          : find joe AND fred AND Bill (Joe at start of line)</div><div class="line">/^[A-J]/                    : search for lines beginning with one or more A-J</div><div class="line">/begin\_.*end               : search over possible multiple lines</div><div class="line">/fred\_s*joe/               : any whitespace including newline [C]</div><div class="line">/fred\|joe                  : Search for FRED OR JOE</div><div class="line">/.*fred\&amp;.*joe              : Search for FRED AND JOE in any ORDER!</div><div class="line">/\&lt;fred\&gt;/                  : search for fred but not alfred or frederick [C]</div><div class="line">/\&lt;\d\d\d\d\&gt;               : Search for exactly 4 digit numbers</div><div class="line">/\D\d\d\d\d\D               : Search for exactly 4 digit numbers</div><div class="line">/\&lt;\d\&#123;4&#125;\&gt;                 : same thing</div><div class="line">/\([^0-9]\|^\)%.*%          : Search for absence of a digit or beginning of line</div><div class="line">" finding empty lines</div><div class="line">/^\n\&#123;3&#125;                    : find 3 empty lines</div><div class="line">/^str.*\nstr                : find 2 successive lines starting with str</div><div class="line">/\(^str.*\n\)\&#123;2&#125;           : find 2 successive lines starting with str</div><div class="line">" using rexexp memory in a search find fred.*joe.*joe.*fred *C*</div><div class="line">/\(fred\).*\(joe\).*\2.*\1</div><div class="line">" Repeating the Regexp (rather than what the Regexp finds)</div><div class="line">/^\([^,]*,\)\&#123;8&#125;</div><div class="line">" visual searching</div><div class="line">:vmap // y/&lt;C-R&gt;"&lt;CR&gt;       : search for visually highlighted text</div><div class="line">:vmap &lt;silent&gt; //    y/&lt;C-R&gt;=escape(@", '\\/.*$^~[]')&lt;CR&gt;&lt;CR&gt; : with spec chars</div><div class="line">" \zs and \ze regex delimiters :h /\zs</div><div class="line">/&lt;\zs[^&gt;]*\ze&gt;              : search for tag contents, ignoring chevrons</div><div class="line">" zero-width :h /\@=</div><div class="line">/&lt;\@&lt;=[^&gt;]*&gt;\@=             : search for tag contents, ignoring chevrons</div><div class="line">/&lt;\@&lt;=\_[^&gt;]*&gt;\@=           : search for tags across possible multiple lines</div><div class="line">" searching over multiple lines \_ means including newline</div><div class="line">/&lt;!--\_p\&#123;-&#125;--&gt;                   : search for multiple line comments</div><div class="line">/fred\_s*joe/                     : any whitespace including newline *C*</div><div class="line">/bugs\(\_.\)*bunny                : bugs followed by bunny anywhere in file</div><div class="line">:h \_                             : help</div><div class="line">" search for declaration of subroutine/function under cursor</div><div class="line">:nmap gx yiw/^\(sub\&lt;bar&gt;function\)\s\+&lt;C-R&gt;"&lt;CR&gt;</div><div class="line">" multiple file search</div><div class="line">:bufdo /searchstr/                : use :rewind to recommence search</div><div class="line">" multiple file search better but cheating</div><div class="line">:bufdo %s/searchstr/&amp;/gic   : say n and then a to stop</div><div class="line">" How to search for a URL without backslashing</div><div class="line">?http://www.vim.org/        : (first) search BACKWARDS!!! clever huh!</div><div class="line">" Specify what you are NOT searching for (vowels)</div><div class="line">/\c\v([^aeiou]&amp;\a)&#123;4&#125;       : search for 4 consecutive consonants</div><div class="line">/\%&gt;20l\%&lt;30lgoat           : Search for goat between lines 20 and 30 [N]</div><div class="line">/^.\&#123;-&#125;home.\&#123;-&#125;\zshome/e   : match only the 2nd occurence in a line of "home" [N]</div><div class="line">:%s/home.\&#123;-&#125;\zshome/alone  : Substitute only the 2nd occurrence of home in any line [U]</div><div class="line">" find str but not on lines containing tongue</div><div class="line">^\(.*tongue.*\)\@!.*nose.*$</div><div class="line">\v^((tongue)@!.)*nose((tongue)@!.)*$</div><div class="line">.*nose.*\&amp;^\%(\%(tongue\)\@!.\)*$ </div><div class="line">:v/tongue/s/nose/&amp;/gic</div><div class="line">'a,'bs/extrascost//gc       : trick: restrict search to between markers (answer n) [N]</div><div class="line">"----------------------------------------</div><div class="line">" *best-substitution*</div><div class="line">:%s/fred/joe/igc            : general substitute command</div><div class="line">:%s//joe/igc                : Substitute what you last searched for [N]</div><div class="line">:%s/~/sue/igc               : Substitute your last replacement string [N]</div><div class="line">:%s/\r//g                   : Delete DOS returns ^M</div><div class="line">" Is your Text File jumbled onto one line? use following</div><div class="line">:%s/\r/\r/g                 : Turn DOS returns ^M into real returns</div><div class="line">:%s=  *$==                  : delete end of line blanks</div><div class="line">:%s= \+$==                  : Same thing</div><div class="line">:%s#\s*\r\?$##              : Clean both trailing spaces AND DOS returns</div><div class="line">:%s#\s*\r*$##               : same thing</div><div class="line">" deleting empty lines</div><div class="line">:%s/^\n\&#123;3&#125;//               : delete blocks of 3 empty lines</div><div class="line">:%s/^\n\+/\r/               : compressing empty lines</div><div class="line">:%s#&lt;[^&gt;]\+&gt;##g             : delete html tags, leave text (non-greedy)</div><div class="line">:%s#&lt;\_.\&#123;-1,&#125;&gt;##g          : delete html tags possibly multi-line (non-greedy)</div><div class="line">:%s#.*\(\d\+hours\).*#\1#   : Delete all but memorised string (\1) [N]</div><div class="line">" parse xml/soap </div><div class="line"><span class="meta">%</span><span class="bash">s<span class="comment">#&gt;&lt;\([^/]\)#&gt;\r&lt;\1#g      : split jumbled up XML file into one tag per line [N]</span></span></div><div class="line"><span class="meta">%</span><span class="bash">s/&lt;/\r&amp;/g                  : simple split of html/xml/soap  [N]</span></div><div class="line">:%s#&lt;[^/]#\r&amp;#gic           : simple split of html/xml/soap  but not closing tag [N]</div><div class="line">:%s#&lt;[^/]#\r&amp;#gi            : parse on open xml tag [N]</div><div class="line">:%s#\[\d\+\]#\r&amp;#g          : parse on numbered array elements [1] [N]</div><div class="line">ggVGgJ                      : rejoin XML without extra spaces (gJ) [N]</div><div class="line"><span class="meta">%</span><span class="bash">s=\\n<span class="comment">#\d=\r&amp;=g             : parse PHP error stack [N]</span></span></div><div class="line">:%s#^[^\t]\+\t##            : Delete up to and including first tab [N]</div><div class="line">" VIM Power Substitute</div><div class="line">:'a,'bg/fred/s/dick/joe/igc : VERY USEFUL</div><div class="line">" duplicating columns</div><div class="line">:%s= [^ ]\+$=&amp;&amp;=            : duplicate end column</div><div class="line">:%s= \f\+$=&amp;&amp;=              : Dupicate filename</div><div class="line">:%s= \S\+$=&amp;&amp;               : usually the same</div><div class="line">" memory</div><div class="line">:%s#example#&amp; = &amp;#gic        : duplicate entire matched string [N]</div><div class="line">:%s#.*\(tbl_\w\+\).*#\1#    : extract list of all strings tbl_* from text  [NC]</div><div class="line">:s/\(.*\):\(.*\)/\2 : \1/   : reverse fields separated by :</div><div class="line">:%s/^\(.*\)\n\1$/\1/        : delete duplicate lines</div><div class="line">:%s/^\(.*\)\(\n\1\)\+$/\1/  : delete multiple duplicate lines [N]</div><div class="line">" non-greedy matching \&#123;-&#125;</div><div class="line">:%s/^.\&#123;-&#125;pdf/new.pdf/      : delete to 1st occurence of pdf only (non-greedy)</div><div class="line"><span class="meta">%</span><span class="bash">s<span class="comment">#^.\&#123;-&#125;\([0-9]\&#123;3,4\&#125;serial\)#\1#gic : delete up to 123serial or 1234serial [N]</span></span></div><div class="line">" use of optional atom \?</div><div class="line">:%s#\&lt;[zy]\?tbl_[a-z_]\+\&gt;#\L&amp;#gc : lowercase with optional leading characters</div><div class="line">" over possibly many lines</div><div class="line">:%s/&lt;!--\_.\&#123;-&#125;--&gt;//        : delete possibly multi-line comments</div><div class="line">:help /\&#123;-&#125;                 : help non-greedy</div><div class="line">" substitute using a register</div><div class="line">:s/fred/&lt;c-r&gt;a/g            : sub "fred" with contents of register "a"</div><div class="line">:s/fred/&lt;c-r&gt;asome_text&lt;c-r&gt;s/g  </div><div class="line">:s/fred/\=@a/g              : better alternative as register not displayed (not *) [C]</div><div class="line">" multiple commands on one line</div><div class="line">:%s/\f\+\.gif\&gt;/\r&amp;\r/g | v/\.gif$/d | %s/gif/jpg/</div><div class="line">:%s/a/but/gie|:update|:next : then use @: to repeat</div><div class="line">" ORing</div><div class="line">:%s/goat\|cow/sheep/gc      : ORing (must break pipe)</div><div class="line">:'a,'bs#\[\|\]##g           : remove [] from lines between markers a and b [N]</div><div class="line">:%s/\v(.*\n)&#123;5&#125;/&amp;\r         : insert a blank line every 5 lines [N]</div><div class="line">" Calling a VIM function</div><div class="line">:s/__date__/\=strftime("%c")/ : insert datestring</div><div class="line">:inoremap \zd &lt;C-R&gt;=strftime("%d%b%y")&lt;CR&gt;    : insert date eg 31Jan11 [N]</div><div class="line">" Working with Columns sub any str1 in col3</div><div class="line">:%s:\(\(\w\+\s\+\)\&#123;2&#125;\)str1:\1str2:</div><div class="line">" Swapping first &amp; last column (4 columns)</div><div class="line">:%s:\(\w\+\)\(.*\s\+\)\(\w\+\)$:\3\2\1:</div><div class="line">" format a mysql query </div><div class="line">:%s#\&lt;from\&gt;\|\&lt;where\&gt;\|\&lt;left join\&gt;\|\&lt;\inner join\&gt;#\r&amp;#g</div><div class="line">" filter all form elements into paste register</div><div class="line">:redir @*|sil exec 'g#&lt;\(input\|select\|textarea\|/\=form\)\&gt;#p'|redir END</div><div class="line">:nmap ,z :redir @*&lt;Bar&gt;sil exec 'g@&lt;\(input\&lt;Bar&gt;select\&lt;Bar&gt;textarea\&lt;Bar&gt;/\=form\)\&gt;@p'&lt;Bar&gt;redir END&lt;CR&gt;</div><div class="line">" substitute string in column 30 [N]</div><div class="line">:%s/^\(.\&#123;30\&#125;\)xx/\1yy/</div><div class="line">" decrement numbers by 3</div><div class="line">:%s/\d\+/\=(submatch(0)-3)/</div><div class="line">" increment numbers by 6 on certain lines only</div><div class="line">:g/loc\|function/s/\d/\=submatch(0)+6/</div><div class="line">" better</div><div class="line">:%s#txtdev\zs\d#\=submatch(0)+1#g</div><div class="line">:h /\zs</div><div class="line">" increment only numbers gg\d\d  by 6 (another way)</div><div class="line">:%s/\(gg\)\@&lt;=\d\+/\=submatch(0)+6/</div><div class="line">:h zero-width</div><div class="line">" rename a string with an incrementing number</div><div class="line">:let i=10 | 'a,'bg/Abc/s/yy/\=i/ |let i=i+1 # convert yy to 10,11,12 etc</div><div class="line">" as above but more precise</div><div class="line">:let i=10 | 'a,'bg/Abc/s/xx\zsyy\ze/\=i/ |let i=i+1 # convert xxyy to xx11,xx12,xx13</div><div class="line">" find replacement text, put in memory, then use \zs to simplify substitute</div><div class="line">:%s/"\([^.]\+\).*\zsxx/\1/</div><div class="line">" Pull word under cursor into LHS of a substitute</div><div class="line">:nmap &lt;leader&gt;z :%s#\&lt;&lt;c-r&gt;=expand("&lt;cword&gt;")&lt;cr&gt;\&gt;#</div><div class="line">" Pull Visually Highlighted text into LHS of a substitute</div><div class="line">:vmap &lt;leader&gt;z :&lt;C-U&gt;%s/\&lt;&lt;c-r&gt;*\&gt;/</div><div class="line">" substitute singular or plural</div><div class="line">:'a,'bs/bucket\(s\)*/bowl\1/gic   [N]</div><div class="line">----------------------------------------</div><div class="line">" all following performing similar task, substitute within substitution</div><div class="line">" Multiple single character substitution in a portion of line only</div><div class="line">:%s,\(all/.*\)\@&lt;=/,_,g     : replace all / with _ AFTER "all/"</div><div class="line">" Same thing</div><div class="line">:s#all/\zs.*#\=substitute(submatch(0), '/', '_', 'g')#</div><div class="line">" Substitute by splitting line, then re-joining</div><div class="line">:s#all/#&amp;^M#|s#/#_#g|-j!</div><div class="line">" Substitute inside substitute</div><div class="line">:%s/.*/\='cp '.submatch(0).' all/'.substitute(submatch(0),'/','_','g')/</div><div class="line">----------------------------------------</div><div class="line">" *best-global* command </div><div class="line">:g/gladiolli/#              : display with line numbers (YOU WANT THIS!)</div><div class="line">:g/fred.*joe.*dick/         : display all lines fred,joe &amp; dick</div><div class="line">:g/\&lt;fred\&gt;/                : display all lines fred but not freddy</div><div class="line">:g/^\s*$/d                  : delete all blank lines</div><div class="line">:g!/^dd/d                   : delete lines not containing string</div><div class="line">:v/^dd/d                    : delete lines not containing string</div><div class="line">:g/joe/,/fred/d             : not line based (very powerfull)</div><div class="line">:g/fred/,/joe/j             : Join Lines [N]</div><div class="line">:g/-------/.-10,.d          : Delete string &amp; 10 previous lines</div><div class="line">:g/&#123;/ ,/&#125;/- s/\n\+/\r/g     : Delete empty lines but only between &#123;...&#125;</div><div class="line">:v/\S/d                     : Delete empty lines (and blank lines ie whitespace)</div><div class="line">:v/./,/./-j                 : compress empty lines</div><div class="line">:g/^$/,/./-j                : compress empty lines</div><div class="line">:g/&lt;input\|&lt;form/p          : ORing</div><div class="line">:g/^/put_                   : double space file (pu = put)</div><div class="line">:g/^/m0                     : Reverse file (m = move)</div><div class="line">:g/^/m$                     : No effect! [N]</div><div class="line">:'a,'bg/^/m'b               : Reverse a section a to b</div><div class="line">:g/^/t.                     : duplicate every line</div><div class="line">:g/fred/t$                  : copy (transfer) lines matching fred to EOF</div><div class="line">:g/stage/t'a                : copy (transfer) lines matching stage to marker a (cannot use .) [C]</div><div class="line">:g/^Chapter/t.|s/./-/g      : Automatically underline selecting headings [N]</div><div class="line">:g/\(^I[^^I]*\)\&#123;80&#125;/d      : delete all lines containing at least 80 tabs</div><div class="line">" perform a substitute on every other line</div><div class="line">:g/^/ if line('.')%2|s/^/zz / </div><div class="line">" match all lines containing "somestr" between markers a &amp; b</div><div class="line">" copy after line containing "otherstr"</div><div class="line">:'a,'bg/somestr/co/otherstr/ : co(py) or mo(ve)</div><div class="line">" as above but also do a substitution</div><div class="line">:'a,'bg/str1/s/str1/&amp;&amp;&amp;/|mo/str2/</div><div class="line">:%norm jdd                  : delete every other line</div><div class="line">" incrementing numbers (type &lt;c-a&gt; as 5 characters)</div><div class="line">:.,$g/^\d/exe "norm! \&lt;c-a&gt;": increment numbers</div><div class="line">:'a,'bg/\d\+/norm! ^A       : increment numbers</div><div class="line">" storing glob results (note must use APPEND) you need to empty reg a first with qaq. </div><div class="line">"save results to a register/paste buffer</div><div class="line">:g/fred/y A                 : append all lines fred to register a</div><div class="line">:g/fred/y A | :let @*=@a    : put into paste buffer</div><div class="line">:g//y A | :let @*=@a    : put last glob into paste buffer [N]</div><div class="line">:let @a=''|g/Barratt/y A |:let @*=@a</div><div class="line">" filter lines to a file (file must already exist)</div><div class="line">:'a,'bg/^Error/ . w &gt;&gt; errors.txt</div><div class="line">" duplicate every line in a file wrap a print '' around each duplicate</div><div class="line">:g/./yank|put|-1s/'/"/g|s/.*/Print '&amp;'/</div><div class="line">" replace string with contents of a file, -d deletes the "mark"</div><div class="line">:g/^MARK$/r tmp.txt | -d</div><div class="line">" display prettily</div><div class="line">:g/&lt;pattern&gt;/z#.5           : display with context</div><div class="line">:g/&lt;pattern&gt;/z#.5|echo "=========="  : display beautifully</div><div class="line">" Combining g// with normal mode commands</div><div class="line">:g/|/norm 2f|r*                      : replace 2nd | with a star</div><div class="line">"send output of previous global command to a new window</div><div class="line">:nmap &lt;F3&gt;  :redir @a&lt;CR&gt;:g//&lt;CR&gt;:redir END&lt;CR&gt;:new&lt;CR&gt;:put! a&lt;CR&gt;&lt;CR&gt;</div><div class="line">"----------------------------------------</div><div class="line">" *Best-Global-combined-with-substitute* (*power-editing*)</div><div class="line">:'a,'bg/fred/s/joe/susan/gic :  can use memory to extend matching</div><div class="line">:/fred/,/joe/s/fred/joe/gic :  non-line based (ultra)</div><div class="line">:/biz/,/any/g/article/s/wheel/bucket/gic:  non-line based [N]</div><div class="line">----------------------------------------</div><div class="line">" Find fred before beginning search for joe</div><div class="line">:/fred/;/joe/-2,/sid/+3s/sally/alley/gIC</div><div class="line">"----------------------------------------</div><div class="line">" create a new file for each line of file eg 1.txt,2.txt,3,txt etc</div><div class="line">:g/^/exe ".w ".line(".").".txt"</div><div class="line">"----------------------------------------</div><div class="line">" chain an external command</div><div class="line">:.g/^/ exe ".!sed 's/N/X/'" | s/I/Q/    [N]</div><div class="line">"----------------------------------------</div><div class="line">" Operate until string found [N]</div><div class="line">d/fred/                                :delete until fred</div><div class="line">y/fred/                                :yank until fred</div><div class="line">c/fred/e                               :change until fred end</div><div class="line">v12|                                   : visualise/change/delete to column 12 [N]</div><div class="line">"----------------------------------------</div><div class="line">" Summary of editing repeats [N]</div><div class="line">.      last edit (magic dot)</div><div class="line">:&amp;     last substitute</div><div class="line">:%&amp;    last substitute every line</div><div class="line">:%&amp;gic last substitute every line confirm</div><div class="line"><span class="meta">g%</span><span class="bash">     normal mode repeat last substitute</span></div><div class="line">g&amp;     last substitute on all lines</div><div class="line">@@     last recording</div><div class="line">@:     last command-mode command</div><div class="line">:!!    last :! command</div><div class="line">:~     last substitute</div><div class="line">:help repeating</div><div class="line">----------------------------------------</div><div class="line">" Summary of repeated searches</div><div class="line">;      last f, t, F or T</div><div class="line">,      last f, t, F or T in opposite direction</div><div class="line">n      last / or ? search</div><div class="line">N      last / or ? search in opposite direction</div><div class="line">----------------------------------------</div><div class="line">" *Absolutely-essential*</div><div class="line">----------------------------------------</div><div class="line">* # g* g#           : find word under cursor (&lt;cword&gt;) (forwards/backwards)</div><div class="line"><span class="meta">%</span><span class="bash">                   : match brackets &#123;&#125;[]()</span></div><div class="line">.                   : repeat last modification </div><div class="line">@:                  : repeat last : command (then @@)</div><div class="line">matchit.vim         : % now matches tags &lt;tr&gt;&lt;td&gt;&lt;script&gt; &lt;?php etc</div><div class="line">&lt;C-N&gt;&lt;C-P&gt;          : word completion in insert mode</div><div class="line">&lt;C-X&gt;&lt;C-L&gt;          : Line complete SUPER USEFUL</div><div class="line">/&lt;C-R&gt;&lt;C-W&gt;         : Pull &lt;cword&gt; onto search/command line</div><div class="line">/&lt;C-R&gt;&lt;C-A&gt;         : Pull &lt;CWORD&gt; onto search/command line</div><div class="line">:set ignorecase     : you nearly always want this</div><div class="line">:set smartcase      : overrides ignorecase if uppercase used in search string (cool)</div><div class="line">:syntax on          : colour syntax in Perl,HTML,PHP etc</div><div class="line">:set syntax=perl    : force syntax (usually taken from file extension)</div><div class="line">:syntax sync fromstart  : Fix syntax highlighting [N]</div><div class="line">:h regexp&lt;C-D&gt;      : type control-D and get a list all help topics containing</div><div class="line">                      regexp (plus use TAB to Step thru list)</div><div class="line">----------------------------------------</div><div class="line">" MAKE IT EASY TO UPDATE/RELOAD _vimrc</div><div class="line">:nmap ,s :source $VIM/_vimrc</div><div class="line">:nmap ,v :e $VIM/_vimrc</div><div class="line">:e $MYVIMRC         : edits your _vimrc whereever it might be  [N]</div><div class="line">" How to have a variant in your .vimrc for different PCs [N]</div><div class="line">if $COMPUTERNAME == "NEWPC"</div><div class="line">ab mypc vista</div><div class="line">else</div><div class="line">ab mypc dell25</div><div class="line">endif</div><div class="line">----------------------------------------</div><div class="line">" splitting windows</div><div class="line">:vsplit other.php       # vertically split current file with other.php [N]</div><div class="line">----------------------------------------</div><div class="line">"VISUAL MODE (easy to add other HTML Tags)</div><div class="line">:vmap sb "zdi&lt;b&gt;&lt;C-R&gt;z&lt;/b&gt;&lt;ESC&gt;  : wrap &lt;b&gt;&lt;/b&gt; around VISUALLY selected Text</div><div class="line">:vmap st "zdi&lt;?= &lt;C-R&gt;z ?&gt;&lt;ESC&gt;  : wrap &lt;?=   ?&gt; around VISUALLY selected Text</div><div class="line">----------------------------------------</div><div class="line">"vim 7 tabs</div><div class="line">vim -p fred.php joe.php             : open files in tabs</div><div class="line">:tabe fred.php                      : open fred.php in a new tab</div><div class="line">:tab ball                           : tab open files</div><div class="line">:close                              : close a tab but leave the buffer *N*</div><div class="line">" vim 7 forcing use of tabs from .vimrc</div><div class="line">:nnoremap gf &lt;C-W&gt;gf</div><div class="line">:cab      e  tabe</div><div class="line">:tab sball                           : retab all files in buffer (repair) [N]</div><div class="line">----------------------------------------</div><div class="line">" Exploring</div><div class="line">:e .                            : file explorer</div><div class="line">:Exp(lore)                      : file explorer note capital Ex</div><div class="line">:Sex(plore)                     : file explorer in split window</div><div class="line">:browse e                       : windows style browser</div><div class="line">:ls                             : list of buffers</div><div class="line">:cd ..                          : move to parent directory</div><div class="line">:args                           : list of files</div><div class="line">:pwd                            : Print Working Directory (current directory) [N]</div><div class="line">:args *.php                     : open list of files (you need this!)</div><div class="line">:lcd %:p:h                      : change to directory of current file</div><div class="line">:cd  %:p:h                      : change to directory of current file [N]</div><div class="line">:autocmd BufEnter * lcd %:p:h   : change to directory of current file automatically (put in _vimrc)</div><div class="line">----------------------------------------</div><div class="line">" Changing Case</div><div class="line">guu                             : lowercase line</div><div class="line">gUU                             : uppercase line</div><div class="line">Vu                              : lowercase line</div><div class="line">VU                              : uppercase line</div><div class="line">g~~                             : flip case line</div><div class="line">vEU                             : Upper Case Word</div><div class="line">vE~                             : Flip Case Word</div><div class="line">ggguG                           : lowercase entire file</div><div class="line">" Titlise Visually Selected Text (map for .vimrc)</div><div class="line">vmap ,c :s/\&lt;\(.\)\(\k*\)\&gt;/\u\1\L\2/g&lt;CR&gt;</div><div class="line">" Title Case A Line Or Selection (better)</div><div class="line">vnoremap &lt;F6&gt; :s/\%V\&lt;\(\w\)\(\w*\)\&gt;/\u\1\L\2/ge&lt;cr&gt; [N]</div><div class="line">" titlise a line</div><div class="line">nmap ,t :s/.*/\L&amp;/&lt;bar&gt;:s/\&lt;./\u&amp;/g&lt;cr&gt;  [N]</div><div class="line">" Uppercase first letter of sentences</div><div class="line">:%s/[.!?]\_s\+\a/\U&amp;\E/g</div><div class="line">----------------------------------------</div><div class="line">gf                              : open file name under cursor (SUPER)</div><div class="line">:nnoremap gF :view &lt;cfile&gt;&lt;cr&gt;  : open file under cursor, create if necessary</div><div class="line">ga                              : display hex,ascii value of char under cursor</div><div class="line">ggVGg?                          : rot13 whole file</div><div class="line">ggg?G                           : rot13 whole file (quicker for large file)</div><div class="line">:8 | normal VGg?                : rot13 from line 8</div><div class="line">:normal 10GVGg?                 : rot13 from line 8</div><div class="line">&lt;C-A&gt;,&lt;C-X&gt;                     : increment,decrement number under cursor</div><div class="line">                                  win32 users must remap CNTRL-A</div><div class="line">&lt;C-R&gt;=5*5                       : insert 25 into text (mini-calculator)</div><div class="line">----------------------------------------</div><div class="line">" Make all other tips superfluous</div><div class="line">:h 42            : also http://www.google.com/search?q=42</div><div class="line">:h holy-grail</div><div class="line">:h!</div><div class="line">----------------------------------------</div><div class="line">" disguise text (watch out) [N]</div><div class="line">ggVGg?                          : rot13 whole file (toggles)</div><div class="line">:set rl!                        : reverse lines right to left (toggles)</div><div class="line">:g/^/m0                         : reverse lines top to bottom (toggles)</div><div class="line">:%s/\(\&lt;.\&#123;-&#125;\&gt;\)/\=join(reverse(split(submatch(1), '.\zs')), '')/g   : reverse all text *N*</div><div class="line">----------------------------------------</div><div class="line">" History, Markers &amp; moving about (what Vim Remembers) [C]</div><div class="line">'.               : jump to last modification line (SUPER)</div><div class="line">`.               : jump to exact spot in last modification line</div><div class="line">g;               : cycle thru recent changes (oldest first)</div><div class="line">g,               : reverse direction </div><div class="line">:changes</div><div class="line">:h changelist    : help for above</div><div class="line">&lt;C-O&gt;            : retrace your movements in file (starting from most recent)</div><div class="line">&lt;C-I&gt;            : retrace your movements in file (reverse direction)</div><div class="line">:ju(mps)         : list of your movements</div><div class="line">:help jump-motions</div><div class="line">:history         : list of all your commands</div><div class="line">:his c           : commandline history</div><div class="line">:his s           : search history</div><div class="line">q/               : Search history Window (puts you in full edit mode) (exit CTRL-C)</div><div class="line">q:               : commandline history Window (puts you in full edit mode) (exit CTRL-C)</div><div class="line">:&lt;C-F&gt;           : history Window (exit CTRL-C)</div><div class="line">----------------------------------------</div><div class="line">" Abbreviations &amp; Maps</div><div class="line">" Maps are commands put onto keys, abbreviations expand typed text [N]</div><div class="line">" Following 4 maps enable text transfer between VIM sessions</div><div class="line">:map   &lt;f7&gt;   :'a,'bw! c:/aaa/x       : save text to file x</div><div class="line">:map   &lt;f8&gt;   :r c:/aaa/x             : retrieve text </div><div class="line">:map   &lt;f11&gt;  :.w! c:/aaa/xr&lt;CR&gt;      : store current line</div><div class="line">:map   &lt;f12&gt;  :r c:/aaa/xr&lt;CR&gt;        : retrieve current line</div><div class="line">:ab php          : list of abbreviations beginning php</div><div class="line">:map ,           : list of maps beginning ,</div><div class="line">" allow use of F10 for mapping (win32)</div><div class="line">set wak=no       : :h winaltkeys</div><div class="line">" For use in Maps</div><div class="line">&lt;CR&gt;             : carriage Return for maps</div><div class="line">&lt;ESC&gt;            : Escape</div><div class="line">&lt;LEADER&gt;         : normally \</div><div class="line">&lt;BAR&gt;            : | pipe</div><div class="line">&lt;BACKSPACE&gt;      : backspace</div><div class="line">&lt;SILENT&gt;         : No hanging shell window</div><div class="line">"display RGB colour under the cursor eg #445588</div><div class="line">:nmap &lt;leader&gt;c :hi Normal guibg=#&lt;c-r&gt;=expand("&lt;cword&gt;")&lt;cr&gt;&lt;cr&gt;</div><div class="line">map &lt;f2&gt; /price only\\|versus/ :in a map need to backslash the \</div><div class="line">" type table,,, to get &lt;table&gt;&lt;/table&gt;       ### Cool ###</div><div class="line">imap ,,, &lt;esc&gt;bdwa&lt;&lt;esc&gt;pa&gt;&lt;cr&gt;&lt;/&lt;esc&gt;pa&gt;&lt;esc&gt;kA</div><div class="line">" list current mappings of all your function keys</div><div class="line">:for i in range(1, 12) | execute("map &lt;F".i."&gt;") | endfor   [N]</div><div class="line">" for your .vimrc</div><div class="line">:cab ,f :for i in range(1, 12) \| execute("map &lt;F".i."&gt;") \| endfor</div><div class="line">"chain commands in abbreviation</div><div class="line">cabbrev vrep tabe class.inc \| tabe report.php   ## chain commands [N]</div><div class="line">----------------------------------------</div><div class="line">" Simple PHP debugging display all variables yanked into register a</div><div class="line">iab phpdb exit("&lt;hr&gt;Debug &lt;C-R&gt;a  ");</div><div class="line">----------------------------------------</div><div class="line">" Using a register as a map (preload registers in .vimrc)</div><div class="line">:let @m=":'a,'bs/"</div><div class="line">:let @s=":%!sort -u"</div><div class="line">----------------------------------------</div><div class="line">" Useful tricks</div><div class="line">"ayy@a           : execute "Vim command" in a text file</div><div class="line">yy@"             : same thing using unnamed register</div><div class="line">u@.              : execute command JUST typed in</div><div class="line">"ddw             : store what you delete in register d [N]</div><div class="line">"ccaw            : store what you change in register c [N]</div><div class="line">----------------------------------------</div><div class="line">" Get output from other commands (requires external programs)</div><div class="line">:r!ls -R         : reads in output of ls</div><div class="line">:put=glob('**')  : same as above                 [N]</div><div class="line">:r !grep "^ebay" file.txt  : grepping in content   [N]</div><div class="line">:20,25 !rot13    : rot13 lines 20 to 25   [N]</div><div class="line">!!date           : same thing (but replaces/filters current line)</div><div class="line">" Sorting with external sort</div><div class="line">:%!sort -u       : use an external program to filter content</div><div class="line">:'a,'b!sort -u   : use an external program to filter content</div><div class="line">!1&#125; sort -u      : sorts paragraph (note normal mode!!)</div><div class="line">:g/^$/;/^$/-1!sort : Sort each block (note the crucial ;)</div><div class="line">" Sorting with internal sort</div><div class="line">:sort /.*\%2v/   : sort all lines on second column [N]</div><div class="line">" number lines  (linux or cygwin only)</div><div class="line">:new | r!nl #                  [N]</div><div class="line">----------------------------------------</div><div class="line">" Multiple Files Management (Essential)</div><div class="line">:bn              : goto next buffer</div><div class="line">:bp              : goto previous buffer</div><div class="line">:wn              : save file and move to next (super)</div><div class="line">:wp              : save file and move to previous</div><div class="line">:bd              : remove file from buffer list (super)</div><div class="line">:bun             : Buffer unload (remove window but not from list)</div><div class="line">:badd file.c     : file from buffer list</div><div class="line">:b3              : go to buffer 3 [C]</div><div class="line">:b main          : go to buffer with main in name eg main.c (ultra)</div><div class="line">:sav php.html    : Save current file as php.html and "move" to php.html</div><div class="line">:sav! %&lt;.bak     : Save Current file to alternative extension (old way)</div><div class="line">:sav! %:r.cfm    : Save Current file to alternative extension</div><div class="line">:sav %:s/fred/joe/           : do a substitute on file name</div><div class="line">:sav %:s/fred/joe/:r.bak2    : do a substitute on file name &amp; ext.</div><div class="line">:!mv % %:r.bak   : rename current file (DOS use Rename or DEL)</div><div class="line">:help filename-modifiers</div><div class="line">:e!              : return to unmodified file</div><div class="line">:w c:/aaa/%      : save file elsewhere</div><div class="line">:e #             : edit alternative file (also cntrl-^)</div><div class="line">:rew             : return to beginning of edited files list (:args)</div><div class="line">:brew            : buffer rewind</div><div class="line">:sp fred.txt     : open fred.txt into a split</div><div class="line">:sball,:sb       : Split all buffers (super)</div><div class="line">:scrollbind      : in each split window</div><div class="line">:map   &lt;F5&gt; :ls&lt;CR&gt;:e # : Pressing F5 lists all buffer, just type number</div><div class="line">:set hidden      : Allows to change buffer w/o saving current buffer</div><div class="line">----------------------------------------</div><div class="line">" Quick jumping between splits</div><div class="line">map &lt;C-J&gt; &lt;C-W&gt;j&lt;C-W&gt;_</div><div class="line">map &lt;C-K&gt; &lt;C-W&gt;k&lt;C-W&gt;_</div><div class="line">----------------------------------------</div><div class="line">" Recording (BEST Feature of ALL)</div><div class="line">qq  # record to q</div><div class="line">your complex series of commands</div><div class="line">q   # end recording</div><div class="line">@q to execute</div><div class="line">@@ to Repeat</div><div class="line">5@@ to Repeat 5 times</div><div class="line">qQ@qq                             : Make an existing recording q recursive [N]</div><div class="line">" editing a register/recording</div><div class="line">"qp                               :display contents of register q (normal mode)</div><div class="line">&lt;ctrl-R&gt;q                         :display contents of register q (insert mode)</div><div class="line">" you can now see recording contents, edit as required</div><div class="line">"qdd                              :put changed contacts back into q</div><div class="line">@q                                :execute recording/register q</div><div class="line">" Operating a Recording on a Visual BLOCK (blockwise)</div><div class="line">1) define recording/register</div><div class="line">qq:s/ to/ from/g^Mq</div><div class="line">2) Define Visual BLOCK</div><div class="line">V&#125;</div><div class="line">3) hit : and the following appears</div><div class="line">:'&lt;,'&gt;</div><div class="line">4)Complete as follows</div><div class="line">:'&lt;,'&gt;norm @q</div><div class="line">----------------------------------------</div><div class="line">"combining a recording with a map (to end up in command mode)</div><div class="line">"here we operate on a file with a recording, then move to the next file [N]</div><div class="line">:nnoremap ] @q:update&lt;bar&gt;bd</div><div class="line">----------------------------------------</div><div class="line">" Visual is the newest and usually the most intuitive editing mode</div><div class="line">" Visual basics</div><div class="line">v                               : enter visual mode</div><div class="line">V                               : visual mode whole line</div><div class="line">&lt;C-V&gt;                           : enter VISUAL BLOCKWISE mode (remap on Windows to say C-Q *C*</div><div class="line">gv                              : reselect last visual area (ultra)</div><div class="line">o                               : navigate visual area</div><div class="line">"*y or "+y                      : yank visual area into paste buffer  [C]</div><div class="line"><span class="meta">V%</span><span class="bash">                              : visualise what you match</span></div><div class="line">V&#125;J                             : Join Visual block (great)</div><div class="line">V&#125;gJ                            : Join Visual block w/o adding spaces</div><div class="line">`[v`]                           : Highlight last insert</div><div class="line">:%s/\%Vold/new/g                : Do a substitute on last visual area [N]</div><div class="line">----------------------------------------</div><div class="line">" Delete 8th and 9th characters of 10 successive lines [C]</div><div class="line">08l&lt;c-v&gt;10j2ld  (use Control Q on win32) [C]</div><div class="line">----------------------------------------</div><div class="line">" how to copy a set of columns using VISUAL BLOCK</div><div class="line">" visual block (AKA columnwise selection) (NOT BY ordinary v command)</div><div class="line">&lt;C-V&gt; then select "column(s)" with motion commands (win32 &lt;C-Q&gt;)</div><div class="line">then c,d,y,r etc</div><div class="line">----------------------------------------</div><div class="line">" how to overwrite a visual-block of text with another such block [C]</div><div class="line">" move with hjkl etc</div><div class="line">Pick the first block: ctrl-v move y</div><div class="line">Pick the second block: ctrl-v move P &lt;esc&gt;</div><div class="line">----------------------------------------</div><div class="line">" text objects :h text-objects                                     [C]</div><div class="line">daW                                   : delete contiguous non whitespace</div><div class="line">di&lt;   yi&lt;  ci&lt;                        : Delete/Yank/Change HTML tag contents</div><div class="line">da&lt;   ya&lt;  ca&lt;                        : Delete/Yank/Change whole HTML tag</div><div class="line">dat   dit                             : Delete HTML tag pair</div><div class="line">diB   daB                             : Empty a function &#123;&#125;</div><div class="line">das                                   : delete a sentence</div><div class="line">----------------------------------------</div><div class="line">" _vimrc essentials</div><div class="line">:imap &lt;TAB&gt; &lt;C-N&gt;                     : set tab to complete [N]</div><div class="line">:set incsearch : jumps to search word as you type (annoying but excellent)</div><div class="line">:set wildignore=*.o,*.obj,*.bak,*.exe : tab complete now ignores these</div><div class="line">:set shiftwidth=3                     : for shift/tabbing</div><div class="line">:set vb t_vb=".                       : set silent (no beep)</div><div class="line">:set browsedir=buffer                 : Maki GUI File Open use current directory</div><div class="line">----------------------------------------</div><div class="line">set iminsert=0  (or toggle CTRL-shift-^)    : reset "stuck" caps lock/capslock key [N]</div><div class="line">----------------------------------------</div><div class="line">" launching Win IE</div><div class="line">:nmap ,f :update&lt;CR&gt;:silent !start c:\progra~1\intern~1\iexplore.exe file://%:p&lt;CR&gt;</div><div class="line">:nmap ,i :update&lt;CR&gt;: !start c:\progra~1\intern~1\iexplore.exe &lt;cWORD&gt;&lt;CR&gt;</div><div class="line">----------------------------------------</div><div class="line">" FTPing from VIM</div><div class="line">cmap ,r  :Nread ftp://209.51.134.122/public_html/index.html</div><div class="line">cmap ,w  :Nwrite ftp://209.51.134.122/public_html/index.html</div><div class="line">gvim ftp://www.somedomain.com/index.html # uses netrw.vim</div><div class="line">----------------------------------------</div><div class="line">" appending to registers (use CAPITAL)</div><div class="line">" yank 5 lines into "a" then add a further 5</div><div class="line">"a5yy</div><div class="line">10j</div><div class="line">"A5yy</div><div class="line">----------------------------------------</div><div class="line">[I     : show lines matching word under cursor &lt;cword&gt; (super)</div><div class="line">----------------------------------------</div><div class="line">" Conventional Shifting/Indenting</div><div class="line">:'a,'b&gt;&gt;</div><div class="line">" visual shifting (builtin-repeat)</div><div class="line">:vnoremap &lt; &lt;gv</div><div class="line">:vnoremap &gt; &gt;gv</div><div class="line">" Block shifting (magic)</div><div class="line"><span class="meta">&gt;</span><span class="bash">i&#123;</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">a&#123;</span></div><div class="line">" also</div><div class="line"><span class="meta">&gt;</span><span class="bash">% and &lt;%</span></div><div class="line">==                            : index current line same as line above [N]</div><div class="line">----------------------------------------</div><div class="line">" Redirection &amp; Paste register *</div><div class="line">:redir @*                    : redirect commands to paste buffer</div><div class="line">:redir END                   : end redirect</div><div class="line">:redir &gt;&gt; out.txt            : redirect to a file</div><div class="line">" Working with Paste buffer</div><div class="line">"*yy                         : yank current line to paste</div><div class="line">"*p                          : insert from paste buffer</div><div class="line">" yank to paste buffer (ex mode)</div><div class="line">:'a,'by*                     : Yank range into paste</div><div class="line">:%y*                         : Yank whole buffer into paste</div><div class="line">:.y*                         : Yank Current line to paster</div><div class="line">" filter non-printable characters from the paste buffer</div><div class="line">" useful when pasting from some gui application</div><div class="line">:nmap &lt;leader&gt;p :let @* = substitute(@*,'[^[:print:]]','','g')&lt;cr&gt;"*p</div><div class="line">:set paste                    : prevent vim from formatting pasted in text *N*</div><div class="line">----------------------------------------</div><div class="line">" Re-Formatting text</div><div class="line">gq&#125;                          : Format a paragraph</div><div class="line">gqap                         : Format a paragraph</div><div class="line">ggVGgq                       : Reformat entire file</div><div class="line">Vgq                          : current line</div><div class="line">" break lines at 70 chars, if possible after a ;</div><div class="line">:s/.\&#123;,69\&#125;;\s*\|.\&#123;,69\&#125;\s\+/&amp;\r/g</div><div class="line">----------------------------------------</div><div class="line">" Operate command over multiple files</div><div class="line">:argdo %s/foo/bar/e          : operate on all files in :args</div><div class="line">:bufdo %s/foo/bar/e</div><div class="line">:windo %s/foo/bar/e</div><div class="line">:argdo exe '%!sort'|w!       : include an external command</div><div class="line">:bufdo exe "normal @q" | w   : perform a recording on open files</div><div class="line">:silent bufdo !zip proj.zip %:p   : zip all current files</div><div class="line">----------------------------------------</div><div class="line">" Command line tricks</div><div class="line">gvim -h                    : help</div><div class="line">ls | gvim -                : edit a stream!!</div><div class="line">cat xx | gvim - -c "v/^\d\d\|^[3-9]/d " : filter a stream</div><div class="line">gvim -o file1 file2        : open into a horizontal split (file1 on top, file2 on bottom) [C]</div><div class="line">gvim -O file1 file2        : open into a vertical split (side by side,for comparing code) [N]</div><div class="line">" execute one command after opening file</div><div class="line">gvim.exe -c "/main" joe.c  : Open joe.c &amp; jump to "main"</div><div class="line">" execute multiple command on a single file</div><div class="line">vim -c "%s/ABC/DEF/ge | update" file1.c</div><div class="line">" execute multiple command on a group of files</div><div class="line">vim -c "argdo %s/ABC/DEF/ge | update" *.c</div><div class="line">" remove blocks of text from a series of files</div><div class="line">vim -c "argdo /begin/+1,/end/-1g/^/d | update" *.c</div><div class="line">" Automate editing of a file (Ex commands in convert.vim)</div><div class="line">vim -s "convert.vim" file.c</div><div class="line">"load VIM without .vimrc and plugins (clean VIM) e.g. for HUGE files</div><div class="line">gvim -u NONE -U NONE -N</div><div class="line">" Access paste buffer contents (put in a script/batch file)</div><div class="line">gvim -c 'normal ggdG"*p' c:/aaa/xp</div><div class="line">" print paste contents to default printer</div><div class="line">gvim -c 's/^/\=@*/|hardcopy!|q!'</div><div class="line">" gvim's use of external grep (win32 or *nix)</div><div class="line">:!grep somestring *.php     : creates a list of all matching files [C]</div><div class="line">" use :cn(ext) :cp(rev) to navigate list</div><div class="line">:h grep</div><div class="line">" Using vimgrep with copen                              [N]</div><div class="line">:vimgrep /keywords/ *.php</div><div class="line">:copen</div><div class="line">----------------------------------------</div><div class="line">" GVIM Difference Function (Brilliant)</div><div class="line">gvim -d file1 file2        : vimdiff (compare differences)</div><div class="line">dp                         : "put" difference under cursor to other file</div><div class="line">do                         : "get" difference under cursor from other file</div><div class="line">[c                         : jump backwards to change</div><div class="line">]c                         : jump forwards to change</div><div class="line">:set diffopt+=icase        : switch case sensitivity on and off</div><div class="line">" complex diff parts of same file [N]</div><div class="line">:1,2yank a | 7,8yank b</div><div class="line">:tabedit | put a | vnew | put b</div><div class="line">:windo diffthis </div><div class="line">----------------------------------------</div><div class="line">" Vim traps</div><div class="line">In regular expressions you must backslash + (match 1 or more)</div><div class="line">In regular expressions you must backslash | (or)</div><div class="line">In regular expressions you must backslash ( (group)</div><div class="line">In regular expressions you must backslash &#123; (count)</div><div class="line">/fred\+/                   : matches fred/freddy but not free</div><div class="line">/\(fred\)\&#123;2,3&#125;/           : note what you have to break</div><div class="line">----------------------------------------</div><div class="line">" \v or very magic (usually) reduces backslashing</div><div class="line">/codes\(\n\|\s\)*where  : normal regexp</div><div class="line">/\vcodes(\n|\s)*where   : very magic</div><div class="line">----------------------------------------</div><div class="line">" pulling objects onto command/search line (SUPER)</div><div class="line">&lt;C-R&gt;&lt;C-W&gt; : pull word under the cursor into a command line or search</div><div class="line">&lt;C-R&gt;&lt;C-A&gt; : pull WORD under the cursor into a command line or search</div><div class="line">&lt;C-R&gt;-                  : pull small register (also insert mode)</div><div class="line">&lt;C-R&gt;[0-9a-z]           : pull named registers (also insert mode)</div><div class="line">&lt;C-R&gt;%                  : pull file name (also #) (also insert mode)</div><div class="line">&lt;C-R&gt;=somevar           : pull contents of a variable (eg :let sray="ray[0-9]")</div><div class="line">----------------------------------------</div><div class="line">" List your Registers</div><div class="line">:reg             : display contents of all registers</div><div class="line">:reg a           : display content of register a</div><div class="line">:reg 12a         : display content of registers 1,2 &amp; a [N]</div><div class="line">"5p              : retrieve 5th "ring" </div><div class="line">"1p....          : retrieve numeric registers one by one</div><div class="line">:let @y='yy@"'   : pre-loading registers (put in .vimrc)</div><div class="line">qqq              : empty register "q"</div><div class="line">qaq              : empty register "a"</div><div class="line">:reg .-/%:*"     : the seven special registers [N]</div><div class="line">:reg 0           : what you last yanked, not affected by a delete [N]</div><div class="line">"_dd             : Delete to blackhole register "_ , don't affect any register [N]</div><div class="line">----------------------------------------</div><div class="line">" manipulating registers</div><div class="line">:let @a=@_              : clear register a</div><div class="line">:let @a=""              : clear register a</div><div class="line">:let @a=@"              : Save unnamed register [N]</div><div class="line">:let @*=@a              : copy register a to paste buffer</div><div class="line">:let @*=@:              : copy last command to paste buffer</div><div class="line">:let @*=@/              : copy last search to paste buffer</div><div class="line">:let @*=@%              : copy current filename to paste buffer</div><div class="line">----------------------------------------</div><div class="line">" help for help (USE TAB)</div><div class="line">:h quickref             : VIM Quick Reference Sheet (ultra)</div><div class="line">:h tips                 : Vim's own Tips Help</div><div class="line">:h visual&lt;C-D&gt;&lt;tab&gt;     : obtain  list of all visual help topics</div><div class="line">                        : Then use tab to step thru them</div><div class="line">:h ctrl&lt;C-D&gt;            : list help of all control keys</div><div class="line">:helpg uganda           : grep HELP Files use :cn, :cp to find next</div><div class="line">:helpgrep edit.*director: grep help using regexp</div><div class="line">:h :r                   : help for :ex command</div><div class="line">:h CTRL-R               : normal mode</div><div class="line">:h /\r                  : what's \r in a regexp (matches a &lt;CR&gt;)</div><div class="line">:h \\zs                 : double up backslash to find \zs in help</div><div class="line">:h i_CTRL-R             : help for say &lt;C-R&gt; in insert mode</div><div class="line">:h c_CTRL-R             : help for say &lt;C-R&gt; in command mode</div><div class="line">:h v_CTRL-V             : visual mode</div><div class="line">:h tutor                : VIM Tutor</div><div class="line">&lt;C-]&gt;                   : jump to &#123;keyword&#125; under  cursor in help file [C]</div><div class="line">&lt;C-[&gt;, &lt;C-T&gt;            : Move back &amp; Forth in HELP History</div><div class="line">gvim -h                 : VIM Command Line Help</div><div class="line">:cabbrev h tab help     : open help in a tab [N]</div><div class="line">----------------------------------------</div><div class="line">" where was an option set</div><div class="line">:scriptnames            : list all plugins, _vimrcs loaded (super)</div><div class="line">:verbose set history?   : reveals value of history and where set</div><div class="line">:function               : list functions</div><div class="line">:func SearchCompl       : List particular function</div><div class="line">----------------------------------------</div><div class="line">" making your own VIM help</div><div class="line">:helptags /vim/vim64/doc  : rebuild all *.txt help files in /doc</div><div class="line">:help add-local-help</div><div class="line">" save this page as a VIM Help File [N]</div><div class="line">:sav! $VIMRUNTIME/doc/vimtips.txt|:1,/^__BEGIN__/d|:/^__END__/,$d|:w!|:helptags $VIMRUNTIME/doc</div><div class="line">----------------------------------------</div><div class="line">" running file thru an external program (eg php)</div><div class="line">map   &lt;f9&gt;   :update&lt;CR&gt;:!c:/php/php.exe %&lt;CR&gt;</div><div class="line">map   &lt;f2&gt;   :update&lt;CR&gt;:!perl -c %&lt;CR&gt;</div><div class="line">----------------------------------------</div><div class="line">" capturing output of current script in a separate buffer</div><div class="line">:new | r!perl #                   : opens new buffer,read other buffer</div><div class="line">:new! x.out | r!perl #            : same with named file</div><div class="line">:new+read!ls</div><div class="line">----------------------------------------</div><div class="line">" create a new buffer, paste a register "q" into it, then sort new buffer</div><div class="line">:new +put q|%!sort</div><div class="line">----------------------------------------</div><div class="line">" Inserting DOS Carriage Returns</div><div class="line">:%s/$/\&lt;C-V&gt;&lt;C-M&gt;&amp;/g          :  that's what you type</div><div class="line">:%s/$/\&lt;C-Q&gt;&lt;C-M&gt;&amp;/g          :  for Win32</div><div class="line">:%s/$/\^M&amp;/g                  :  what you'll see where ^M is ONE character</div><div class="line">----------------------------------------</div><div class="line">" automatically delete trailing Dos-returns,whitespace</div><div class="line">autocmd BufRead * silent! %s/[\r \t]\+$//</div><div class="line">autocmd BufEnter *.php :%s/[ \t\r]\+$//e</div><div class="line">----------------------------------------</div><div class="line">" perform an action on a particular file or file type</div><div class="line">autocmd VimEnter c:/intranet/note011.txt normal! ggVGg?</div><div class="line">autocmd FileType *.pl exec('set fileformats=unix')</div><div class="line">----------------------------------------</div><div class="line">" Retrieving last command line command for copy &amp; pasting into text</div><div class="line">i&lt;c-r&gt;:</div><div class="line">" Retrieving last Search Command for copy &amp; pasting into text</div><div class="line">i&lt;c-r&gt;/</div><div class="line">----------------------------------------</div><div class="line">" more completions</div><div class="line">&lt;C-X&gt;&lt;C-F&gt;                        :insert name of a file in current directory</div><div class="line">----------------------------------------</div><div class="line">" Substituting a Visual area</div><div class="line">" select visual area as usual (:h visual) then type :s/Emacs/Vim/ etc</div><div class="line">:'&lt;,'&gt;s/Emacs/Vim/g               : REMEMBER you dont type the '&lt;.'&gt;</div><div class="line">gv                                : Re-select the previous visual area (ULTRA)</div><div class="line">----------------------------------------</div><div class="line">" inserting line number into file</div><div class="line">:g/^/exec "s/^/".strpart(line(".")."    ", 0, 4)</div><div class="line">:%s/^/\=strpart(line(".")."     ", 0, 5)</div><div class="line">:%s/^/\=line('.'). ' '</div><div class="line">----------------------------------------</div><div class="line">" *numbering lines VIM way*</div><div class="line">:set number                       : show line numbers</div><div class="line">:map &lt;F12&gt; :set number!&lt;CR&gt;       : Show linenumbers flip-flop</div><div class="line">:%s/^/\=strpart(line('.')."        ",0,&amp;ts)</div><div class="line">" numbering lines (need Perl on PC) starting from arbitrary number</div><div class="line">:'a,'b!perl -pne 'BEGIN&#123;$a=223&#125; substr($_,2,0)=$a++'</div><div class="line">" Produce a list of numbers</div><div class="line">" Type in number on line say 223 in an empty file</div><div class="line">qqmnYP`n^Aq                       : in recording q repeat with @q</div><div class="line">" increment existing numbers to end of file (type &lt;c-a&gt; as 5 characters)</div><div class="line">:.,$g/^\d/exe "normal! \&lt;c-a&gt;"</div><div class="line">" advanced incrementing</div><div class="line">http://vim.sourceforge.net/tip_view.php?tip_id=150</div><div class="line">----------------------------------------</div><div class="line">" *advanced incrementing* (really useful)</div><div class="line">" put following in _vimrc</div><div class="line">let g:I=0</div><div class="line">function! INC(increment)</div><div class="line">let g:I =g:I + a:increment</div><div class="line">return g:I</div><div class="line">endfunction</div><div class="line">" eg create list starting from 223 incrementing by 5 between markers a,b</div><div class="line">:let I=223</div><div class="line">:'a,'bs/^/\=INC(5)/</div><div class="line">" create a map for INC</div><div class="line">cab viminc :let I=223 \| 'a,'bs/$/\=INC(5)/</div><div class="line">----------------------------------------</div><div class="line">" *generate a list of numbers*  23-64</div><div class="line">o23&lt;ESC&gt;qqYp&lt;C-A&gt;q40@q</div><div class="line">unmap =                           : get the original vim command on a mapped key [N]</div><div class="line">----------------------------------------</div><div class="line">" editing/moving within current insert (Really useful)</div><div class="line">&lt;C-U&gt;                             : delete all entered</div><div class="line">&lt;C-W&gt;                             : delete last word</div><div class="line">&lt;HOME&gt;&lt;END&gt;                       : beginning/end of line</div><div class="line">&lt;C-LEFTARROW&gt;&lt;C-RIGHTARROW&gt;       : jump one word backwards/forwards</div><div class="line">&lt;C-X&gt;&lt;C-E&gt;,&lt;C-X&gt;&lt;C-Y&gt;             : scroll while staying put in insert</div><div class="line">----------------------------------------</div><div class="line"><span class="meta">#</span><span class="bash">encryption (use with care: DON<span class="string">'T FORGET your KEY)</span></span></div><div class="line">:X                                : you will be prompted for a key</div><div class="line">:h :X</div><div class="line">----------------------------------------</div><div class="line">" modeline (make a file readonly etc) must be in first/last 5 lines</div><div class="line">// vim:noai:ts=2:sw=4:readonly:</div><div class="line">" vim:ft=html:                    : says use HTML Syntax highlighting</div><div class="line">:h modeline</div><div class="line">----------------------------------------</div><div class="line">" Creating your own GUI Toolbar entry</div><div class="line">amenu  Modeline.Insert\ a\ VIM\ modeline &lt;Esc&gt;&lt;Esc&gt;ggOvim:ff=unix ts=4 ss=4&lt;CR&gt;vim60:fdm=marker&lt;esc&gt;gg</div><div class="line">----------------------------------------</div><div class="line">" A function to save word under cursor to a file</div><div class="line">function! SaveWord()</div><div class="line">   normal yiw</div><div class="line">   exe ':!echo '.@0.' &gt;&gt; word.txt'</div><div class="line">endfunction</div><div class="line">map ,p :call SaveWord()</div><div class="line">----------------------------------------</div><div class="line">" function to delete duplicate lines</div><div class="line">function! Del()</div><div class="line"> if getline(".") == getline(line(".") - 1)</div><div class="line">   norm dd</div><div class="line"> endif</div><div class="line">endfunction</div><div class="line"></div><div class="line">:g/^/ call Del()</div><div class="line">----------------------------------------</div><div class="line">" Digraphs (non alpha-numerics)</div><div class="line">:digraphs                         : display table</div><div class="line">:h dig                            : help</div><div class="line">i&lt;C-K&gt;e'                          : enters é</div><div class="line">i&lt;C-V&gt;233                         : enters é (Unix)</div><div class="line">i&lt;C-Q&gt;233                         : enters é (Win32)</div><div class="line">ga                                : View hex value of any character</div><div class="line"><span class="meta">#</span><span class="bash">Deleting non-ascii characters (some invisible)</span></div><div class="line">:%s/[\x00-\x1f\x80-\xff]/ /g      : type this as you see it</div><div class="line">:%s/[&lt;C-V&gt;128-&lt;C-V&gt;255]//gi       : where you have to type the Control-V</div><div class="line">:%s/[€-ÿ]//gi                     : Should see a black square &amp; a dotted y</div><div class="line">:%s/[&lt;C-V&gt;128-&lt;C-V&gt;255&lt;C-V&gt;01-&lt;C-V&gt;31]//gi : All pesky non-asciis</div><div class="line">:exec "norm /[\x00-\x1f\x80-\xff]/"        : same thing</div><div class="line"><span class="meta">#</span><span class="bash">Pull a non-ascii character onto search bar</span></div><div class="line">yl/&lt;C-R&gt;"                         :</div><div class="line">/[^a-zA-Z0-9_[:space:][:punct:]]  : search for all non-ascii</div><div class="line">----------------------------------------</div><div class="line">" All file completions grouped (for example main_c.c)</div><div class="line">:e main_&lt;tab&gt;                     : tab completes</div><div class="line">gf                                : open file under cursor  (normal)</div><div class="line">main_&lt;C-X&gt;&lt;C-F&gt;                   : include NAME of file in text (insert mode)</div><div class="line">----------------------------------------</div><div class="line">" Complex Vim</div><div class="line">" swap two words</div><div class="line">:%s/\&lt;\(on\|off\)\&gt;/\=strpart("offon", 3 * ("off" == submatch(0)), 3)/g</div><div class="line">" swap two words</div><div class="line">:vnoremap &lt;C-X&gt; &lt;Esc&gt;`.``gvP``P</div><div class="line">" Swap word with next word</div><div class="line">nmap &lt;silent&gt; gw    "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/&lt;cr&gt;&lt;c-o&gt;&lt;c-l&gt; [N]</div><div class="line">----------------------------------------</div><div class="line">" Convert Text File to HTML</div><div class="line">:runtime! syntax/2html.vim        : convert txt to html</div><div class="line">:h 2html</div><div class="line">----------------------------------------</div><div class="line">" VIM has internal grep</div><div class="line">:grep some_keyword *.c            : get list of all c-files containing keyword</div><div class="line">:cn                               : go to next occurrence</div><div class="line">----------------------------------------</div><div class="line">" Force Syntax coloring for a file that has no extension .pl</div><div class="line">:set syntax=perl</div><div class="line">" Remove syntax coloring (useful for all sorts of reasons)</div><div class="line">:set syntax off</div><div class="line">" change coloring scheme (any file in ~vim/vim??/colors)</div><div class="line">:colorscheme blue</div><div class="line">:colorscheme morning     : good fallback colorscheme *N*</div><div class="line">" Force HTML Syntax highlighting by using a modeline</div><div class="line"><span class="meta">#</span><span class="bash"> vim:ft=html:</span></div><div class="line">" Force syntax automatically (for a file with non-standard extension)</div><div class="line">au BufRead,BufNewFile */Content.IE?/* setfiletype html</div><div class="line">" make cursor standout against highlighted text for vim terminal (linux) [N]</div><div class="line">:highlight search term=reverse ctermbg=5  </div><div class="line">:highlight Normal guibg=white     : restore white background [N]</div><div class="line">----------------------------------------</div><div class="line">:set noma (non modifiable)        : Prevents modifications</div><div class="line">:set ro (Read Only)               : Protect a file from unintentional writes</div><div class="line">----------------------------------------</div><div class="line">" Sessions (Open a set of files)</div><div class="line">gvim file1.c file2.c lib/lib.h lib/lib2.h : load files for "session"</div><div class="line">:mksession                        : Make a Session file (default Session.vim)</div><div class="line">:mksession MySession.vim          : Make a Session file named file [C]</div><div class="line">:q</div><div class="line">gvim -S                           : Reload all files (loads Session.vim) [C]</div><div class="line">gvim -S MySession.vim             : Reload all files from named session [C]</div><div class="line">----------------------------------------</div><div class="line"><span class="meta">#</span><span class="bash">tags (jumping to subroutines/<span class="built_in">functions</span>)</span></div><div class="line">taglist.vim                       : popular plugin</div><div class="line">:Tlist                            : display Tags (list of functions)</div><div class="line">&lt;C-]&gt;                             : jump to function under cursor</div><div class="line">----------------------------------------</div><div class="line">" columnise a csv file for display only as may crop wide columns</div><div class="line">:let width = 20</div><div class="line">:let fill=' ' | while strlen(fill) &lt; width | let fill=fill.fill | endwhile</div><div class="line">:%s/\([^;]*\);\=/\=strpart(submatch(1).fill, 0, width)/ge</div><div class="line">:%s/\s\+$//ge</div><div class="line">" Highlight a particular csv column (put in .vimrc)</div><div class="line">function! CSVH(x)</div><div class="line">    execute 'match Keyword /^\([^,]*,\)\&#123;'.a:x.'&#125;\zs[^,]*/'</div><div class="line">    execute 'normal ^'.a:x.'f,'</div><div class="line">endfunction</div><div class="line">command! -nargs=1 Csv :call CSVH(&lt;args&gt;)</div><div class="line">" call with</div><div class="line">:Csv 5                             : highlight fifth column</div><div class="line">----------------------------------------</div><div class="line">zf1G      : fold everything before this line [N]</div><div class="line">" folding : hide sections to allow easier comparisons</div><div class="line">zf&#125;                               : fold paragraph using motion</div><div class="line">v&#125;zf                              : fold paragraph using visual</div><div class="line">zf'a                              : fold to mark</div><div class="line">zo                                : open fold</div><div class="line">zc                                : re-close fold</div><div class="line">" also visualise a section of code then type zf [N]</div><div class="line">:help folding</div><div class="line">zfG      : fold everything after this line [N]</div><div class="line">----------------------------------------</div><div class="line">" displaying "non-asciis"</div><div class="line">:set list</div><div class="line">:h listchars</div><div class="line">----------------------------------------</div><div class="line">" How to paste "normal vim commands" w/o entering insert mode</div><div class="line">:norm qqy$jq</div><div class="line">----------------------------------------</div><div class="line">" manipulating file names</div><div class="line">:h filename-modifiers             : help</div><div class="line">:w %                              : write to current file name</div><div class="line">:w %:r.cfm                        : change file extention to .cfm</div><div class="line">:!echo %:p                        : full path &amp; file name</div><div class="line">:!echo %:p:h                      : full path only</div><div class="line">:!echo %:t                        : filename only</div><div class="line">:reg %                            : display filename</div><div class="line">&lt;C-R&gt;%                            : insert filename (insert mode)</div><div class="line">"%p                               : insert filename (normal mode)</div><div class="line">/&lt;C-R&gt;%                           : Search for file name in text</div><div class="line">----------------------------------------</div><div class="line">" delete without destroying default buffer contents</div><div class="line">"_d                               : what you've ALWAYS wanted</div><div class="line">"_dw                              : eg delete word (use blackhole)</div><div class="line">----------------------------------------</div><div class="line">" pull full path name into paste buffer for attachment to email etc</div><div class="line">nnoremap &lt;F2&gt; :let @*=expand("%:p")&lt;cr&gt; :unix</div><div class="line">nnoremap &lt;F2&gt; :let @*=substitute(expand("%:p"), "/", "\\", "g")&lt;cr&gt; :win32</div><div class="line">----------------------------------------</div><div class="line">" Simple Shell script to rename files w/o leaving vim</div><div class="line"><span class="meta">$</span><span class="bash"> vim</span></div><div class="line">:r! ls *.c</div><div class="line">:%s/\(.*\).c/mv &amp; \1.bla</div><div class="line">:w !sh</div><div class="line">:q!</div><div class="line">----------------------------------------</div><div class="line">" count words/lines in a text file</div><div class="line">g&lt;C-G&gt;                                 # counts words</div><div class="line">:echo line("'b")-line("'a")            # count lines between markers a and b [N]</div><div class="line">:'a,'bs/^//n                           # count lines between markers a and b</div><div class="line">:'a,'bs/somestring//gn                 # count occurences of a string</div><div class="line">:s/,/,/gn                              # count commas in a line (csv/parameters)</div><div class="line">----------------------------------------</div><div class="line">" example of setting your own highlighting</div><div class="line">:syn match DoubleSpace "  "</div><div class="line">:hi def DoubleSpace guibg=#e0e0e0</div><div class="line">----------------------------------------</div><div class="line">" reproduce previous line word by word</div><div class="line">imap ]  @@@&lt;ESC&gt;hhkyWjl?@@@&lt;CR&gt;P/@@@&lt;CR&gt;3s</div><div class="line">nmap ] i@@@&lt;ESC&gt;hhkyWjl?@@@&lt;CR&gt;P/@@@&lt;CR&gt;3s</div><div class="line">" Programming keys depending on file type</div><div class="line">:autocmd bufenter *.tex map &lt;F1&gt; :!latex %&lt;CR&gt;</div><div class="line">:autocmd bufenter *.tex map &lt;F2&gt; :!xdvi -hush %&lt;.dvi&amp;&lt;CR&gt;</div><div class="line">" allow yanking of php variables with their dollar [N]</div><div class="line">:autocmd bufenter *.php :set iskeyword+=\$ </div><div class="line">----------------------------------------</div><div class="line">" reading Ms-Word documents, requires antiword (not docx)</div><div class="line">:autocmd BufReadPre *.doc set ro</div><div class="line">:autocmd BufReadPre *.doc set hlsearch!</div><div class="line">:autocmd BufReadPost *.doc %!antiword "%"</div><div class="line">----------------------------------------</div><div class="line">" a folding method</div><div class="line">vim: filetype=help foldmethod=marker foldmarker=&lt;&lt;&lt;,&gt;&gt;&gt;</div><div class="line">A really big section closed with a tag &lt;&lt;&lt; </div><div class="line">--- remember folds can be nested --- </div><div class="line">Closing tag &gt;&gt;&gt; </div><div class="line">----------------------------------------</div><div class="line">" Return to last edit position (You want this!) [N]</div><div class="line">autocmd BufReadPost *</div><div class="line">     \ if line("'\"") &gt; 0 &amp;&amp; line("'\"") &lt;= line("$") |</div><div class="line">     \   exe "normal! g`\"" |</div><div class="line">     \ endif</div><div class="line">----------------------------------------</div><div class="line">" store text that is to be changed or deleted in register a</div><div class="line">"act&lt;                                 :  Change Till &lt; [N]</div><div class="line">----------------------------------------</div><div class="line">"installing/getting latest version of vim on Linux (replace tiny-vim) [N]</div><div class="line">yum install vim-common vim-enhanced vim-minimal</div><div class="line">----------------------------------------</div><div class="line"><span class="meta">#</span><span class="bash"> using gVIM with Cygwin on a Windows PC</span></div><div class="line">if has('win32')</div><div class="line">source $VIMRUNTIME/mswin.vim</div><div class="line">behave mswin</div><div class="line">set shell=c:\\cygwin\\bin\\bash.exe shellcmdflag=-c shellxquote=\"</div><div class="line">endif</div><div class="line">----------------------------------------</div><div class="line">" *Just Another Vim Hacker JAVH*</div><div class="line">vim -c ":%s%s*%Cyrnfr)fcbafbe[Oenz(Zbbyranne%|:%s)[[()])-)Ig|norm Vg?"</div><div class="line">----------------------------------------</div><div class="line">vim:tw=78:ts=8:ft=help:norl:</div><div class="line">__END__</div><div class="line">----------------------------------------</div><div class="line">"Read Vimtips into a new vim buffer </div><div class="line">:silent r ! lynx -dump "http://zzapper.co.uk/vimtips.html" [N]</div><div class="line">" read webpage source html into vim</div><div class="line">gvim http://www.zzapper.co.uk/vimtips.html &amp;</div><div class="line">----------------------------------------</div><div class="line">updated version at http://www.zzapper.co.uk/vimtips.html</div><div class="line">----------------------------------------</div><div class="line">Please email any errors, tips etc to</div><div class="line">vim@rayninfo.co.uk</div><div class="line">" Information Sources</div><div class="line">----------------------------------------</div><div class="line">www.vim.org</div><div class="line">Vim Wiki *** VERY GOOD *** [N]</div><div class="line">Vim Use VIM newsgroup [N]</div><div class="line">comp.editors</div><div class="line">groups.yahoo.com/group/vim "VIM" specific newsgroup</div><div class="line">VIM Webring</div><div class="line">VimTips PDF Version (PRINTABLE!)</div><div class="line">Vimtips in Belarusian </div><div class="line">----------------------------------------</div><div class="line">" : commands to neutralise &lt; for HTML display and publish</div><div class="line">" use yy@" to execute following commands</div><div class="line">:w!|sav! vimtips.html|:/^__BEGIN__/,/^__END__/s#&lt;#\&lt;#g|:w!|:!vimtipsftp</div><div class="line">----------------------------------------</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; FROM: &lt;a href=&quot;http://rayninfo.co.uk/vimtips.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vimtips&lt;/a&gt; 有空翻译一下~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;fi
      
    
    </summary>
    
      <category term="linux" scheme="http://chen-tao.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://chen-tao.github.io/tags/linux/"/>
    
      <category term="vim" scheme="http://chen-tao.github.io/tags/vim/"/>
    
  </entry>
  
</feed>
