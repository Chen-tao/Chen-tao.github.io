<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chen-Tao</title>
  
  <subtitle>颂其诗，读其书，不知其人，可乎？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chen-tao.github.io/"/>
  <updated>2018-08-29T01:38:18.303Z</updated>
  <id>http://chen-tao.github.io/</id>
  
  <author>
    <name>Chen Tao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写给工程师的10条精进原则</title>
    <link href="http://chen-tao.github.io/2018/08/29/engineer-10-rule/"/>
    <id>http://chen-tao.github.io/2018/08/29/engineer-10-rule/</id>
    <published>2018-08-29T01:28:58.000Z</published>
    <updated>2018-08-29T01:38:18.303Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来自美团的一篇文章，我做了一些删减，focus很重要，找到自己的定位，多参与，形成方法论，逐步的向上靠近。</p></blockquote><h2 id="原则一：Owner意识"><a href="#原则一：Owner意识" class="headerlink" title="原则一：Owner意识"></a>原则一：Owner意识</h2><p>“Owner意识”主要体现在两个层面：一是认真负责的态度，二是积极主动的精神。</p><p>认真负责是工作的底线。首先，要对我们交付的结果负责。项目中每一个设计文档、每一行代码都需要认真完成，要对它的质量负责。如果设计文档逻辑混乱，代码没有注释，测试时发现一堆Bug，影响的不仅仅是RD的工程交付质量，还会对协同工作的RD、QA、PM等产生不好的影响。久而久之，团队的整体交付质量、工作效率也会逐步下降，甚至会导致团队成员之间产生不信任感。其次，我们要对开发的系统负责。系统的架构是否需要改进，接口文档是否完善，日志是否完整，数据库是否需要扩容，缓存空间够不够等等，这些都是需要落地的事情。作为系统Owner，请一定要认真履行。</p><p>积极主动是“Owner意识”更高一级的要求。RD每天要面对大量的工作，而且很多并不在计划内，这就需要具备一种积极主动的精神。例如我们每天可能会面对大量的技术咨询，如果客户提出的问题很长时间得不到回应的话，就会带来不好的客户体验。很多同学说忙于自己的工作没有时间处理，有同学觉得这件事不是很重要，也有很多同学是看到了，但是不知道怎么回答，更有甚者，看到了干脆装没看见。这些都是缺乏Owner意识的体现。正确的做法是积极主动地推动问题的解决，如果时间无法排开或者不知道如何解决，可以直接将问题反馈给能解决的同学。</p><p>积极主动还可以表现在更多方面。比如很多同学会自发地梳理负责服务的现状，根据接口在性能方面暴露的问题提出改进意见并持续推动解决；也有同学在跨团队沟通中主动承担起主R的角色，积极发现问题、暴露问题，推动合作团队的进度，保证项目顺利推进。这些同学无一不是团队的中坚力量。所以，我们在做好自己份内工作的同时，也应该积极主动地投入到“份外”的工作中去。一分耕耘一分收获，不要给自己设限，努力成为一个更加优秀的人。</p><h2 id="原则二：时间观念"><a href="#原则二：时间观念" class="headerlink" title="原则二：时间观念"></a>原则二：时间观念</h2><p>相信大家都有时间观念，但是真正能执行到位的可能并没有那么多。互联网是一个快速发展的行业，RD的研发效率是一个公司硬实力的重要体现。项目的按期交付是一项很重要的执行能力，在很大程度上决定着领导和同事对自己靠谱程度的评价。大家可能会问：难度几乎相同的项目，为什么有的同学经常Delay，而有的同学每次都能按时上线？一个很重要的原因，就是这些按时交付的同学往往具备如下两个特质：做事有计划，工作分主次。</p><p>工作安排要有计划性。通常，RD在设计评审之后就能预估出精确的开发时间，进而再合理地安排开发、联调、测试计划。如果是项目负责人，那么就会涉及协调FE、QA、PM等多个工种的同学共同完成工作。凡事预则立，不预则废。在计划制定过程中，要尽可能把每一项拆细一点（至少到pd粒度）。事实证明，粒度越细，计划就越精准，实际开发时间与计划之间的误差就会越小。</p><p>此外，务必要规定明确的可检查的产出，并在计划中设置一些关键的时间点进行核对。无数血淋淋的事实告诉我们，很多项目延期都是因为在一些关键交付点上双方存在分歧造成的。例如后台RD的接口文档计划在周五提供，FE认为是周五上午，而RD认为是周五下班前提交，无形中会给排期带来了1pd的误差。所以，我们要做到计划粒度足够细，关键时间点要可检查。</p><p>工作安排要分清楚主次。我们每天要面对很多的事情，要学会分辨这些工作的主次。可以尝试使用“艾森豪威尔法则”（四象限法则），把工作按照重要、紧急程度分成四象限。优先做重要紧急的事情；重要不紧急的事情可以暂缓做，但是要持续推进；紧急不重要的事情可以酌情委托给最合适的人做；不重要不紧急的事情可以考虑不做。很多项目无法按期交付的原因，都是因为执行人分不清主次。比如在开发中需要使用到ES，一些不熟悉ES的同学可能想系统性地学习一下这方面的知识，就会一头扎进ES的汪洋中。最后才发现，原本一天就能完成的工作被严重拖后。实际工作中，我们应当避免这种“本末倒置”的工作方式。在本例中，“系统性地学习ES”是一件重要但不紧急的事情。要学会分辨出这些干扰的工作项，保证重要紧急的事情能够按时交付。</p><h2 id="原则三：以终为始"><a href="#原则三：以终为始" class="headerlink" title="原则三：以终为始"></a>原则三：以终为始</h2><p>“以终为始”（Begin With The End In Mind），是史蒂芬·柯维在《高效能人士的七个习惯》中提到的一个习惯。它是以所有事物都经过两次创造的原则（第一次为心智上的创造，第二次为实际的创造）为基础的。直观的表达就是：先想清楚目标，然后努力实现。</p><p>在工作中，很多RD往往只是埋头走路，很少抬头看天。每次季度总结的时候，罗列了很多项目，付出很多努力。但是具体这些项目取得了哪些收益，对业务有哪些提升，却很难说出来。这就说明在工作中并没有遵守“以终为始”这一原则。此外，很多同学在做需求的过程中，对于目标与收益关注不够，系统上线之后，也没有持续地跟进使用效果。这一点在技术优化项目中体现的尤为明显。</p><p>例如在一个接口性能优化的项目中，经过RD的努力优化，系统TP99缩短了60%，支持QPS提升了2倍。但是系统到底需要优化到什么程度呢？是不是缩短60%，提升2倍就能满足需求呢？在优化之前，很多同学常常忘记设置一个预设的目标（TP99小于多少，支持QPS大于多少）。我们必须清楚，优化一定是有原因的，比如预期某节假日流量会暴增或者某接口超时比例过高，如果不进行优化，系统可能会存在宕机风险。解决特定的问题才是技术优化的最终目的，所以要根据问题设定目标，再进行优化。</p><p>“以终为始”，这一原则还可以作用于我们的学习中。很多同学看过很多技术文章，但是总是感觉自己依然一无所知。很重要的一个原因，就是没有带着目标去学习。在这个信息爆炸的时代，如果只是碎片化地接收各个公众号推送的文章，效果几乎可以忽略不计。在学习之前，我们一定要问自己，这次学习的目标是什么？是想把Redis的持久化原理搞清楚，还是把Redis的主从同步机制弄明白，亦或是想学习整个Redis Cluster的架构体系。如果我们能够带着问题与目标，再进行相关的资料搜集与学习，就会事半功倍。这种学习模式的效果会比碎片化阅读好很多。</p><h2 id="原则四：闭环思维"><a href="#原则四：闭环思维" class="headerlink" title="原则四：闭环思维"></a>原则四：闭环思维</h2><p>你是否遇到过这样的场景：参加了一个设计（或需求）评审，大家兴致勃勃地提了很多合理的意见，等到再次评审的时候，却发现第一次提的很多问题都没有得到改进，很多讨论过的问题需要从头再开始讨论。这种情况就是一种典型的工作不闭环。</p><p>之前看过一句话：一个人是否靠谱，就看他能否做到凡事有交代，件件有着落，事事有回音。这就是闭环思维的重要性。它强调的是一种即时反馈闭环，如果别人给我们分配了一个任务，不管完成的结果如何，一定要在规定的时间内给出明确的反馈。</p><p>例如在跨部门的沟通会议中，虽然各方达成了一致，会议发起者已经将最终的记录周知大家。但是，到这一步其实并没有完成真正的闭环，在落地执行过程中很可能还存在一些潜在的问题。例如，会议纪要是否经各方仔细核对并确认过？会议中明确的To Do进展是什么？完成结果有没有Check的机制？如果这些没有做到的话，就会陷入“沟通-发现问题-再沟通-再发现问题”的恶性循环中。</p><p>真正的闭环，要求我们对工作中的事情都能够养成良好的思维习惯，沟通要有结论，通知要有反馈，To Do要有验收。</p><p>“闭环思维”还要求能够定期主动进行阶段性的反馈。刚参加工作时，我接了一个工期为两个月的项目。整个项目需要独自完成，自己每天按照计划，有条不紊地进行开发。大概过了两周之后，Leader询问项目进度，虽然我已经跟他说没问题。然而，Leader告诉我，因为我每天对着电脑也不说话，让他心里很没底。</p><p>这时，我才意识到一个很重要的问题，我跟Leader之间存在信息不对称。从那以后，我就时不时得跟他汇报一下进度，哪怕就只有简短的一句话，也可以明显感觉，他对我的信心增加了很多。特别是我做Leader之后，对这种闭环反馈的理解，就更加深刻了。从Leader的角度看，其实只是想知道项目是否在正常推进，是否遇到问题需要他协助解决。</p><h2 id="原则五：保持敬畏"><a href="#原则五：保持敬畏" class="headerlink" title="原则五：保持敬畏"></a>原则五：保持敬畏</h2><p>“君子之心，常怀敬畏”，保持敬畏之心能够让我们少犯错误。在工作中存在各种各样的规范，例如代码规范、设计规范、上线规范等等。我们必须明白，这些规范的制定一定是基于某些客观原因的，它们都是历史上无数Case积累而来的经验。团队里的每一个成员都应该学习并严格遵守，这一点对于新人尤其重要。</p><p>当我们进入到一个新的团队，请先暂时忘掉之前的习惯，要尽快学习团队既有的规范，并且让自己与团队保持一致。以编码风格为例，很多同学往往习惯于自己之前的代码写作风格，在做新公司第一个项目时，也按照自己的习惯进行变量、包的命名等等。结果在代码Review过程中，被提了很多修改意见，不得不返工重写，得不偿失。如果能够保持敬畏之心，提前了解编码规范，这种问题完全可以避免。</p><p>类似的问题，还包括对上线流程的不了解，对回滚操作不熟悉，对SRE线上变更过程不了解等等。除了这些显而易见的规范，还有一些约定俗成的规则。个人建议是：如果有事情拿不准，不妨多问问其他同事，不要凭自己的感觉做事情。</p><p>保持敬畏之心并不意味着要“因循守旧”。在我们充分了解这些规范和约定之后，如果觉得存在不妥之处，可以跟全组同学讨论，是否采纳新的建议，然后及时去更新迭代。其实，让规范与约定与时俱进，也是另一种形式的敬畏。</p><h2 id="原则六：事不过二"><a href="#原则六：事不过二" class="headerlink" title="原则六：事不过二"></a>原则六：事不过二</h2><p>“事不过二”，是我们团队一贯坚持的原则，它可以解读为两层含义。</p><p>一层含义是“所有的评审与问题讨论，不要超过两次”。之所以有这样的要求，是因为我们发现，很多RD都把时间花费在一些无休止的评审与问题讨论中，真正投入到实际开发中的时间反而很少。在实际工作场景中，我们经常会遇到一些不是很成熟的需求评审。这些需求文档，要么是背景与目标含糊不清，要么是产品方案描述不够细化，或者存在歧义。RD与PM被迫反复进行讨论，我曾经遇到过一个需求评审，进行了三次还被打回。</p><p>同样的问题，在设计评审中也屡见不鲜。方案固然需要经过反复的讨论，但是如果迟迟不能达成一致，就会耗费很多RD与PM的宝贵时间，这就与提升研发效率的理念背道而驰。因此我们团队规定：所有的评审最多两次。通过这种方式，倒逼利益相关方尽可能地做好需求与方案设计。评审会议组织前，尝试与所有相关人员达成一致，询问对方的意见，并进行有针对性的讨论，这样能够大大提升评审会议的效率和质量。如果在第一次评审中不通过，那么就只有一次机会进行复审。一旦两次不通过，就需要进行Casestudy。</p><p>“事不过二”原则的另一层含义，是“同样的错误不能犯第二次”。每次故障之后，Casestudy都必须进行深刻的总结复盘，对故障原因进行5Why分析，给出明确可执行的To Do List。每次季度总结会，大家自我反省问题所在，在下个季度必须有所改善，不能再犯类似的错误。孔子云：“不迁怒，不贰过”，在错误中反思与成长，才能让我们成为更优秀的人。</p><h2 id="原则七：设计优先"><a href="#原则七：设计优先" class="headerlink" title="原则七：设计优先"></a>原则七：设计优先</h2><p>“设计优先”这条原则，相对来说更加具体一些。之所以单列一项，是因为架构设计太重要了。Uncle Bob曾说过：“软件架构的目标，是为了让构建与维护系统的所需人力资源最小化。”</p><p>架构设计，并不仅仅关系到系统的质量，还关乎团队的效能问题。很多团队也有明文规定，开发周期在3pd以上的项目必须有设计文档，开发周期在5pd以上的项目必须有设计评审。在具体的执行过程中，由于各种原因，设计往往并不能达到预期的效果。究其原因，有的是因为项目周期紧，来不及设计的足够详细；有的是因为RD主观上认为项目比较简单，设计草草了事。无数事实证明，忽略了前期设计，往往会导致后续开发周期被大幅拉长，给项目带来了很大的Delay风险。而且最可怕的是，不当的设计会给项目带来巨大的后期维护成本，我们不得不腾出时间，专门进行项目的优化与重构。因此，无论什么时候都要记住“设计优先”这一原则。磨刀不误砍柴工，前期良好的设计，会给项目开发以及后期维护带来极大的收益。</p><p>“设计优先”这一原则，要求写别人看得懂的设计。我们了解一个系统最直接的途径就是结合设计文档与代码。在实际工作中，很多同学的设计文档让大家看得一头雾水，通篇下来，看不出系统整体的设计思路。其实，设计的过程是一种智力上的创造，我们更希望它能成为个人与集体智慧的结晶。如何才能让我们的设计变得通俗易懂？我个人认为，设计应该尽量使用比较合理的逻辑，进而把设计中的一些点组织起来。比如可以使用从抽象到具体，由总到分的结构来组织材料。在设计过程中，要以需求为出发点，通过合理的抽象把问题简化，讲清楚各个模块之间的关系，再详细分述模块的实现细节。做完设计之后，可以发给比较资深的RD或者PM审阅一下，根据他们的反馈再进行完善。好的设计，一定是逻辑清晰易懂、细节落地可执行的。</p><h2 id="原则八：P-PC平衡"><a href="#原则八：P-PC平衡" class="headerlink" title="原则八：P/PC平衡"></a>原则八：P/PC平衡</h2><p>“P/PC平衡”原则，即产出与产能平衡原则。伊索寓言中讲述了一个《生金蛋的鹅》的故事。产出好比“金蛋”，产能好比“会下金蛋的鹅”。“重蛋轻鹅”的人，最终可能连产蛋的资产都保不住；“重鹅轻蛋”的人，最终可能会被饿死。产出与产能必须平衡，才能达到真正的高效能。为了让大家更清晰的了解这一原则，本文举两个例子。</p><p>从系统的角度看，每一个系统都是通过持续不断地叠加功能，来实现其产出，而系统的产能是通过系统架构的可扩展性、稳定性等一系列特性来表征。为了达到产出与产能的平衡，需要在不断支持业务需求的过程中，持续进行技术架构层面的优化。如果一味地做业务需求，经过一定的时间，系统会越来越慢，最终影响业务的稳定性；反之，一个没有任何业务产出的系统，最终会消亡。</p><p>再从RD的角度来看这个问题，RD通过做需求来给公司创造价值，实现自己的产出。而RD的产能是指技术能力、软素质、身体健康状况，有这些资本后，我们才能进行持续的产出。在日常工作中，我发现很多RD往往只重视产出。他们也在很努力地做项目，但是每一个项目所使用的方法，还是沿用自己先前一贯的思路。最终，不仅项目做得一般，还会抱怨自己得不到任何成长。这就是P/PC不平衡的体现。如果能在做项目的过程中，通过学习和总结持续提升自己的技术能力和软素质，并将其应用于项目实施交付中，相信一定会取得双赢的结果。</p><p>“P/PC平衡”原则还适用于很多其他的领域，例如团队、家庭等，我本人也非常推崇这一原则。希望大家也能将其作为自身的一项基本原则，努力寻找到产出与产能的平衡点。</p><h2 id="原则九：善于提问"><a href="#原则九：善于提问" class="headerlink" title="原则九：善于提问"></a>原则九：善于提问</h2><p>“善于提问”，首先要勤于提问。求知欲源于好奇心，是人类的一种本能。在工作中要养成勤于提问的好习惯，不懂就问，不要因为自己一时懒惰或者碍于情面，就放弃提问的机会。当遇到不同的观点时，也要礼貌地问出来。波克定理告诉我们，只有在争辩中，才可能诞生最好的主意和最好的决定。</p><p>在设计评审、代码评审这类体现集体智慧的活动中，遇到有问题的地方一定要提出来。我经常看到，很多同学评审全程一言不发，这就是浪费大家的时间。设计评审的目的，是让大家针对方案提出改进意见并达成一致，如果全程“打酱油”，那就失去了评审的意义。我们鼓励大家多提问，把自己内心的疑惑表达出来，然后通过交流的方式得到答案。</p><p>“善于提问”，还要懂得如何提问。为什么同样是参加设计评审，有的同学就能提出很好的问题，而有的同学却提不出任何问题？除了知识储备、专业技能、经验等方面的差异外，还有一点很重要：这就是批判性思维。</p><p>批判性思维主张通过批判性思考达到理性思维，即对事物本质的认知和掌握。关于如何进行批判性思维，大家可以参考一些经典的图书如《批判性思维》、《学会提问》等。在工作中面临一项决策时，会有各种各样的意见摆在你面前，所以我们必须要学会使用批判性思维来进行分析，每个人的论据是否可靠，论证是否合理，是否有隐含的立场。同样，在阅读一篇技术博客的时候，也要使用批判性的思维，多问几个为什么，作者得出的结论是否合理？论据是否充分？只有这样，才能不断地获取真正的知识。</p><h2 id="原则十：空杯心态"><a href="#原则十：空杯心态" class="headerlink" title="原则十：空杯心态"></a>原则十：空杯心态</h2><p>“满招损，谦受益”，“空杯心态”是最后一项原则。我觉得这也是一个人能够持续成长的前提。做技术的人，骨子里通常有股傲气，并且会随着资历、成绩的提升而不断增加。初入职场的小白，可能会非常谦虚，但是工作几年之后，专业技能逐步提升，可能还取得了一些小成就，人就会越来越自信。这时候，如果不能始终保持“空杯心态”，这种自信就会逐步演变为自满。自满的人，往往表现为工作中把别人的建议当成是批评，不接受任何反对意见，学习上也缺乏求知的动力，总是拿自己的长处去跟别人的短处做比较。其实每个人多少都会有一些自满，可怕的是不知道甚至不愿承认自满。</p><p>保持“空杯心态”这一原则要求我们时刻进行自我检视与反省。在工作中，多去跟不同级别的同学聊一聊，或者做一个360度评估，这有助于我们更加客观地评价自己。在横向对比中，多向那些优秀的同学看齐，学习他人的优点。很多同学在设计评审或者代码Review过程中，针对别人提出的问题与建议，往往都采用一种对立的态度。错误地认为别人是在挑刺，是在针对自己。诚然，在某些方面，我们可能确实比其他人想得深入，但是这不代表在所有方面都能考虑周全。对于别人的建议，建议使用“善于提问”原则里提到的批判性思维仔细分析一下，虚心地吸取那些好的建议。</p><p>工作学习就像“练级打怪”，技能储备的越多，就越容易走到最后。保持空杯心态，可以让我们发现很多以前注意不到的新能力，我们要做的就是努力学习它，将它们转化为自己能力库的一部分。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上，是我总结的工作与学习的十条基本原则。其中有的侧重于个人做事情的方法，如“Owner意识”、“时间观念”、“以终为始”、”闭环思维”；有的侧重于团队工作标准规范，如“保持敬畏”、“事不过二”、“设计优先”；有的侧重于团队或个人效能提升，如“P/PC平衡”、“善于提问”、“空杯心态”。这些原则是我多年在工作与学习中，不断总结得来的经验。希望在大家面临选择时，这些原则能够起到一定的帮助和指导作用。</p><p>以原则为中心地工作与生活，让自己与团队变得更加强大。</p>]]></content>
    
    <summary type="html">
    
      参与感，方法论
    
    </summary>
    
      <category term="感悟" scheme="http://chen-tao.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="感悟" scheme="http://chen-tao.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="人生" scheme="http://chen-tao.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="通用技能" scheme="http://chen-tao.github.io/tags/%E9%80%9A%E7%94%A8%E6%8A%80%E8%83%BD/"/>
    
      <category term="能力提升" scheme="http://chen-tao.github.io/tags/%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>数据驱动还是数据知情</title>
    <link href="http://chen-tao.github.io/2018/06/10/which-is-better-data-driven-or-data-informed/"/>
    <id>http://chen-tao.github.io/2018/06/10/which-is-better-data-driven-or-data-informed/</id>
    <published>2018-06-10T10:52:38.000Z</published>
    <updated>2018-06-10T11:12:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://www.startupgrind.com/blog/which-is-better-data-driven-or-data-informed/" target="_blank" rel="external">https://www.startupgrind.com/blog/which-is-better-data-driven-or-data-informed/</a><br>翻译：ChenTao 有删改<br>informed 这个词很难找到对应的中文，在决策的语境下，叫”参考”可能比较弱，这里选择了”知情”，仅供参考。<br>万事万物没有绝对好坏，理性思考，找到适合自己现有产品的「数据原则」改进产品才是王道。</p></blockquote><p>数据驱动这个词已经开始成为一个流行语，堆积在其他技术术语的顶部。所以，让我先把所有人都放在同一页面上。</p><h1 id="数据驱动意味着什么？"><a href="#数据驱动意味着什么？" class="headerlink" title="数据驱动意味着什么？"></a>数据驱动意味着什么？</h1><p>数据驱动意味着数据是团队和公司决策过程的中心。决策者主要以（有时仅仅是）数据作为操作标准，并且可以在没有人参与的情况下做出一些决定。</p><p>以下是您通常从数据驱动的公司收到的一些信息：</p><ul><li>“让我们A / B测试这个并且实现更好结果的版本。”</li><li>“除非你有数据，否则不要跟我说话。”</li><li>“我们只是按照数据告诉我们的。”</li></ul><p>真正的数据驱动型组织将贯穿整个团队和功能的这一过程。这意味着每个团队（产品，市场营销，客户成功，运营等）都将数据集中用于所有决策。</p><h2 id="有什么好处？"><a href="#有什么好处？" class="headerlink" title="有什么好处？"></a>有什么好处？</h2><h3 id="消除决策中的人为偏差"><a href="#消除决策中的人为偏差" class="headerlink" title="消除决策中的人为偏差"></a>消除决策中的人为偏差</h3><p>作为人类，我们有许多认知偏见。事实上，我的导师<a href="https://medium.com/u/aae159ab8ea1" target="_blank" rel="external">Misha Chellam</a>创建了<a href="https://medium.com/tradecraft-traction/flashcards-to-learn-168-cognitive-biases-4c37f3418f15" target="_blank" rel="external">flashcards</a>，以帮助人们记住他们。</p><p>数据有助于让团队成员和利益相关者在同一页面上做出更少的判断。</p><h3 id="耗时更少"><a href="#耗时更少" class="headerlink" title="耗时更少"></a>耗时更少</h3><p>你们中有多少人参加了三小时的会议，人们反复讨论，没有妥协的迹象？</p><p>有时候，我们只会为<a href="https://www.forbes.com/sites/derosetichy/2013/04/15/what-happens-when-a-hippo-runs-your-company/" target="_blank" rel="external">HiPPO</a>（highest paid person’s opinion）进行讨论和争论，以作出最终决定。（是的，我知道你的感受。）</p><p>一个<a href="http://mitsloanexperts.mit.edu/erik-brynjolfsson-on-big-data-a-revolution-in-decision-making-improves-productivity/" target="_blank" rel="external">麻省理工学院的研究</a>已经证明，是数据驱动的有它的好处。Erik Brynjolfsson教授和他的同事研究了179家大型上市公司，并得出结论认为，这些公司比其竞争对手的生产率和盈利能力高出5％。</p><p>但是，数据驱动也有其缺点。</p><h2 id="有什么缺点？"><a href="#有什么缺点？" class="headerlink" title="有什么缺点？"></a>有什么缺点？</h2><h3 id="它需要大量的数据才能做出准确的决策"><a href="#它需要大量的数据才能做出准确的决策" class="headerlink" title="它需要大量的数据才能做出准确的决策"></a>它需要大量的数据才能做出准确的决策</h3><p>你必须警惕异常畸变。异常值（<a href="http://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm" target="_blank" rel="external">Outliers</a>）是与平均值完全不同的数据点。在游戏中，正面的异常值被认为是“ 鲸鱼（<a href="https://venturebeat.com/2013/03/14/whales-and-why-social-gamers-are-just-gamers/" target="_blank" rel="external">whales</a>）”。这些客户大量购买或经常使用它们，为公司带来了大量收入。在我以前的公司，我们甚至创造了“捕鲸（whale hunting）”这个词。</p><p><img src="https://cdn.techinasia.com/wp-content/uploads/2017/11/Data-informed-1.png" alt=""><br>在其他行业，这些可能是那些使用你的产品解决与大多数客户不同的问题的客户。他们的行为如此不同以至于他们应该被排除在用于制定关于普通客户的决策数据之外。只有几个数据点和一些异常值的数据集可能会导致您的公司不应该去的地方。</p><h3 id="它需要具有数据科学知识和大量资源的人才能发挥作用"><a href="#它需要具有数据科学知识和大量资源的人才能发挥作用" class="headerlink" title="它需要具有数据科学知识和大量资源的人才能发挥作用"></a>它需要具有数据科学知识和大量资源的人才能发挥作用</h3><p>对于刚刚启动数据科学部门的创业公司和大型组织来说，由于缺乏能力和资源，可能很难完全进行数据驱动。您当前的员工可能没有足够的知识来构建基础架构，或者您甚至可能没有任何具有数据专业知识的人员。</p><p>在我以前的公司，我们有10位数据科学家。在Kulina，我们只有0.5人拥有专业知识（我自己和我们的技术总和）。</p><h2 id="我们收集数据的方式仍存在偏差"><a href="#我们收集数据的方式仍存在偏差" class="headerlink" title="我们收集数据的方式仍存在偏差"></a>我们收集数据的方式仍存在偏差</h2><p>大多数时候，what people say isn’t <a href="https://www.nirandfar.com/2017/02/dont-ask-people-what-they-want-observe-how-they-act.html" target="_blank" rel="external">what they do</a>。所以，如果我们通过隐式询问来收集数据，我们就会冒险做出有关错误信息的决策。例如，在Uber和#deleteuber运动的丑闻时期，我的大多数朋友<em>说</em>他们再也不会使用优步。当Lyft（Uber在美国的主要竞争对手）实施附加费时，他们都回去（继续使用Uber）了！</p><p>另一个很好的例子是，当我们试图找出我们想花更多时间和金钱吸引用户的社交媒体平台时。我们发出了一个调查问卷，结果出乎意料。</p><p>我们看到了名单上的Facebook，这是预期的。然而，让我们感到困惑的是，Google+名列第二（no hard feelings, Google）。</p><p><img src="https://cdn.techinasia.com/wp-content/uploads/2017/11/Data-informed-2.png" alt=""><br>一些团队成员问他们是否应该花更多时间来建立Google+的存在。“也许我们不太了解我们的用户，”一位团队成员提到。由于数据驱动，我可能会着重指出这一点。但像往常一样固执，我与另一位产品营销经理讨论了什么可能会出错。</p><p>我们认为，也许我们的用户可能不了解Google和Google+之间的区别。事实上，当我们更深入地看待问题的提问方式时，我们发现了一些线索来支持这个问题。我们在问卷中使用了Google+这个词，而不是使用Google+图标。如果你没有密切关注，你可能会认为我们问你是否使用过Google！</p><h1 id="什么是数据知情决策（data-informed-decision）？"><a href="#什么是数据知情决策（data-informed-decision）？" class="headerlink" title="什么是数据知情决策（data-informed decision）？"></a>什么是数据知情决策（data-informed decision）？</h1><p>掌握数据是指将数据作为决策制定的唯一<em>因素</em>，而不是将其作为整个基础。这种决策可以让顾客体验，直觉，品牌一致性和HiPPO等其他因素起到带头作用。</p><h2 id="有什么好处？-1"><a href="#有什么好处？-1" class="headerlink" title="有什么好处？"></a>有什么好处？</h2><p>好处是数据现在受到挑战（challenged）。我们不是单纯依据数据做出决定，而是用它来创建一个假设。这是因为不管数据有多好，都有其局限性。这只是现实的快照，并没有描绘出我们客户旅程和行为的全貌。</p><blockquote><p>我觉得有必要在这里贴下原文，很精彩。（译者按）</p></blockquote><p>（We don’t purely base our decisions on data but use it to create a hypothesis. This is because no matter how good data is, it has its limitations. It’s just a snapshot of reality that doesn’t paint the full picture of our customer journey and behavior.）</p><p>通过了解数据，我们不得不使用其他因素来帮助做出更好的决策，包括我们自己的判断。</p><p>（By being data-informed, we are forced to use other factors to help make better decisions, including our own judgment.）</p><p>例如，在我以前的游戏公司，周末我们的收入总是很高，因为这是用户玩游戏的时候。但是在某个特定的星期一，有一位新产品负责人就那个周末的低收入接近了我。他非常担心。</p><p>我怀疑我们的收入下降了，因为我们在上周末进行了销售。过去五次我们销售的产品也出现同样的效果。如果我们之前看过同样的周期，我们的平均水平实际上会更好。<br><img src="https://cdn.techinasia.com/wp-content/uploads/2017/11/Data-informed-3.png" alt=""></p><p>事实上，Facebook的新闻馈送实际上是在没有数据驱动的情况下实施的。Facebook产品设计师<a href="https://medium.com/u/786bc50498eb" target="_blank" rel="external">Adam Mosseri</a>及其团队当时决定创建<a href="https://www.youtube.com/watch?v=bKZiXAFeBeY" target="_blank" rel="external">没有数据</a>（without data）的新闻馈送。这种变化引起了很多负面反应，许多用户都很生气。有些人甚至创建了一个名为“ <a href="http://www.businessinsider.com/mark-zuckerberg-joins-facebook-group-i-automatically-hate-the-new-facebook-home-page-2009-10/?IR=T" target="_blank" rel="external">我自动讨厌新的Facebook主页”的Facebook组织</a>。</p><p>但是根据Mosseri的说法，“在一天结束时，我们必须要有一个勇于在没有数据的情况下做出大胆的决定。”</p><p>但这并不意味着以数据为依据的决策没有缺点。</p><h2 id="有什么缺点？-1"><a href="#有什么缺点？-1" class="headerlink" title="有什么缺点？"></a>有什么缺点？</h2><p>在做出决定之前，掌握数据需要大量的时间，讨论和分析。结论也不容易形成。但请记住，在一天结束的时候，“世界上所有的数据都不能解决一个根本不好的产品，”前SoundCloud高级产品经理<a href="https://medium.com/u/6be9b065c847" target="_blank" rel="external">Andy Carvell说</a>。</p><p>为了创新并为我们的客户构建合适的产品，我们不能只坐在房间里看着数据和图表。</p><p>通过与客户交谈收集定性反馈信息，通过可用性测试观察他们的挣扎情况，以及确定客户聘用您的工作是构建产品的关键。</p><h1 id="我的建议（recommendations）"><a href="#我的建议（recommendations）" class="headerlink" title="我的建议（recommendations）"></a>我的建议（recommendations）</h1><p>对于小公司，你应该始终致力于更多的数据驱动。您可能不会使用您收集的数据（甚至根本收集数据）。你拥有的数据越多，你就会产生更好的假设。</p><blockquote><p>小团队产品现状问题较多且需要快速改进，用data-driven可以快速确定改进目标，提高改进效率（译者按）</p></blockquote><p>（For larger companies, you should be able to make bold decisions that not only move your key metrics but also improve customer experience. We should use data to help us make better decisions, but not rely on it 100 percent.）</p><p>对于大公司，您应该能够做出大胆的决定，不仅可以移动关键指标，还可以改善客户体验。我们应该使用数据来帮助我们做出更好的决策，但不能100％地依靠它。</p><blockquote><p>大团队的产品一般都较为稳定，每一次改进决策需要更为慎重，所以需要更多的维度来衡量改进产品（译者按）</p></blockquote><p>（For smaller companies, you should always aim to be more data-driven. You probably don’t utilize the data you collect (or even collect them at all). The more data you have, the better hypotheses you will generate.）</p>]]></content>
    
    <summary type="html">
    
      关于data-driven和data-informed
    
    </summary>
    
      <category term="感悟" scheme="http://chen-tao.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="感悟" scheme="http://chen-tao.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="人生" scheme="http://chen-tao.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="通用技能" scheme="http://chen-tao.github.io/tags/%E9%80%9A%E7%94%A8%E6%8A%80%E8%83%BD/"/>
    
      <category term="能力提升" scheme="http://chen-tao.github.io/tags/%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>一些CR的缩写</title>
    <link href="http://chen-tao.github.io/2018/06/01/code-review-acronyms/"/>
    <id>http://chen-tao.github.io/2018/06/01/code-review-acronyms/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-06-01T07:11:09.595Z</updated>
    
    <content type="html"><![CDATA[<p><strong>PR</strong>: Pull Request. 拉取请求，给其他项目提交代码</p><p><strong>LGTM</strong>: Looks Good To Me. <del>朕知道了</del> 代码已经过 review，可以合并</p><p><strong>SGTM</strong>: Sounds Good To Me. 和上面那句意思差不多，也是已经通过了 review 的意思</p><p><strong>WIP</strong>: Work In Progress. 传说中提 PR 的最佳实践是，如果你有个改动很大的 PR，可以在写了一部分的情况下先提交，但是在标题里写上 WIP，以告诉项目维护者这个功能还未完成，方便维护者提前 review 部分提交的代码。</p><p><strong>PTAL</strong>: Please Take A Look. 你来瞅瞅？用来提示别人来看一下</p><p><strong>TBR</strong>: To Be Reviewed. 提示维护者进行 review</p><p><strong>TL;DR</strong>: Too Long; Didn’t Read. 太长懒得看。也有很多文档在做简略描述之前会写这么一句</p><p><strong>TBD</strong>: To Be Done(or Defined/Discussed/Decided/Determined).<br>根据语境不同意义有所区别，但一般都是还没搞定的意思</p><blockquote><p>reference<br><a href="https://farer.org/2017/03/01/code-review-acronyms/" target="_blank" rel="external">LGTM? 那些迷之缩写</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      如何好好的装B
    
    </summary>
    
      <category term="Git" scheme="http://chen-tao.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://chen-tao.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>饿了么成为外卖第一后，美团惊天逆袭真相</title>
    <link href="http://chen-tao.github.io/2018/06/01/eleme-meituan-tips/"/>
    <id>http://chen-tao.github.io/2018/06/01/eleme-meituan-tips/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-06-01T07:25:08.740Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>谁值得我学习？（谁是对标？）<br>谁在抢我的饭碗？（谁是对手？）<br>谁可以在一起合作？（谁是对友？不只是队友）</p></blockquote><p>内容来源：2018年3月25日，北京大学营销升级总裁研修班课上，灰度认知社创始人曹升先生主讲《认知战法》。笔记侠作为课程笔记合作方，经主办方和讲者授权发布。</p><p>今天分享的主题是“认知战法”，非常高兴能有这个机会跟大家做一个交流。</p><p>一、人是怎么做决策的？</p><p>为什么卡尼曼这样的心理学家会获得诺贝尔经济学奖？</p><p>原因是心理学家告诉我们，人的决策是非理性的，做决策时人的第一反应是人性，第二反应是认知。</p><p>1. 人性层面</p><p>人是凭着人性做决策的，能触动人性、激发人性、顺应人性的相关产品，消费者容易决策，容易火爆。比如靠对美的追求、品牌感强而火爆的化妆品；符合人性的三俗广告；陌生人社交软件等。</p><p>有一个非常奇怪的心理现象，越是重大的决策，往往越是靠直觉。</p><p>2. 认知层面</p><p>为什么有些公司获客成本高？一言以避之，那就是“功能营销”。</p><p>功能营销的弊病就是，一上来就硬介绍产品功能，把客户带到功能认知上去，决策成交率会越来越低。</p><p>为什么呢？因为，做认知决策时，人会考虑利弊，会考虑多种可能性与替代品，在多种事物中进行关联、比较、选择，最终决策。所以决策周期越来越长，决策力度越来越低。</p><p>要想压缩认知决策周期，就要在产品设计和营销环节，更多的要让用户产生一个“认知”，但是决策的时候，要把用户往“人性”方向去推，决策会更快，更能实现规模化销售。</p><p>换成大白话说，理性诉求，感性表达，才是高效率的营销。比如，你卖的是房子，而客户买的是家，以及家的“认知”与“人性”的幸福感。</p><p>3. 简而言之</p><blockquote><p>人性决策 = 情绪触发 + 情感触发 + 功利触发</p><p>认知决策 = 认知关联 + 认知比较 + 最优化选择</p></blockquote><p>与认知决策周期相比，更要命的是，功能营销没有办法抓住客户的注意力。缺少用户触点，就无法产生自然流量。</p><p>自然流量是指你没有做广告，就有客户自己找上门来而形成的流量。是否有自然流量，是区分营销效果的重要标志。</p><p>二、外卖大战的商业认知 </p><p>外卖行业用互联网工具来提升商业价值，但是商业逻辑的底层还是传统产业。它似乎没有那么多技术含量，然而在我们不认为外卖是个大产业的时候，饿了么做到了九十多亿美元的企业估值。</p><p>看过一个市场数据，美团外卖大概占市场份额60%多一点，饿了么占30%多一点，两强之后再剩下的那些品牌总和也不过就几个点了。</p><p>为什么整个中国只有美团和饿了么两家占这么大的份额，其他人就做不起来呢？</p><p>1. 饿了么是怎么起来的？</p><p>饿了么团队创业时都还是大学生。他们为什么会进入外卖行业？</p><p>几个年轻的大学生要生存，就想做一件事能赚钱。大学生没有资源，什么都干不了。到了中午饿了，好像吃饭是痛点，是刚需，思路就跳到这里来了：我们在这里创业行不行啊？一下子脑洞大开。</p><p>饿了么的商标是大有讲究，它和红牛、脑白金都有一个很狡猾的地方——场景驱动。</p><blockquote><p>最早用这一套路的是著名饮料品牌红牛，“困了累了喝红牛”。红牛=极限，它主打极限运动精神，但是广告词打的却是场景驱动，“困了累了”是一种用户场景。</p><p>脑白金也一样狡猾，“送礼就送脑白金”，你都不知道产品有什么功能？送的是什么东西？它打的也是用户场景。</p><p>“小饿小困就喝香飘飘”，打的也是场景。</p></blockquote><p>饿了么，硬生生地把一个场景，变成了它的商标，把两个不相关的事物关联起来了。于是，经过一段时间的沉淀，在用户心智中，饿了么=外卖。</p><p>2. 谁是饿了么第一个对标？</p><p>SHERPA’S，中文名“食派士”。这个名字很不容易记住。在中国做生意，用户对中文品牌无感那就真的输在起跑线上了。</p><p>① 食派士起家的原因</p><p>食派士是一个叫马克的美国人做的，他是中欧国际工商学院的MBA学生。他在中国吃饭比较痛苦，有三个原因：</p><p>第一，不熟悉中餐菜名典故。餐馆服务生往往不会说英语。他是老外懂一点点中文，但是一看菜单就心惊肉跳，什么叫“蚂蚁上树”，什么叫“狮子头”，什么叫“鱼香肉丝”，没有蚂蚁，也没有鱼啊，这不是骗我吗？</p><p>第二，他作为一个外国人，在餐馆吃饭会有人围观。用户体验非常不好，他不喜欢这种感觉。</p><p>第三，西餐厅数量稀少。他作为一个外国人更喜欢的是西式餐厅，或者就是酒吧这样的地方做的一些西餐。</p><p>但是问题来了，如果是中餐，方圆百米内很可能有好几家店，但是如果想买到西餐，可能1公里外都没有这样的店，到3公里外才会有2家店。</p><p>他的创业基于什么？也是场景（外国人就餐体验差，这是痛点）。</p><p>他对外国人就餐的痛点有了一个差异化认知，因为有这三个痛点，所以做这个生意的商业逻辑是通的。</p><p>他做的生意也是高度差异化的，主要在上海、苏州、北京3个城市展开业务。1998年开始做，1999年正式运营，应该是在中国有品牌的外卖鼻祖。</p><p>② 食派士的比较优势是什么？</p><p>它是外国人认可的、高端的中国外卖第一品牌，尽管是小众，也是一个用户心智接受的品类第一。</p><p>差异化就意味着避免了跟行业老大正面交锋，有效地避开了价格战。品类受消费者认可，可以有自然流量，可以提价，还避开了红海一样的恶性竞争。</p><p>食派士在三个城市开了3个平台，服务了约600家的企业，客单价在300元左右。</p><p>它是中国客单价最高的外卖平台之一了，有自身的比较优势，但缺点也同样明显，就是本地化运营、互联网化运营相当地不充分，没能抓住外卖大风口，顺势做大做强。2017年食派士被百盛中国收购。</p><p>③ 饿了么向食派士学什么？</p><p>食派士最土的地方在于，竟然到处发小册子。在广场上看见一个老外就送他一份宣传单，上面有中文和英文的说明。食派士常年坚持发小册子，做得不错，因为客单价高，即使不做互联网运营也能活得很滋润。</p><p>饿了么学习它印小册子做推广，但是创始团队都是学生，没有钱，怎么印1万份？</p><p>他们就想了个办法，找到一家别克4S店，联合印制广告，免费帮人派发，这样就把小册子的成本覆盖了。</p><p>这里要说一个非常重要的概念。</p><p>商业认知有三大战场：产品战场、心智战场、金融战场。</p><p>饿了么印宣传单的举动就是在金融战场打的，拿自己不存在的比较优势找别克4S店融了一笔宣传费。非常高明，饿了么主要卖产品赚钱，没想到在没有卖产品的时候也能赚一笔钱。</p><p>“原来我们公司除了卖产品卖服务，其他也有地方是可以卖钱的”，这就是金融。</p><p>是不是脑洞大开？</p><p>很多人都误以为，金融就是以钱为产品的买与卖，我是做产业的，跟我关系不大。这是狭义的金融，是对金融的重大误解。</p><p>我提一个概念，建议大家记下来，我们所理解的金融，是指跨时空的价值交换。</p><p>如果你不懂这个，你就完全不懂金融。完全不知道还有大量的资源被你浪费掉了。</p><p>3. 谁是饿了么第一个对手？</p><p>第一个竞争对手叫小叶子当家。</p><p>① 认知优势</p><p>2007年小叶子当家就覆盖了上海大部分的外卖，它对标是美国的一家公司，翻译过来叫校园美食。</p><p>小叶子当家找对标很准，校园美食已经有完整的运营方案了。饿了么学一个食派士，还只学了一点点，没有完整的模仿方案。</p><p>非常可悲的是，这就是饿了么的学习能力与认知优势了：</p><blockquote><p>饿了么学习了一个高端品牌，但它的外卖商家产品价格以20元左右居多；</p><p>小叶子当家学的是美国的校园美食，但它的外卖商家产品价格有相当一部分竟然在50元左右，客单价20元左右的占比没有形成绝对份额。</p></blockquote><p>两家所学习的对标与实际的行为，完全错位了。</p><p>上海物价再高，你主打的第一对象是学生，价格就要符合他们的消费水平，所有的东西都要围绕这个焦点来配套。</p><p>假设我是一个大学生，我自己日常吃外卖18元，如果我请女朋友吃外卖，会吃50元的么？50元的利和弊是什么呢？这个价格为什么不请她去饭店吃呢？</p><p>你看，用户就进入认知决策的领地了。</p><p>这里的一个启示：创业起步的时候，一定要单点突破。产品与服务的对象越窄越好，主打核心人群的核心利益与核心需求，把他们打穿打透，不要怕以后其他非核心人群不会来。</p><p>② 价格战</p><p>同质化竞争，结局必然是价格战。</p><p>小叶子当家和饿了么开始捉对厮杀了，第一个上来的手段糟糕了，小叶子当家作为细分市场先行者，出了狠手，大量补贴，送冰红茶，送荷包蛋。</p><p>饿了么这帮家伙只有5万左右的资金，怎么跟人家小叶子注册资本100万去拼呢？ </p><p>进入了别人的势力范围，别人拿补贴打你，打价格战了怎么活？</p><p>③ 执行优势</p><p>要想从残酷的价格战中生存下来，就必须要选择一个战场，通过高效运营、高效执行进行反击：产品战场、心智战场、金融战场，从哪个下手？</p><p>A.产品战场</p><p>只有同质化才会打价格战，送餐体验上饿了么并不占优势。</p><p>在产品端能不能跟小叶子当家 PK 一把？</p><p><img src="../resources/9C686A4722547A6C4150688B8C8044B6.jpg" alt=""></p><p>那个时候技术上比较落后，大部分的订餐是靠打电话、短信联系，电话经常占线，记错内容。这是痛点刚需。饿了么在PC端做了一套商家系统，小叶子当家也做了，但是饿了么的产品更人性化。</p><p>B.金融战场</p><p>前面我们专门强调了，不要认为只有互联网的企业或者从业人员才具有互联网思维，那也是错的，互联网也是金融。</p><p>因为，互联网最善于做跨时空的价值交换，一边免费把流量拉过来，免费必然亏损，但是不怕，另一边可以把流量变现，就能赚钱。</p><p>流量导入、关系沉淀、价值变现，已然是互联网的标准作业流程了。</p><p><img src="../resources/6B4BFBC8C885BF194FE7D305ED5F9F95.jpg" alt=""></p><p>这里有很多细节，饿了么明显比小叶子当家懂互联网思维，更懂金融。</p><p>除了产品本身，饿了么还能创造哪些本来并不存在的价值？这些价值与谁可以交易、互换，甚至可以直接变现？</p><p>第一，缩短交易流程，提升商家效率。</p><p>小叶子当家流程：有订单了，需要确认、接收，再按一个打印。</p><p>饿了么流程：有订单了，一键打印。</p><p>不要小看这种微不足道的微小进步。</p><p>一是这种进步是以客户为中心的，以效率提升为驱动的，说着容易做起来就难了。有不少企业把客户思维放在口头上，无法在产品上直接落地；</p><p>二是因为无论2C，还是2B，在互联网上，每多经过一个页面，流失率比想象的多得多，经过5个页面，几乎就没有客户转化率了。</p><p>第二，提供数据分析给重点商家。</p><p>张旭豪这个大学生团队学习能力真得很强，他们做了一些辅助性工作，把几十个重点商家上个月的经营情况做了分析（在什么时间点订的餐比较多，什么菜是热门菜？）给到商家，帮助他们改善经营，提升效率。</p><p>他们拿数据分析做了交换：</p><blockquote><p>本来饿了么提成是8%，现在我希望你根据上个月的量预付下个月的8%。我给你免费做这个分析，不多收一分钱，那个8%也是多退少补的。万一卖得少就退给你，卖得多后面再补给我。</p></blockquote><p>饿了么又凭空多融了一笔运营费用，而且提前一个月拿到了。这就是金融。</p><p>第三，开发人性决策，学习跨界对标。</p><p>还有一个很牛的，研究另外一个跨界对标——在网上卖软件的SaaS。</p><p>注：SaaS：软件即服务（英文：Software as a Service），21世纪初期兴起的一种新的软件应用模式。</p><p>根据国外卖SaaS的经验，发现一个特点：</p><blockquote><p>收取8%费用的时候，客户会进入认知决策，心里会关联、比较：</p><p>平台帮我卖的量不够的时候，我付你8%对我没有意义，你帮我赚了92%意义不大，但是量很多的时候觉得又心疼，这怎么办？</p></blockquote><p>SaaS的解决办法是收取年费，饿了么也学习了这一点，按销量收取4800元的年费。这是不是又凭空多融了一笔运营费用，而且提前一年拿到了。这也是金融。</p><p>C.心智战场</p><p>用户一旦形成了“认知”，就要想办法往“人性”层面去推动。收取年费这种价格体系一旦商家接受之后，就会在商家心智里发酵，形成连锁反应。</p><p><img src="../resources/A90F97BF56CBD2FF34D78BF1DAC43086.jpg" alt=""></p><p>第一，商家会从认知决策中，计算出来省钱了；</p><p>第二，这笔钱已经花完了，如果再找其他的渠道，再给别人8%就不划算了。</p><p>为了节省成本，他们甚至把其他的渠道客户也往这个渠道拉。</p><p>第三，捡便宜是人的天性。一次性付完4800元以后，商家的客户量交易量在增长，却不必再付额外费用，商家觉得自己捡便宜了。</p><p>这里注意很重要的一点，千万不要随便降价促销。因为降价促销会对品牌造成巨大伤害，使客户产生“每年在正常时间买货，不如等到在降价时间点买货”的期待。这样客户对你的品牌认知会越来越差。</p><p>对于客户来说，便宜不重要，捡便宜比便宜本身更重要。你要给客户一种在某种情况之下可以捡便宜的机会，可以名正言顺的推销和降价，于是客户量就自然增长了。</p><p>饿了么在心智战场做了很多事情，比如他们在2008年的7月17号就注册了一个很容易记的域名，www.ele.me。显然，这都是面向大学生心智而精心设计的。</p><p>他们通过编写代码在交大BBS里发站内信进行推广，发完之后一下就爆了，产生了大量的自然流量。这也是顺应大学生心智的推广行为。</p><p>在这样情况之下，大概打了九个多月，小叶子当家就从上海交大闵行校区这个外卖市场退出了，都没有顽强抵抗。</p><p>因为认知失误，多少年后，小叶子当家创始人与某一投资人闲聊时，说我们完美的错过外卖风口，当时就完全没想过外卖会是一个大风口。</p><p>显然，在商业三大认知战场（产品战场、心智战场、金融战场），饿了么建立了自身的比较优势，相对竞争对手，学习能力更强，执行力更强。</p><p>4. 谁是饿了么第一个对友？</p><p>我这里写的是对友，而不是队友。为什么？</p><p>因为，我们常常钻在自己的行业中出不来，找不到自己的一个正确的，特别是有可能是异业的对友。我写成对友，就是要提醒大家不要局限在自己行业内找合作伙伴。</p><p>饿了么的第一个对友，应该是别克4S店。</p><p>早期最大的对友是朱啸虎，在关键时刻给了他们很大的支持，投了100万美元。</p><p>朱啸虎确实眼光独到，在外卖完全没有展示出风口特征时，就提前布局了。</p><p>朱啸虎说过一段话，大意是说：</p><blockquote><p>志存高远、想当独角兽的创业者，一定要在行业5%-10%认可的时候，就开始创业，而一个优秀的早期投资人，会在行业10%-15%认可的时候，就开始投资。</p></blockquote><p>可见，优秀的企业家，命中注定就是孤独的。你开始干一件事的时候，90%的人反对你，打击你，挖苦你。但你要坚持自己的信念。</p><p>5. 品类第一</p><p>2008年创立，2011年朱啸虎投了第1笔钱，到了2013年，大名鼎鼎的红杉资本投资了饿了么。以此为标志，饿了么在中国外卖品类第一的态势正式形成。</p><p>这个品类第一是怎么来的？</p><p>起步是上海交大闽行校友外卖品类第一。这是一个又细又小的一个区域细分市场。</p><p>然后主打上海校园外卖品类第一。品类外延又升级了。</p><p>最后再逐步扩展到全品类第一，包括校园、白领、住家。</p><p>品类是商业主权，不是规划出来的，也不是靠广告砸出来的。它是在消费者心智中自然建构出来的。从单点突破的小品类，是可以成长为中品类、大品类第一的。</p><p>在品类第一的升级过程中，需要注意的是，消费者心智一旦进入认知决策，就会有认知关联与认知比较。</p><p>这个显然需要精心设计，学费是一定要交的，但可以少交一点。</p><p>2013年，阿里系淘点点、美团外卖杀进来了。2014年百度外卖杀进来了。无利不起早。这就是整个行业进入高速增长期的典型标志。</p><p>饿了么默默耕耘了5年的外卖市场，从2010年1.5亿规模，涨到2014年近100亿市场规模。</p><p>2013年以前，有美团，还有大众点评。它们都是以到店堂食流量为主的品类。</p><p>2013年起，随着市场规模激增，有了行业成果，饿了么正式开创了一个餐饮新品类：外卖。以前的外卖只是堂食微不足道的一个补充，现在成了并列且高速增长的一条新赛道。</p><p>进入2017年，这个品类又发生了变化。以美团、饿了么为代表的，又进行了品类升级，现在叫“本地生活服务类电商”。消费者心智显然已经接受了这种升级。非常可惜的是，饿了么让出了品类第一的宝座。</p><p>6. 螳螂捕蝉，黄雀在后</p><p><img src="../resources/C013459BDDB5C2EF401ED1C184BDCD47.jpg" alt=""></p><p>每当行业出现风口，出现拐点时，都有两层涵义：一层叫事实拐点，另一层叫认知拐点。</p><p>作为品类领先者的饿了么，眼睁睁地看着淘点点、美团、百度都来入局争抢自己的奶酪。这是事实，那怎么认知呢？</p><p>淘点点显然在阿里体系的重要性、优先级没有排到足够高的位置，战略力度和战略资源都不够，没怎么认真地玩。</p><p>而我本人一直有一个猜想，假如百度把食派士给买了，改个中文名字，从外籍金领往中国白领自上而下来打，那中国外卖会不会是另外一种结局？</p><p>百度品牌在用户心智中，是技术驱动型的，直接做一个“百度外卖”，是不是属于品牌不当延伸？就好像我买了一辆奔弛的汽车，就一定会买奔弛的西服么？消费者心智能不能跨过去？营销性价比合适么？</p><p>到了2013年大家才发现，原来饿了么开创了新品类，没有开创新行业，也没有开创新产品。原来我们吃饭除了导流到店里之外，还可以送外卖。以前外卖是完全临时应付一下，现在变成了规模化来使用了。</p><p>饿了么是中国外卖的品类第一，可惜他们没有守住。</p><p>因为它的竞争对手是善于深度思考，善于建立认知优势与比较优势，而且还具有战略欺骗性的美团。在相当长的时间里，外人都以为美团就是试试外卖，没有什么大理想。</p><p>三、饿了么美团外卖大战</p><p>1. 商业三大认知战法</p><p>① 胜势战法：认知优势，先胜后战</p><p>《孙子兵法》有云：胜兵先胜而后求战，败兵先战而后求胜。</p><p>胜势战法轻易不打仗，先创造决战的条件，首战就是决战。找准时机，先胜后战，不胜不战。美团外卖就是典型的胜势战法。</p><p>知道为什么而战是底层的，知道如何战，又厉害了，知道在什么时间战，最牛。并不是你具备的条件立马就可以战，必须等到那个时机，胜势战法以后在互联网中的应用会越来越多。</p><p>② 优势战法：比较优势，十优十战</p><p>食派士属于这一类。我有比较优势，我是外国人心智中的品类第一。虽然做不大，你也不能把我干掉，我也能活得很好。我只做自己的优势产业。</p><p>③ 攻势战法：行业特性，百攻百战</p><p>饿了么了当初打小叶子当家是攻势战法。攻势战法求百战百胜（实际情况往往是屡战屡败），打不赢也得打，否则找不到生存机会与方向。</p><p>一个志存高远、格局比较大的企业家，时时刻刻都在觉察着商场的细微变化。经常问自己这三个问题：</p><blockquote><p>谁值得我学习？（谁是对标？）</p><p>谁在抢我的饭碗？（谁是对手？）</p><p>谁可以在一起合作？（谁是对友？不只是队友）</p></blockquote><p>这是每天都必须要想的问题，是睁开眼睛想，闭上眼睛也得想的问题。</p><p>2. 美团本来是搞团购的，怎么做起外卖来了？</p><p>餐饮这个领域，美团与大众点评是两种不同的方式。美团搞团购，更多是侧重于营销，没有产品端，也没有配送。</p><p>美团做了监控行动，不管是谁，不管做什么行业，哪怕就是做火葬场的，只要用到互联网，日交易量超过一定数据，美团就派人研究。</p><p>他们在研究中发现，外卖市场品类出来了。外卖是高频的，毛利比团购高。美团就此决定进军外卖市场。</p><p>美团有工具，始终有认知优势，这个认知优势不是概念，而是有一套落地方法。</p><p>当时饿了么排名第一，市场份额已经超过50%。美团外卖要阻击饿了么，从哪儿入手？</p><p>3. 认知战法：用户认知与资本认知</p><p>在产品战场、心智战场、金融战场这三个战场中，有两个认知是非常重要且容易被我们忽视，或者说不容易找到落地方法的，那就是用户认知和资本认知。</p><p><img src="../resources/F0EDED9A64E90D894A1CF4E3C1C8AC41.jpg" alt=""></p><p>① 用户认知</p><p>在产品战场，用户需求是短期的，短期需要能看见利益，视野较窄。</p><p>用户认知往往是长期的、利益更大的，但要说服用户不太容易。</p><p><img src="../resources/29E762A8DFB8BC4CC951CB76363641AC.jpg" alt=""></p><p>显然，美团外卖要说服用户说它是最好的中国外卖，这是不现实的，营销成本巨大。</p><p>② 资本认知</p><p><img src="../resources/DD4EB33B9A2BF8FC242B47BD396F740D.jpg" alt=""></p><p>资本市场怎么认知你更重要，但是也更难。资本市场青睐头部资源，美团外卖作为一个新进入者，不见得拼得过市场老大饿了么，资本不见得认可。怎么办？</p><p>4. 美团果断出手，狙击饿了么融资</p><p><img src="../resources/F4F596B64D299572E5F94DAAF1E0BE35.jpg" alt=""></p><p>饿了么融资，A轮、B轮、C轮，2014年D轮大众点评。大众点评当时是美团的竞争对手，美团要狙击它。</p><p>2014年有一个非常知名的基金，已经决定要投饿了么，开始派团队进行尽调。尽调对一个谨慎的投资人来说，只要验证情况大致不差，不要有突发性事件，就意味着投资成功。</p><p>这个时候美团某高管联系了该基金负责人，重点介绍了美团做外卖的比较优势和认知优势。</p><p>先亮观点：美团能成为中国外卖的品类第一。</p><p>底层逻辑是我有运营优势，美团在全国200个城市都有点，都是从“千团大战”的血海中杀出来的，在全国铺点、地推的能力非常强。这是饿了么不具备的。</p><p>再者，美团对本地生活服务有自己的认知优势，超级账户理论就是在这个时间点形成雏形的。</p><p>美团成功地阻挠了饿了么的这一轮融资进度，最终这家基金没投饿了么，改投美团了。在资本圈内，对饿了么造成了一定的负面影响，形成了一定的负面认知。</p><p>③ 产品战场</p><p>强敌环伺，饿了么当然很紧张，肯定对美团外卖做了很精确的信息了解。</p><p>美团外卖具有相当强的战略欺骗性。这就是孙子所说的：</p><blockquote><p>兵者，诡道也。故能而示之不能，用而示之不用。近而示之远，远而示之近。</p></blockquote><p>美团外卖跟着饿了么后面学了半年，什么创新都没有，饿了么干什么，我就直接copy你什么，闷不吭声学了半年。</p><p>这导致了饿了么团队战略误判，他们认为美团没有创新性，只会做跟随者，自己有一年左右领先的时间。</p><p>2014年暑假，美团突然招了1000个人，培训一个月，派到100个城市。饿了么发现后来不及培训，也往这些城市派人。</p><p>到了8月份，美团初步战果就出来了。在随后的半年时间里，在全国市场，美团以极高的速度一路直追，始终没给饿了么喘气的机会。</p><p>在产品战场，外卖还有一系列的关键成功要素。这些都是经营的杠杆。</p><p>其中一项指标叫订单密度。表面上看外卖是B2C业务，其实不然，它是B2B2C业务，其中一端是商家。</p><p>对于商家来说，你一天帮我卖3单，还是20单，这对我的吸引力大不一样。这个指标就叫订单密度。如果一天订单超过50单，这个商家就会积极配合。</p><p>在订单密度上，美团敢于把某些特色小品类独家承包销售，出手比饿了么要狠多了。特色产品本身即是内容，就这营造出了内容型产品，而这种内容又具有社交性，容易在年轻人中进行口碑自传播。</p><p>2015年10月份，美团和大众点评合并之后，对饿了么来说顿时敌人变成了朋友，朋友变成了敌人。本来跟阿里之前死掐，大众点评是我股东，现在大众点评和竞争对手合并了，大众点评就变成我的敌人。</p><p>在产品战场，此时的美团已经具有领先优势，而且把外卖品类升级并开创到一个新品类：本地生活服务类电商，还有一个资本认知的术语，叫超级账户。</p><p>④ 金融战场</p><p>这回轮到阿里坐不住了，它出资95亿美元把饿了么给收购了。</p><p><img src="../resources/DD4EB33B9A2BF8FC242B47BD396F740D.jpg" alt=""></p><p>阿里巴巴收购饿了么的时候，认知优势又来了。</p><p>第一，买的是流量。因为饿了么已经有3亿用户在天天高频玩，尽管阿里不缺流量，但这个流量对它来说很值钱。</p><p>第二，本地物流的能力。饿了么可以在30分钟之内送达，这种物流能力是阿里欠缺的。</p><p>第三，消费大数据很值钱。</p><p>饿了么不单单是外卖，还是本地物流中的佼佼者，把认知格局再往上提升一下：外卖极有可能会走出来像亚马逊那样先卖书，再卖商品，再走云服务的超级公司，这就是阿里对美团做大之后最紧张的地方，也是腾讯和顺丰等都非常紧张的地方。</p><p>本地生活服务电商品类越来越大，会影响到我们每个人。千万不要以为他只是一个送外卖的。当你站在一家餐饮店的门口，不直接进店，非要查一下大众点评时，你就知道消费者决策路径永远地改变了。</p><p>当每个月有1亿多人次，通过美团先查询，后决定去本地哪去玩的时候，你就知道用户认知是多么强大地改变了我们的消费习惯。</p><p>四、反思与认知</p><p>1. 张旭豪的反思是什么？</p><blockquote><p>我从来不在媒体上说我最大的教训是什么，好像大家感觉饿了么顺风顺水，其实我是有反思和教训的。我最大的教训是没有想清楚，整个社会不变的是什么事情，导致现在一直被对手追着。（张旭豪）</p><p>有一段话让我觉得贝索斯的思考深度确实挺深：我们很多人每天都很忙，都在适应社会的变化，但是每个人可能没有关注未来10年不变的是什么事情。（张旭豪）</p><p>你今天做产品、做开发可能有这个需求那个需求，有些需求是变来变去的，但是它本质有很多是一样的。我们反而在本质上没有花很多时间去思考，这个问题是我创业以来觉得我最大的问题。（张旭豪）</p></blockquote><p>一直被对手追着，像噩梦一样，就是因为没有建一个护城河，干对手干不了的事。</p><p>2. 认知优势究竟有多重要？</p><blockquote><p>很多时候我觉得一个成功的公司，6分、7分是靠大势，我们要认准大势顺势而为，而3分呢，其实是靠我们每个人的努力。我们能做的可能就是要靠不断地努力、不断地勤奋，有可能最后才能等到大势的到来。（张旭豪）</p></blockquote><p>品类第一，是最好的差异化竞争。它建立在强大的认知优势与比较优势基础之上。</p><p><img src="../resources/392FD948F61C3C8E29FD115FB6F44F80.jpg" alt=""></p><p>品类第一，单点突破。做的不是细分市场的第一，要做就做品类第一，品类一定是用户认知的，资本市场认知的，不是自嗨的。它是一种商业主权。</p><p>3. 定位究竟有多重要？</p><p>从某种意义上说，饿了么的出现尽管具有一定的偶然性，也说明张旭豪在误打误撞的过程中用了非常好的策略——定位。</p><p>为什么张旭豪第一桶金能杀出来？</p><p>肯德基和麦当劳店址基本都选在一个地方，因为客源、流量聚集。早期进入中国的洋快餐需要付出行业教育成本和客户教育成本，后进入者紧贴它们开店，就可以节省大量经济成本。</p><p>上海交大闵行校区就是因为封闭、大、远，所以才有很大的订外卖需求，小叶子当家在那个地方活得就很好。紧贴着小叶子当家在那个地方做生意，行业教育、客户教育成本人家都付完了，这就是定位。</p><p>我们不要认为定位就是广告，是营销，这是错误的认知。</p><p>从认知心理学、行为金融学的角度考虑定位，是因为价格不取决于功能，要在功能上卖价格，就进入认知决策，就很难。</p><p>但是价格取决于竞争对手，成本也取决于竞争对手。这两句话是定位的战略价值所在。换言之这两句话，都可以直接应用于金融战场，直接产生经济效益。</p><p>战略都是事后总结的，但是饿了么管理团队，特别是创始人张旭豪，早期朦朦胧胧之中有一种非常强的商业直觉，加上非常强的商业学习能力——他们选择了小叶子当家竞争力最薄弱的、用户教育成本最低的一个相对轻度解释的市场，进行强攻，抢占了一个小品类第一，最终不断品类升级，也是取得了令人惊叹的商业成果。</p><p>定位就是竞争，定位就是战略，定位就是金融。</p><p>时间关系，今天主要以认知战法为主。关于定位金融，今天就不展开多讲了。</p><p>感谢大家，祝大家学习愉快！</p><p>本文来自微信公众号：笔记侠（Notesman），作者：灰度认知社创始人曹升。</p>]]></content>
    
    <summary type="html">
    
      认知升级：谁是对标，谁是对手，谁是队友
    
    </summary>
    
      <category term="感悟" scheme="http://chen-tao.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="feeling" scheme="http://chen-tao.github.io/tags/feeling/"/>
    
      <category term="感悟" scheme="http://chen-tao.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="学习" scheme="http://chen-tao.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>编程的经验</title>
    <link href="http://chen-tao.github.io/2018/05/27/write-code-exp/"/>
    <id>http://chen-tao.github.io/2018/05/27/write-code-exp/</id>
    <published>2018-05-26T16:00:00.000Z</published>
    <updated>2018-05-27T12:29:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>有经验的程序员会做到下面 29 项事情，这也是每个新手程序员应该知道的事情。</p><p>如果你想成为更好的开发者，你应该尤其注意第15 点和第29 点。</p><ol><li><p><strong>积极大胆地谷歌。</strong>你得知道如何有效地组织搜索关键字，查阅别人写的代码，然后合理地用在代码里，从而解决问题。</p></li><li><p><strong>拥抱变化，坚持不懈。</strong>老手程序员在接触新技术时，能欣然接受像个初学者一样处处受挫，并总能在完成工作的同时自学成才。</p></li><li><p><strong>承认细节的重要性。</strong>例如变量和函数的命名、CSS 属性的命名、该用哈希还是用数组，以及其他看起来微不足道，但可能对项目有深远影响的事情。</p></li><li><p><strong>承认大多数的“重要决定”其实并没有那么重要。</strong>一般的开发者经常在技术选型等“重大问题”上陷入唇枪舌战，而程序员老鸟们会避免浪费时间在骂战中。这一点上，他们就像禅宗大师一样（zen-like）。</p></li><li><p><strong>选择合适的工具解决问题。</strong>网上有无数的开源库、工具和框架，让人眼花缭乱。而老手们清楚地知道针对怎样的问题，应该用什么样的工具。</p></li><li><p><strong>明白代码「不值钱」（该删就删）。</strong>你必须习惯于删掉几百行代码来重写程序的某一部分，毫不留情。</p></li><li><p><strong>在评估技术的时候要全面。</strong>例如，我一直在鼓吹Elixir。它语法优美，社区完善，有很大的潜力。但Elixir诞生的时间太短，所以如果要构建复杂的功能，可能会难以找到能帮你提高效率的开源工具。因此，在评估要不要选择使用一项技术时，你得把所有这些因素都考虑在内。</p></li><li><p><strong>学会说“我不知道”。</strong>没有比拒绝承认自己不知道更能浪费一个开发者的时间了。</p></li><li><p><strong>仔细分析错误信息里的线索。</strong>传统教育告诉我们：失败是坏事。报错信息这种东西也经常被跟失败联系起来，然而优秀程序员明白，这些错误消息里其实隐藏着能将你指向最终正确解决方案的线索。</p></li><li><p><strong>了解过早优化和必要的“炫技式”优化的区别。</strong>老手们清楚在什么时候需要写一些看上去没那么好懂，但会让程序运行更快的代码。</p></li><li><p><strong>每个人都会犯错，为自己的过失负责。</strong>而尤其在团队里，把责任推来推去没有任何意义，因为错误的发生往往不只是一方的因素造成的。</p></li><li><p><strong>成为你所用的开发工具的重度用户。</strong>如果长期在某个开发环境下有相当比例的开发工作，那你应该去掌握使用它的细节。</p></li><li><p><strong>学会用Vim（至少会一点）。</strong> 你至少应该在这个编辑器里学会勉强地移动和翻页。</p></li><li><p><strong>不要接陌生技术领域的私活。</strong>个人做自由职业项目，其中很大一部分挑战就是评估项目时间。不要规划自己未知领域的事情，那会让你处于想当尴尬的境地。</p></li><li><p><strong>不要数你干活花了几个小时。</strong>技术大牛会把时间花在有深度的工作上，并且他们清楚花了多少时间完全不重要。</p></li><li><p><strong>学会坦然接受批评。</strong>当你的代码因为各种原因四分五裂时，你需要培养用理性和逻辑的方式来应对（而不是情绪化处理）。</p></li><li><p><strong>同有更多经验的人结对编程。</strong>没有比这个更高效的编程学习方式了。</p></li><li><p><strong>一定要先自己做一遍代码审查。</strong>当你在GitHub上发起一个pull request之前，先把代码当成别人写的，自己先审查一遍。</p></li><li><p><strong>认识到做自由职业的难点不是写代码，而是其余的所有事情。</strong>销售、推广、客户支持，质量保证以及产品管理，所有这些都会花费大量时间。</p></li><li><p><strong>发现并解决更大的问题。</strong>优秀的程序员不拘泥于眼前的问题，而是清楚如何用更长远的方式彻底的解决这一类问题。</p></li><li><p><strong>深入了解一些大型开源项目的核心能让你开发时如虎添翼。</strong>如果你知道如何给你的项目打猴子补丁(Monkey Patch), 那么你将无所不能。</p></li><li><p><strong>跳过多数的会议。</strong>你的公司雇你是来写代码的，而不是谈代码的。当会议多到失控的时候，不去参加也没有任何问题。而且一旦你开始这样做，别人会更珍惜你的时间。</p></li><li><p><strong>知道什么时候开始回馈。</strong> 到了某个时候你需要将你的技能和经验传授给年轻的开发人员，就像你的导师当时教授你一样。</p></li><li><p><strong>能写烂代码。</strong>有时候可以当一当“胶带式程序员”。关键是随着时间推移，你需要弄清楚什么时候可以走捷径，什么时候必须走捷径。这其实是最难掌握的技能之一。</p></li><li><p><strong>礼貌地告诉别人你工作到很晚。</strong>如果你是办公室里最后一个，可以发一封简短的汇报邮件。别人一般会注意到邮件上的时间戳的。</p></li><li><p><strong>像一个领导者(Leader)一样做事，而不是老板(Boss)。</strong>老板是让别人为他工作的人，领导者是人们追随的人。做个领导者。</p></li><li><p><strong>去打打桌上足球。</strong>从长期来看，同其他开发者（或不同岗位上的同事）建立联系会比在紧巴巴的期限里交付一个功能更有价值。</p></li><li><p><strong>在压力下学习。</strong>你需要知道如何应对像系统宕机而你要负责将它复原的情况，即使一开始你完全没有头绪。</p></li><li><p><strong>“Move fast and break things” 别让完美主义阻止你做事。</strong>错误往往是最好的学习机会。所以别把犯错当作失败，而应该把它们当作值得学习的经历，并意识到：正是不断克服和突破这些错误，作为一个程序员，你才能不断成长起来。</p></li></ol><p>像生活中的很多事情一样，编程也是你做的越多，了解的就越多。所以如果你是一个新手程序员，还是直接去编码吧。记得将这些最佳实践应用在日常工作中，来不断提升你的编程技艺。</p>]]></content>
    
    <summary type="html">
    
      From Ken Mazaika
    
    </summary>
    
      <category term="感悟" scheme="http://chen-tao.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="感悟" scheme="http://chen-tao.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="人生" scheme="http://chen-tao.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="通用技能" scheme="http://chen-tao.github.io/tags/%E9%80%9A%E7%94%A8%E6%8A%80%E8%83%BD/"/>
    
      <category term="能力提升" scheme="http://chen-tao.github.io/tags/%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>golang Map 并发安全的几个点</title>
    <link href="http://chen-tao.github.io/2018/01/30/go-sync-map/"/>
    <id>http://chen-tao.github.io/2018/01/30/go-sync-map/</id>
    <published>2018-01-29T16:00:00.000Z</published>
    <updated>2018-01-30T02:46:05.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现1"><a href="#实现1" class="headerlink" title="实现1"></a>实现1</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// map_safe.go</span></div><div class="line"><span class="comment">// Copyright (C) 2018 chentao &lt;chentao@chentaos-MacBook-Pro.local&gt;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Distributed under terms of the MIT license.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> ctr <span class="keyword">struct</span> &#123;</div><div class="line">sync.RWMutex</div><div class="line">m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">counter := &amp;ctr&#123;m: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> bc(counter)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//for i := 0; i &lt; 10; i++ &#123;</span></div><div class="line"><span class="comment">//go set(counter, i*10)</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//for i := 0; i &lt; 10; i++ &#123;</span></div><div class="line"><span class="comment">//go get(counter)</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line">time.Sleep(time.Second * <span class="number">2</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bc</span><span class="params">(counter *ctr)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> set(counter, i)</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> get(counter)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// counter 这里必须是引用</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(counter *ctr, v <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">counter.Lock()</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">counter.Unlock()</div><div class="line">fmt.Printf(<span class="string">"set unlock mutex addr %p \n"</span>, &amp;counter.RWMutex)</div><div class="line">fmt.Printf(<span class="string">"set unlock count addr %p \n"</span>, &amp;counter.m)</div><div class="line">fmt.Printf(<span class="string">"set unlock all addr %p \n"</span>, &amp;counter)</div><div class="line">&#125;()</div><div class="line"><span class="comment">//counter.m["some_key"] = v</span></div><div class="line">counter.m[<span class="string">"some_key"</span>] = counter.m[<span class="string">"some_key"</span>] + v</div><div class="line"><span class="comment">//time.Sleep(time.Millisecond * 10)</span></div><div class="line">fmt.Println(<span class="string">"some_key set:"</span>, counter.m[<span class="string">"some_key"</span>])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(counter *ctr)</span></span> &#123;</div><div class="line">counter.RLock()</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">counter.RUnlock()</div><div class="line">fmt.Printf(<span class="string">"get unlock mutex addr %p \n"</span>, &amp;counter.RWMutex)</div><div class="line">fmt.Printf(<span class="string">"get unlock count addr %p \n"</span>, &amp;counter.m)</div><div class="line">fmt.Printf(<span class="string">"get unlock all addr %p \n"</span>, &amp;counter)</div><div class="line">&#125;()</div><div class="line">n := counter.m[<span class="string">"some_key"</span>]</div><div class="line">fmt.Println(<span class="string">"some_key get:"</span>, n)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="实现2"><a href="#实现2" class="headerlink" title="实现2"></a>实现2</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// map_safe.go</span></div><div class="line"><span class="comment">// Copyright (C) 2018 chentao &lt;chentao@chentaos-MacBook-Pro.local&gt;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Distributed under terms of the MIT license.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"time"</span></div><div class="line"><span class="string">"unsafe"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> ctr2 <span class="keyword">struct</span> &#123;</div><div class="line">sync.RWMutex</div><div class="line">m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">counter := ctr2&#123;m: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> counter.bc()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//for i := 0; i &lt; 10; i++ &#123;</span></div><div class="line"><span class="comment">//go set(counter, i*10)</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//for i := 0; i &lt; 10; i++ &#123;</span></div><div class="line"><span class="comment">//go get(counter)</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line">time.Sleep(time.Second * <span class="number">2</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// counter这里都OK</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(counter *ctr2)</span> <span class="title">bc</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> counter.set(i)</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> counter.get()</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(counter *ctr2)</span> <span class="title">set</span><span class="params">(v <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">counter.Lock()</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">counter.Unlock()</div><div class="line">fmt.Printf(<span class="string">"set unlock mutex addr %p \n"</span>, &amp;counter.RWMutex)</div><div class="line">fmt.Printf(<span class="string">"set unlock count addr %p \n"</span>, &amp;counter.m)</div><div class="line">fmt.Printf(<span class="string">"set unlock all addr %p \n"</span>, &amp;(*counter))</div><div class="line">fmt.Printf(<span class="string">"set unlock all addr %p \n"</span>, unsafe.Pointer(counter))</div><div class="line">fmt.Printf(<span class="string">"set unlock all addr %p \n"</span>, counter)</div><div class="line">&#125;() <span class="comment">// 注意这几个对象引用和地址的区分</span></div><div class="line"><span class="comment">//counter.m["some_key"] = v</span></div><div class="line">counter.m[<span class="string">"some_key"</span>] = counter.m[<span class="string">"some_key"</span>] + v</div><div class="line"><span class="comment">//time.Sleep(time.Millisecond * 10)</span></div><div class="line">fmt.Println(<span class="string">"some_key set:"</span>, counter.m[<span class="string">"some_key"</span>])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(counter *ctr2)</span> <span class="title">get</span><span class="params">()</span></span> &#123;</div><div class="line">counter.RLock()</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">counter.RUnlock()</div><div class="line">fmt.Printf(<span class="string">"get unlock mutex addr %p \n"</span>, &amp;counter.RWMutex)</div><div class="line">fmt.Printf(<span class="string">"get unlock count addr %p \n"</span>, &amp;counter.m)</div><div class="line">fmt.Printf(<span class="string">"get unlock all addr %p \n"</span>, &amp;(*counter))</div><div class="line">fmt.Printf(<span class="string">"get unlock all addr %p \n"</span>, unsafe.Pointer(counter))</div><div class="line">fmt.Printf(<span class="string">"get unlock all addr %p \n"</span>, counter)</div><div class="line">&#125;()</div><div class="line">n := counter.m[<span class="string">"some_key"</span>]</div><div class="line">fmt.Println(<span class="string">"some_key get:"</span>, n)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      有几个坑，需要注意一下
    
    </summary>
    
      <category term="Golang" scheme="http://chen-tao.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://chen-tao.github.io/tags/Golang/"/>
    
      <category term="Sync" scheme="http://chen-tao.github.io/tags/Sync/"/>
    
  </entry>
  
  <entry>
    <title>Hive CookBook</title>
    <link href="http://chen-tao.github.io/2017/10/17/hive-tips/"/>
    <id>http://chen-tao.github.io/2017/10/17/hive-tips/</id>
    <published>2017-10-16T16:00:00.000Z</published>
    <updated>2017-10-17T08:23:01.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询配置"><a href="#查询配置" class="headerlink" title="查询配置"></a>查询配置</h2><p>设置任务名称 <code>set mapreduce.job.name=xxx_yourname;</code></p><p>指定任务队列 <code>set mapreduce.job.queuename=offline.data;</code></p><p>任务结果输出header信息 <code>set hive.cli.print.header=true;</code></p><p>设置优先级 <code>set mapreduce.job.priority=HIGH;</code></p><blockquote><p>优先级说明:<br>配置 <code>mapreduce.job.priority</code> 来调整优先级，支持的值：</p><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">对应YARN优先级</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">NORMAL(默认)</td><td style="text-align:left">1</td><td style="text-align:left">普通任务</td></tr><tr><td style="text-align:left">HIGH</td><td style="text-align:left">2</td><td style="text-align:left">nearline 任务</td></tr><tr><td style="text-align:left">VERY_HIGH</td><td style="text-align:left">3</td><td style="text-align:left">在线任务</td></tr><tr><td style="text-align:left">CRITICAL</td><td style="text-align:left">6</td><td style="text-align:left">关键任务</td></tr><tr><td style="text-align:left">VERY_CRITICAL</td><td style="text-align:left">9</td><td style="text-align:left">非常关键的任务</td></tr></tbody></table></blockquote><h3 id="reduce阶段内存配置："><a href="#reduce阶段内存配置：" class="headerlink" title="reduce阶段内存配置："></a><strong>reduce阶段内存配置：</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> mapreduce.reduce.java.opts=-Xmx3072m;</div><div class="line"><span class="built_in">set</span> mapreduce.reduce.memory.mb=4096;</div></pre></td></tr></table></figure><h3 id="map阶段内存配置："><a href="#map阶段内存配置：" class="headerlink" title="map阶段内存配置："></a>map阶段内存配置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> mapreduce.map.java.opts=-Xmx3072m;</div><div class="line"><span class="built_in">set</span> mapreduce.map.memory.mb=4096;</div></pre></td></tr></table></figure><h3 id="map数过多："><a href="#map数过多：" class="headerlink" title="map数过多："></a>map数过多：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> mapred.min.split.size=536870912;</div><div class="line"><span class="built_in">set</span> mapred.max.split.size=536870912;</div></pre></td></tr></table></figure><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="使用-Rank-计算分组-TopN-或-Top-Percentile"><a href="#使用-Rank-计算分组-TopN-或-Top-Percentile" class="headerlink" title="使用 Rank() 计算分组 TopN 或 Top Percentile"></a>使用 Rank() 计算分组 TopN 或 Top Percentile</h3><p>文档：<a href="http://www.cloudera.com/content/cloudera/en/documentation/cloudera-impala/latest/topics/impala_analytic_functions.html#rank_unique_1" target="_blank" rel="external">Rank()</a></p><p>Rank() 可以为原始数据的每一行生成新的一列，值为这一行所在分组的排序 rank； 这样就可以根据 rank 值来保留所需要的 Top N 的行，也可以参考所在分组的总行数，保留 Top n% 的行。</p><p>Example: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">    *</div><div class="line"><span class="keyword">FROM</span></div><div class="line">    (</div><div class="line">        <span class="keyword">SELECT</span></div><div class="line">            ut,</div><div class="line">            uid,</div><div class="line">            gid,</div><div class="line">            it,</div><div class="line">            <span class="keyword">RANK</span>() <span class="keyword">OVER</span> (</div><div class="line">                <span class="keyword">PARTITION</span> <span class="keyword">BY</span> gid</div><div class="line">                <span class="keyword">ORDER</span> <span class="keyword">BY</span></div><div class="line">                    it</div><div class="line">            ) <span class="keyword">AS</span> gir</div><div class="line">        <span class="keyword">FROM</span></div><div class="line">            is_daily</div><div class="line">        <span class="keyword">WHERE</span></div><div class="line">            <span class="string">`date=`</span> <span class="string">"20170803"</span></div><div class="line">            <span class="keyword">AND</span> <span class="keyword">is</span> = <span class="string">"f"</span></div><div class="line">    ) <span class="keyword">AS</span> tmp_t</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">    gir &lt; <span class="number">10</span></div><div class="line"><span class="keyword">LIMIT</span></div><div class="line">    <span class="number">100</span></div></pre></td></tr></table></figure><h3 id="使用-NDV-实现快速计数"><a href="#使用-NDV-实现快速计数" class="headerlink" title="使用 NDV() 实现快速计数"></a>使用 NDV() 实现快速计数</h3><p>文档： <a href="http://www.cloudera.com/content/cloudera/en/documentation/cloudera-impala/v2-0-x/topics/impala_ndv.html" target="_blank" rel="external">NDV()</a></p><p>相比 count distinct 更快、更节省内存，但存在误差 (HyperLogLog). 在查询很大的 count distinct，且对准确性要求量级正确即可时，e.g. 月活跃用户(MAU)，可以考虑用 NDV 代替 count distinct.</p><p>NDV() 只能对单列做计数，所以如果需要多列组合计数，需要做一个拼接转换。</p><p>Example: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">    ndv(</div><div class="line">        <span class="keyword">concat</span>(</div><div class="line">            <span class="keyword">cast</span>(uid <span class="keyword">AS</span> <span class="keyword">STRING</span>),</div><div class="line">            <span class="string">','</span>,</div><div class="line">            <span class="keyword">cast</span>(user_uid <span class="keyword">AS</span> <span class="keyword">STRING</span>)</div><div class="line">        )</div><div class="line">    )</div><div class="line">)</div><div class="line"><span class="keyword">FROM</span></div><div class="line">    default.isd</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">    <span class="string">`date=`</span> <span class="string">"20170803"</span></div><div class="line">    <span class="keyword">AND</span> <span class="keyword">is</span> = <span class="string">"f"</span></div><div class="line"><span class="keyword">SELECT</span></div><div class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> uid, user_uid)</div><div class="line"><span class="keyword">FROM</span></div><div class="line">    default.isd</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">    <span class="string">`date=`</span> <span class="string">"20170803"</span></div><div class="line">    <span class="keyword">AND</span> <span class="keyword">is</span> = <span class="string">"f"</span></div></pre></td></tr></table></figure><h3 id="使用lateral-view和explode展开array嵌套结构"><a href="#使用lateral-view和explode展开array嵌套结构" class="headerlink" title="使用lateral view和explode展开array嵌套结构"></a>使用lateral view和explode展开array嵌套结构</h3><p>对字符串split得到array，再把array展开</p><p>示例：it是字符串，取值样例’refresh,push’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    uid,</div><div class="line">    ut,</div><div class="line">    it</div><div class="line"><span class="keyword">from</span></div><div class="line">    t LATERAL <span class="keyword">VIEW</span> explode(<span class="keyword">split</span>(it, <span class="string">','</span>)) tb <span class="keyword">as</span> it</div><div class="line"><span class="keyword">where</span></div><div class="line">    <span class="string">`date = `</span> <span class="string">'20161229'</span></div><div class="line"><span class="keyword">limit</span></div><div class="line">    <span class="number">100</span></div></pre></td></tr></table></figure><h3 id="使用lateral-view和explode展开map嵌套结构"><a href="#使用lateral-view和explode展开map嵌套结构" class="headerlink" title="使用lateral view和explode展开map嵌套结构"></a>使用lateral view和explode展开map嵌套结构</h3><p>对value值进行过滤，选取符合要求的keys</p><p>示例：lt_lk_keyword是Map，取值样例{123: 0.1234, 234: 0.2345}</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    uid,</div><div class="line">    ut,</div><div class="line">    <span class="keyword">key</span>,</div><div class="line">    <span class="keyword">value</span></div><div class="line"><span class="keyword">from</span></div><div class="line">    x LATERAL <span class="keyword">VIEW</span> explode(lt_lk_keyword) tb <span class="keyword">as</span> <span class="keyword">key</span>,</div><div class="line">    <span class="keyword">value</span></div><div class="line"><span class="keyword">where</span></div><div class="line">    <span class="string">`date = `</span> <span class="string">'20151229'</span></div></pre></td></tr></table></figure><h3 id="使用lateral-view-和-json-tuple-处理json"><a href="#使用lateral-view-和-json-tuple-处理json" class="headerlink" title="使用lateral view 和 json_tuple 处理json"></a>使用lateral view 和 json_tuple 处理json</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">    *</div><div class="line"><span class="keyword">FROM</span></div><div class="line">    (</div><div class="line">        <span class="keyword">select</span></div><div class="line">            *</div><div class="line">        <span class="keyword">from</span></div><div class="line">            x LATERAL <span class="keyword">VIEW</span> json_tuple(extra, <span class="string">"gs"</span>, <span class="string">"uid"</span>) t1 <span class="keyword">as</span> uid,</div><div class="line">            gs</div><div class="line">    ) g</div><div class="line">    <span class="keyword">JOIN</span> default.web_article_item_dict <span class="keyword">as</span> i <span class="keyword">on</span> g.date = i.date</div><div class="line">    <span class="keyword">and</span> g.kid = iid</div><div class="line"><span class="keyword">where</span></div><div class="line">    g.date = <span class="string">"20171016"</span></div><div class="line"><span class="keyword">limit</span></div><div class="line">    <span class="number">10</span></div></pre></td></tr></table></figure><h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><h3 id="保存查询结果到hive表"><a href="#保存查询结果到hive表" class="headerlink" title="保存查询结果到hive表"></a>保存查询结果到hive表</h3><p>直接以查询结果建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.tb_abc <span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> uit, uid</div><div class="line">  <span class="keyword">FROM</span> default.isd</div><div class="line">  WHEREdate=<span class="string">"20150803"</span></div></pre></td></tr></table></figure><h2 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h2><h3 id="创建空Parquet分区表"><a href="#创建空Parquet分区表" class="headerlink" title="创建空Parquet分区表"></a>创建空Parquet分区表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> test.tmp_users1(</div><div class="line">    ut tinyint,</div><div class="line">    uid <span class="built_in">bigint</span></div><div class="line">)</div><div class="line">PARTITIONED <span class="keyword">BY</span> (</div><div class="line">   <span class="string">`date string`</span></div><div class="line">)</div><div class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> PARQUET;</div></pre></td></tr></table></figure><h3 id="基于JSON数据创建外部数据表"><a href="#基于JSON数据创建外部数据表" class="headerlink" title="基于JSON数据创建外部数据表"></a>基于JSON数据创建外部数据表</h3><p>文档：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-CreateTable" target="_blank" rel="external">CreateTable</a></p><p>Example: 创建包含2个字段的临时外部数据表</p><p>HDFS数据：xx.json。目录中可包含多个文件。json文件内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;'ut': 12, 'uid': 8&#125;</div><div class="line"></div><div class="line">&#123;'ut': 14, 'uid': 12345&#125;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> test.tmp_users1(</div><div class="line">    ut tinyint,</div><div class="line">    uid <span class="built_in">bigint</span></div><div class="line">)</div><div class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE <span class="string">'org.openx.data.jsonserde.JsonSerDe'</span> <span class="keyword">WITH</span> SERDEPROPERTIES (<span class="string">'ignore.malformed.json'</span>=<span class="string">'true'</span>)</div><div class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE</div><div class="line">LOCATION <span class="string">'/locate'</span>;</div></pre></td></tr></table></figure><h3 id="基于CSV数据创建外部数据表（数据在本地）"><a href="#基于CSV数据创建外部数据表（数据在本地）" class="headerlink" title="基于CSV数据创建外部数据表（数据在本地）"></a>基于CSV数据创建外部数据表（数据在本地）</h3><p>不将数据存储在hdfs，直接从本地load进表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 12,674930234</span></div><div class="line"><span class="comment">-- 14,759234924</span></div><div class="line"></div><div class="line"><span class="comment">-- step1: 建表</span></div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> csv_load_test(</div><div class="line">    ut <span class="built_in">bigint</span>,</div><div class="line">    uid <span class="built_in">bigint</span></div><div class="line">)</div><div class="line"><span class="keyword">row</span> <span class="keyword">format</span></div><div class="line"><span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></div><div class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile</div><div class="line"></div><div class="line"><span class="comment">-- step2: load数据</span></div><div class="line"></div><div class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'./test.csv'</span> overwrite <span class="keyword">into</span> <span class="keyword">table</span> csv_load_test</div></pre></td></tr></table></figure><h3 id="基于CSV数据创建外部数据表（数据在hdfs）"><a href="#基于CSV数据创建外部数据表（数据在hdfs）" class="headerlink" title="基于CSV数据创建外部数据表（数据在hdfs）"></a>基于CSV数据创建外部数据表（数据在hdfs）</h3><p>文档：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-CreateTable" target="_blank" rel="external">CreateTable</a></p><p>Example: 创建包含2个字段的临时外部数据表</p><p>HDFS数据：/users.csv。目录中可包含多个文件。csv文件内容，以\t分隔：</p><p>将数据表从hive同步到impala, 在impala执行: invalidate metadata test.source_list_focus;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 12,8</span></div><div class="line"><span class="comment">-- 14,12345</span></div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> test.tmp_users2(</div><div class="line">    ut tinyint,</div><div class="line">    uid <span class="built_in">bigint</span></div><div class="line">)</div><div class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span></div><div class="line"><span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span></div><div class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE</div><div class="line">LOCATION <span class="string">'/locate'</span>;</div></pre></td></tr></table></figure><h3 id="创建包含map和array结构的临时表："><a href="#创建包含map和array结构的临时表：" class="headerlink" title="创建包含map和array结构的临时表："></a>创建包含map和array结构的临时表：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> test.impala_complex_type_json(</div><div class="line">    <span class="string">`uid string,`</span></div><div class="line">    <span class="string">`properties map,`</span></div><div class="line">    ids<span class="string">` array&lt;int`</span>&gt;)</div><div class="line">    <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span></div><div class="line">      <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></div><div class="line">      collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></div><div class="line">      <span class="keyword">map</span> <span class="keyword">keys</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span></div><div class="line">    <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE;</div><div class="line"></div><div class="line"><span class="comment">-- local file</span></div><div class="line"></div><div class="line">u1 &#123;"name":"xiaoming","age":"18","gender":"male"&#125; [1,2,3]</div><div class="line"></div><div class="line">u2 &#123;"name":"dagou","age":"18","gender":"female"&#125; [4,5,6]</div><div class="line"></div><div class="line"><span class="comment">-- cli - command</span></div><div class="line"></div><div class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'./a'</span> overwrite <span class="keyword">into</span> <span class="keyword">table</span> test.impala_complex_type_json</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      some tips for hive to handle data
    
    </summary>
    
      <category term="Hive" scheme="http://chen-tao.github.io/categories/Hive/"/>
    
    
      <category term="Hive" scheme="http://chen-tao.github.io/tags/Hive/"/>
    
      <category term="Hadoop" scheme="http://chen-tao.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Git全局递归忽略.DS_Store</title>
    <link href="http://chen-tao.github.io/2017/09/24/Git%E5%85%A8%E5%B1%80%E9%80%92%E5%BD%92%E5%BF%BD%E7%95%A5-DS-Store/"/>
    <id>http://chen-tao.github.io/2017/09/24/Git全局递归忽略-DS-Store/</id>
    <published>2017-09-24T05:43:21.000Z</published>
    <updated>2017-09-24T06:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Mac下，只要在Finder访问过的文件夹，都会生成一个.DS_Store的文件，Mac用它来存储当前文件夹的一些Meta信息。对于Git来说，不经意间总是会干扰到其他正常的提交和本地仓库状态，是很烦恼，找了半天，终于有一个比较好的办法处理了</p></blockquote><p>流程大致是这样的：</p><h2 id="对于项目内已经提交了-DS-Store到仓库的情况"><a href="#对于项目内已经提交了-DS-Store到仓库的情况" class="headerlink" title="对于项目内已经提交了.DS_Store到仓库的情况"></a>对于项目内已经提交了.DS_Store到仓库的情况</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name .DS_Store -print0 | xargs -0 git rm --ignore-unmatch</div></pre></td></tr></table></figure><p>搜索一下项目内所有的<code>.DS_Store</code>，全部<code>rm</code>掉，然后再<code>push</code>一把</p><h2 id="对于今后的项目，做全局的配置"><a href="#对于今后的项目，做全局的配置" class="headerlink" title="对于今后的项目，做全局的配置"></a>对于今后的项目，做全局的配置</h2><p>如果没有<code>~/. gitignore_global</code>文件，<code>echo</code>也会为你生成一个，这里的主要目的是覆盖所有可能的<code>OS X</code>版本生成的<code>.DS_Store</code>，逐一执行一次就可以了，之后<code>cat</code>一下看是否正常写入了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">".DS_Store"</span> &gt;&gt; ~/.gitignore_global</div><div class="line"><span class="built_in">echo</span> <span class="string">"._.DS_Store"</span> &gt;&gt; ~/.gitignore_global</div><div class="line"><span class="built_in">echo</span> <span class="string">"**/.DS_Store"</span> &gt;&gt; ~/.gitignore_global</div><div class="line"><span class="built_in">echo</span> <span class="string">"**/._.DS_Store"</span> &gt;&gt; ~/.gitignore_global</div></pre></td></tr></table></figure><p>然后设置一下全局的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global core.excludesfile ~/.gitignore_global</div></pre></td></tr></table></figure><p>大功告成~</p><p>另外，Github还提供了一个官方的全局示例，可以根据实际需求使用：</p><script src="https://gist.github.com/Chen-tao/98be9441fd238a1eccadba141d89d64a.js"></script><blockquote><p>最后补充一下<code>.gitignore</code>的语法</p></blockquote><h3 id="gitignore规范"><a href="#gitignore规范" class="headerlink" title="gitignore规范"></a>gitignore规范</h3><ul><li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上（!）取反。</li></ul><h3 id="glob模式要点"><a href="#glob模式要点" class="headerlink" title="glob模式要点"></a>glob模式要点</h3><ul><li><code>*</code>:任意个任意字符,</li><li><code>[]</code>:匹配任何一个在方括号中的字符,</li><li><code>?</code>:匹配一个任意字符，</li><li><code>[0-9]</code>:匹配字符范围内所有字符</li></ul>]]></content>
    
    <summary type="html">
    
      解决Mac下统一递归的忽略.DS_Store的方法
    
    </summary>
    
      <category term="Git" scheme="http://chen-tao.github.io/categories/Git/"/>
    
    
      <category term="Mac" scheme="http://chen-tao.github.io/tags/Mac/"/>
    
      <category term="OS X" scheme="http://chen-tao.github.io/tags/OS-X/"/>
    
      <category term="Git" scheme="http://chen-tao.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git submodule Note</title>
    <link href="http://chen-tao.github.io/2017/09/24/Git-submodule-Note/"/>
    <id>http://chen-tao.github.io/2017/09/24/Git-submodule-Note/</id>
    <published>2017-09-24T03:29:54.000Z</published>
    <updated>2017-09-24T05:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="add-submodule"><a href="#add-submodule" class="headerlink" title="add submodule"></a>add submodule</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule add --force gitr:service_rpc/idl idl</div></pre></td></tr></table></figure><p>If this repo has not previously been used submodule then Git will create a directory in the directory called <em>.gitmodules</em> , which records the URL of the remote repo and the submodule in this project path.</p><p>After executing this command submodule and <em>.gitmodules</em> will automatically staged, this time can commit and push.</p><h3 id="Update-submodule"><a href="#Update-submodule" class="headerlink" title="Update submodule"></a>Update submodule</h3><p>Individual repo update is too much trouble, it is necessary to separate directory under execution <code>git pull</code>to pull the upstream code, but that would be more secure; all at once to update all of submodule can use this <code>foreach</code>command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule foreach --recursive git pull origin master</div></pre></td></tr></table></figure><h3 id="Remove-submodule"><a href="#Remove-submodule" class="headerlink" title="Remove submodule"></a>Remove submodule</h3><p>I thought there will be like <code>git submodule rm</code>such an instruction, the result is not even, you must manually remove the hard ground one by one, not knowing what not to implement this directive considerations, I hope that future versions can add to it.</p><p>Remove submodule has the following steps to do, first remove the submodule directory from the version control system:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git rm --cached /path/to/files</div><div class="line">rm -rf /path/to/files</div></pre></td></tr></table></figure><p>Again to modify <em>.gitmodules</em> , remove the <em>unwrought</em> submodule, for example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[submodule <span class="string">".vim/bundle/vim-gitgutter"</span>]</div><div class="line">  path = .vim/bundle/vim-gitgutter</div><div class="line">  url = git://github.com/airblade/vim-gitgutter.git</div><div class="line">-[submodule <span class="string">".vim/bundle/vim-autoclose"</span>]</div><div class="line">- path = .vim/bundle/vim-autoclose</div><div class="line">- url = git://github.com/Townk/vim-autoclose.git</div></pre></td></tr></table></figure><p>Not yet finished! But also modify the contents of <em>.git / config</em> , with. <em>Gitmodules</em> , the need to remove the submodule deleted, and finally commit.</p><h3 id="clone-when-the-submodule-together-to-catch-down"><a href="#clone-when-the-submodule-together-to-catch-down" class="headerlink" title="clone when the submodule together to catch down"></a>clone when the submodule together to catch down</h3><p>Implementation of <code>git clone</code>Git clone does not automatically come together when submodule must be added <code>--recursive</code>recursive parameter, so you can catch all associated submodule in submodule down together:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> --recursive git@github.com:Chen-tao/go-stuff.git</div></pre></td></tr></table></figure><p>If you have been caught to find submodule is empty, you can use the following instructions to catch, <code>init</code>will be registered in _.git / config` remote repo URL and local path:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git submodule init</div><div class="line">git submodule update --recursive</div></pre></td></tr></table></figure><p>Or merged into one line <code>git submodule update --init --recursive</code>can, if upstream someone to turn over <em>.gitmodules</em> , it seems that local end also using this method update.</p><h2 id="Explanation-of-instructions"><a href="#Explanation-of-instructions" class="headerlink" title="Explanation of instructions"></a>Explanation of instructions</h2><ul><li><code>git submodule init</code>: According to <em>.gitmodules</em> name and URL, these information will be registered to . *Git *<em>/ config</em> , but not <em>.gitmodules</em> not removed submodule, the use of this directive and no way to automatically delete. <em>Git / config</em> related content, you must manually delete ;</li><li><code>git submodule update</code>: According to registered (that is, <em>.git / config</em> ) submodule to update, such as clone lost submodule, which is the last paragraph of the method, so the implementation of this instruction before the best plus <code>--init</code>;</li><li><code>git submodule sync</code>: If the submodule’s remote URL changes, you can correct the URL in <em>.gitmodules</em> , and then execute this command, the submodule’s remote URL will be corrected.</li></ul>]]></content>
    
    <summary type="html">
    
      项目中使用了git的submodule功能，但突然发现，更新项目或者重写clone项目时，submodule并没有一起更新……这里总结和学习一下submodule相关的功能
    
    </summary>
    
      <category term="Git" scheme="http://chen-tao.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://chen-tao.github.io/tags/Git/"/>
    
      <category term="github" scheme="http://chen-tao.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>使用gvm管理多版本golang</title>
    <link href="http://chen-tao.github.io/2017/09/14/Use-gvm-manage-golang-version/"/>
    <id>http://chen-tao.github.io/2017/09/14/Use-gvm-manage-golang-version/</id>
    <published>2017-09-14T05:36:32.000Z</published>
    <updated>2017-09-24T03:46:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Golang发展迅速，代码迭代非常快，想要调试和梳理项目进程就成了一件相对棘手的事情。偶然间发现了gvm - <a href="http://github.com/moovweb/gvm" target="_blank" rel="external">Go Version Manager</a>，算是找到了调试切换版本的福音。</p><h2 id="关于gvm"><a href="#关于gvm" class="headerlink" title="关于gvm"></a>关于gvm</h2><p>GVM，类似于ruby 中的<a href="https://rvm.io/" target="_blank" rel="external">RVM</a>，java 中的<a href="https://github.com/linux-china/jenv" target="_blank" rel="external">jenv</a>（国产），可用于方便管理 Go 的版本，它有如下几个主要特性：</p><ul><li><p>管理 Go 的多个版本，包括安装、卸载和指定使用 Go 的某个版本</p></li><li><p>查看官方所有可用的 Go 版本，同时可以查看本地已安装和默认使用的 Go 版本</p></li><li><p>管理多个 GOPATH，并可编辑 Go 的环境变量</p></li><li><p>可将当前目录关联到 GOPATH</p></li><li><p>可以查看 GOROOT 下的文件差异</p></li></ul><h2 id="Go-版本切换"><a href="#Go-版本切换" class="headerlink" title="Go 版本切换"></a>Go 版本切换</h2><p>二进制文件的管理比较简单，通过链接使用不同版本的程序即可，实际上主要是一些环境变量和标准库的设置问题，环境变量主要是 GOPATH 以及 GOROOT，标准库的话需要在切换 go 版本时也能跟着切换。gvm 实际上就是帮助完成这些配置工作。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>按照官方文档操作即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</div><div class="line"><span class="comment"># or</span></div><div class="line">zsh &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ gvm</div><div class="line">Usage: gvm [<span class="built_in">command</span>]</div><div class="line"></div><div class="line">Description:</div><div class="line">  GVM is the Go Version Manager</div><div class="line"></div><div class="line">Commands:</div><div class="line">  version    - <span class="built_in">print</span> the gvm version number</div><div class="line">  get        - gets the latest code (<span class="keyword">for</span> debugging)</div><div class="line">  use        - select a go version to use (--default to <span class="built_in">set</span> permanently)</div><div class="line">  diff       - view changes to Go root</div><div class="line">  <span class="built_in">help</span>       - display this usage text</div><div class="line">  implode    - completely remove gvm</div><div class="line">  install    - install go versions</div><div class="line">  uninstall  - uninstall go versions</div><div class="line">  cross      - install go cross compilers</div><div class="line">  linkthis   - link this directory into GOPATH</div><div class="line">  list       - list installed go versions</div><div class="line">  listall    - list available versions</div><div class="line">  <span class="built_in">alias</span>      - manage go version aliases</div><div class="line">  pkgset     - manage go packages sets</div><div class="line">  pkgenv     - edit the environment <span class="keyword">for</span> a package <span class="built_in">set</span></div></pre></td></tr></table></figure><p>Mac下需要这样一把（如果你的环境有问题的话）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xcode-select --install</div><div class="line">brew update</div><div class="line">brew install mercurial</div></pre></td></tr></table></figure><p>一般常规的操作是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先列一下看支持哪些版本</span></div><div class="line">gvm listall</div><div class="line"></div><div class="line"><span class="comment"># 看下自己环境有哪些版本</span></div><div class="line">gvm list</div><div class="line"></div><div class="line"><span class="comment"># 安装需要的版本，比如go1.8.3，加--default代表每次再进terminal时默认使用这个版本</span></div><div class="line">gvm install go1.8.3 [--default]</div><div class="line"></div><div class="line"><span class="comment"># 然后看下是否成功</span></div><div class="line">go version</div><div class="line">go env</div><div class="line"></div><div class="line"><span class="comment"># 如果不需要gvm的环境变量，则需要到GVM_ROOT/environments下面去删除</span></div><div class="line"><span class="comment"># 注意是清空文件</span></div><div class="line">&gt; <span class="variable">$GVM_ROOT</span>/environments/go1.8.3</div><div class="line"></div><div class="line"><span class="comment"># 如果需要每次打开terminal都生效的话，以下命令加入到bashrc/zshrc，注意要加在GOPATH/GOROOT的setting之前（如果希望环境变量不被修改的话）</span></div><div class="line"><span class="built_in">source</span> /Users/chentao/.gvm/scripts/gvm</div></pre></td></tr></table></figure><h2 id="几点注意"><a href="#几点注意" class="headerlink" title="几点注意"></a>几点注意</h2><ul><li>在 Linux 下安装 GVM，需要安装相关依赖，详情见<a href="https://github.com/moovweb/gvm" target="_blank" rel="external">官网说明</a></li><li>GVM 官方显示没对 Windows 做支持，考虑到 Windows 不是程序员的标配吧（有同学回复用 git-windows客户端，自带bash功能，可以自行尝试安装下）。</li><li>GVM 安装新版本之后，Go 环境变量会重新设置，为了节约磁盘空间和时间，建议把之前版本的 GOPATH 内容移动到新版本对应的 GOPATH 目录下，相关路径可以通过 go env 获取</li><li>在同一版本下，用 gvm pkgset 创建多个 GOPATH，可能会占用你比较大的磁盘空间</li><li>使用 gvm implode 需谨慎</li><li>GVM 是用 shell 编写</li></ul>]]></content>
    
    <summary type="html">
    
      go版本之间的变化较大，尤其从1.4开始，增删了很多包和相关的代码。使用gvm可以模拟各种版本的go环境，进行相关的代码调试
    
    </summary>
    
      <category term="Golang" scheme="http://chen-tao.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://chen-tao.github.io/tags/Golang/"/>
    
      <category term="gvm" scheme="http://chen-tao.github.io/tags/gvm/"/>
    
  </entry>
  
  <entry>
    <title>如何安全删除Github上的commit历史</title>
    <link href="http://chen-tao.github.io/2017/09/14/How-to-delete-github-history/"/>
    <id>http://chen-tao.github.io/2017/09/14/How-to-delete-github-history/</id>
    <published>2017-09-14T03:22:16.000Z</published>
    <updated>2017-09-14T03:29:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Remove the history from </span></div><div class="line">rm -rf .git</div><div class="line"></div><div class="line"><span class="comment"># recreate the repos from the current content only</span></div><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m <span class="string">"Initial commit"</span></div><div class="line"></div><div class="line"><span class="comment"># push to the github remote repos ensuring you overwrite history</span></div><div class="line">git remote add origin git@github.com:&lt;YOUR ACCOUNT&gt;/&lt;YOUR REPOS&gt;.git</div><div class="line">git push -u --force origin master</div></pre></td></tr></table></figure><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git checkout --orphan newBranch</div><div class="line">git add -A  <span class="comment"># Add all files and commit them</span></div><div class="line">git commit</div><div class="line">git branch -D master  <span class="comment"># Deletes the master branch</span></div><div class="line">git branch -m master  <span class="comment"># Rename the current branch to master</span></div><div class="line">git push -f origin master  <span class="comment"># Force push master branch to github</span></div><div class="line">git gc --aggressive --prune=all     <span class="comment"># remove the old files</span></div></pre></td></tr></table></figure><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h2><blockquote><p>Delete Github Repo = = ,that’s a sad but useful way to totally delete<br>Warning : solution 1&amp;2 not delete pull request history (discussion, file changes). If you do this in order to delete sensitive data, you should better delete the github repo (along with all its pull request history etc..) and recreate a new one from scratch.</p></blockquote><h2 id="Finnaly"><a href="#Finnaly" class="headerlink" title="Finnaly"></a>Finnaly</h2><p>说了半天，其实还是直接删除repo最安全…… 前两种我理解，大概是指向删除了，并没做物理删除。 = = SAD</p><p><em>EOF</em></p>]]></content>
    
    <summary type="html">
    
      有时候确实会有这种需求，摆烂的历史，或者，敏感信息的移除
    
    </summary>
    
      <category term="Github" scheme="http://chen-tao.github.io/categories/Github/"/>
    
    
      <category term="git" scheme="http://chen-tao.github.io/tags/git/"/>
    
      <category term="Github" scheme="http://chen-tao.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Golang Workers / Job Queue</title>
    <link href="http://chen-tao.github.io/2017/09/11/Golang-Workers-Job-Queue/"/>
    <id>http://chen-tao.github.io/2017/09/11/Golang-Workers-Job-Queue/</id>
    <published>2017-09-11T12:09:39.000Z</published>
    <updated>2017-09-11T12:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>A running example of the code from:</p><ul><li><a href="http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang" target="_blank" rel="external">http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang</a></li><li><a href="http://nesv.github.io/golang/2014/02/25/worker-queues-in-go.html" target="_blank" rel="external">http://nesv.github.io/golang/2014/02/25/worker-queues-in-go.html</a></li></ul><p>This gist creates a working example from blog post, and a alternate example using simple worker pool.</p><p>TLDR: if you want simple and controlled concurrency use a <a href="https://gist.github.com/harlow/49318d54f45d29f1a77cc641faf14054" target="_blank" rel="external">worker pool</a>.</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>Small refactorings made to original code:</p><ul><li>Use non-exported private methods</li><li>Remove global variables</li><li>Bring the flags closer to their usage in <code>main()</code> from <a href="https://robots.thoughtbot.com/where-to-define-command-line-flags-in-go" target="_blank" rel="external">where to define flags in program</a>.</li></ul><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>Simplify the worker queue by removing the <code>Dispatcher</code>.</p><ul><li>Creates workers directly and passes job queue to them</li></ul><p><a href="https://gist.github.com/harlow/dbcd639cf8d396a2ab73#file-worker_refactored-go" target="_blank" rel="external">https://gist.github.com/harlow/dbcd639cf8d396a2ab73#file-worker_refactored-go</a></p><h2 id="Run-the-Application"><a href="#Run-the-Application" class="headerlink" title="Run the Application"></a>Run the Application</h2><p>Boot either the <code>worker_original.go</code> or the <code>worker_refactored.go</code> applications. Use flags to adjust the <code>max_workers</code> and <code>max_queue_size</code> to override the default values.</p><pre><code>$ go run worker_original.go -max_workers 5</code></pre><p>cURL the application from another terminal window:</p><pre><code>$ for i in {1..15}; do curl localhost:8080/work -d name=job$i -d delay=$(expr $i % 9 + 1)s; done</code></pre><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><p>The test run with Pprof show performance characteristics remain the same between both examples.</p><h2 id="Code-Time"><a href="#Code-Time" class="headerlink" title="Code Time"></a>Code Time</h2><script src="https://gist.github.com/Chen-tao/69d3dd7202dba1beb8abedf6fe712308.js"></script>]]></content>
    
    <summary type="html">
    
      看 otium/queue 如何用go实现的后台处理任务队列
    
    </summary>
    
      <category term="Golang" scheme="http://chen-tao.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://chen-tao.github.io/tags/Golang/"/>
    
      <category term="MQ" scheme="http://chen-tao.github.io/tags/MQ/"/>
    
      <category term="消息队列" scheme="http://chen-tao.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Golang 如何确定App是否运行在Docker内</title>
    <link href="http://chen-tao.github.io/2017/09/11/Go-check-if-app-running-in-docker/"/>
    <id>http://chen-tao.github.io/2017/09/11/Go-check-if-app-running-in-docker/</id>
    <published>2017-09-11T05:48:47.000Z</published>
    <updated>2017-09-11T06:13:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景</p><p>项目需要隔离部署，如果在docker环境需要使用一些特殊的配置，之前没有太好的判别方法，现在总结一下。</p></blockquote><h2 id="V1-使用-dockerenv判断"><a href="#V1-使用-dockerenv判断" class="headerlink" title="V1 使用/.dockerenv判断"></a>V1 使用<code>/.dockerenv</code>判断</h2><p>如果是Docker容器内，根目录会生成一个可执行的<code>/.dockerenv</code>文件，判断此文件是否存在可以基本断定是否运行内容器内，注意是“基本”，极少数的发行版或者某些定制化较高的系统，可能会不存在此文件。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> DOCKERENV_FILE <span class="keyword">string</span> = <span class="string">"/.dockerenv"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathExist</span><span class="params">(_path <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">_, err := os.Stat(_path)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; os.IsNotExist(err) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> pathExist(DOCKERENV_FILE) &#123;</div><div class="line">logs.Warn(<span class="string">"Running in Docker, not check for now..."</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="V2-使用cgroup信息进行判断"><a href="#V2-使用cgroup信息进行判断" class="headerlink" title="V2 使用cgroup信息进行判断"></a>V2 使用<code>cgroup</code>信息进行判断</h2><p>Docker在Xnix下虚拟环境，使用了cgroup，容器内的group信息与物理机会有本质不同，可以根据Docker内特殊化的环境信息进行判断，这也是目前最靠谱的方案。</p><p>正常情况下物理机的cgroup:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cat /proc/1/cgroup</span></div><div class="line">9:blkio:/</div><div class="line">8:devices:/</div><div class="line">7:freezer:/</div><div class="line">6:cpuset:/</div><div class="line">5:memory:/</div><div class="line">4:cpu,cpuacct:/</div><div class="line">3:perf_event:/</div><div class="line">2:net_cls,net_prio:/</div><div class="line">1:name=systemd:/</div></pre></td></tr></table></figure><p>Docker内的cgroup(例子)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> cat /proc/1/cgroup </span></div><div class="line">10:freezer:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">9:memory:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">8:cpuset:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">7:pids:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">6:devices:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c/init.scope</div><div class="line">5:blkio:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">4:cpu,cpuacct:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">3:perf_event:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">2:net_cls,net_prio:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c</div><div class="line">1:name=systemd:/kubepods/poda2804054-906f-11e7-9ae4-0cc47ad2a6d4/e0ad06c5691de850c976e780c867a254d71df81b315cdc0e2ace2c36983c946c/init.scope</div></pre></td></tr></table></figure><p>判断响应内容即可，一般情况下，主要看<code>name</code> &amp; <code>devices</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">Need Pkg:</span></div><div class="line"><span class="comment">    cgroup "github.com/containerd/cgroups"</span></div><div class="line"><span class="comment">    units "github.com/docker/go-units"</span></div><div class="line"><span class="comment">specs "github.com/opencontainers/runtime-spec/specs-go"</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    paths, err := parseCgroupFile(<span class="string">"/proc/1/cgroup"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">t.Fatal(err)</div><div class="line">&#125;</div><div class="line">dp := strings.TrimPrefix(paths[<span class="string">"devices"</span>], <span class="string">"/"</span>)</div><div class="line">path := PidPath(os.Getpid())</div><div class="line">p, err := path(<span class="string">"devices"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">t.Fatal(err)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> p != filepath.Join(<span class="string">"/"</span>, dp) &#123;</div><div class="line">t.Fatalf(<span class="string">"expected self path of %q but received %q"</span>, filepath.Join(<span class="string">"/"</span>, dp), p)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="V3-拓展"><a href="#V3-拓展" class="headerlink" title="V3 拓展"></a>V3 拓展</h2><p>如果需要当前协程的父进程信息，会对我们定位很多关键信息起到很大的帮助</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> processNameFormat = <span class="string">"/proc/%d/comm"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(os.Getppid())</div><div class="line"></div><div class="line">ppid := os.Getppid()</div><div class="line"></div><div class="line">bs, err := ioutil.ReadFile(fmt.Sprintf(processNameFormat, ppid))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Println(err.Error())</div><div class="line">&#125;</div><div class="line">    fmt.Println(<span class="keyword">string</span>(bs)) <span class="comment">// bs is ppid info</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>EOF</p></blockquote>]]></content>
    
    <summary type="html">
    
      几种判断Golang App当前运行环境的方法
    
    </summary>
    
      <category term="Golang" scheme="http://chen-tao.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://chen-tao.github.io/tags/Golang/"/>
    
      <category term="Docker" scheme="http://chen-tao.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>WTF hexo</title>
    <link href="http://chen-tao.github.io/2017/08/27/WTF-hexo/"/>
    <id>http://chen-tao.github.io/2017/08/27/WTF-hexo/</id>
    <published>2017-08-27T12:14:51.000Z</published>
    <updated>2017-09-11T05:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>真的不知道出了什么问题，突然这个hexo就不好用了，也许是我太久没用了吧 = = </p><p>昨天开始一直报错，找不到某个Trace，另外有一点我不太明白，deploy的时候替我提交了，那为何我本地还有这么多修改。</p><p>问题很多，但是确实很多没到这边来了，我的个人页也莫名其妙丢失了，SAD。</p><p>以上です。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;真的不知道出了什么问题，突然这个hexo就不好用了，也许是我太久没用了吧 = = &lt;/p&gt;
&lt;p&gt;昨天开始一直报错，找不到某个Trace，另外有一点我不太明白，deploy的时候替我提交了，那为何我本地还有这么多修改。&lt;/p&gt;
&lt;p&gt;问题很多，但是确实很多没到这边来了，我的
      
    
    </summary>
    
    
      <category term="感悟" scheme="http://chen-tao.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>告别腾讯-一点总结</title>
    <link href="http://chen-tao.github.io/2017/03/14/about-tencent/"/>
    <id>http://chen-tao.github.io/2017/03/14/about-tencent/</id>
    <published>2017-03-14T07:39:23.000Z</published>
    <updated>2017-09-11T05:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>鹅厂工作届满三年，明天即将离开，写一点自己的感受，希望能看到一些东西，也不被一些东西所影响。</p><a id="more"></a><h3 id="Leave"><a href="#Leave" class="headerlink" title="Leave"></a>Leave</h3><p>业内讲<strong>金山银四</strong>，我也到了发痒的年纪了。一方面有家庭上的原因，另一方面，也觉得北京发展的潜力远远大于深圳，机会也多得多，于是，过年期间准备了一下，拿到了今日头条的offer，即将在北京开始新的生活了。</p><h3 id="SNG"><a href="#SNG" class="headerlink" title="SNG"></a>SNG</h3><p>2014年毕业来到腾讯SNG(社交网络事业群)，做泛QQ方向的业务，在SNG内算是比较新的业务，老板也相对重视；但从整个公司的角度看来，SNG的优势都不太大，以至于我们经常自我调侃：CDG&amp;WXG天之骄子，IEG游戏土豪，OMG一门三杰，TEG养老送终，剩下SNG吭哧吭哧的干活儿，却不知道未来在何方。</p><h3 id="Engineering-Culture"><a href="#Engineering-Culture" class="headerlink" title="Engineering Culture"></a>Engineering Culture</h3><p>作为一个后端server研发，其实大多数时候是不会带入到公司大的场景中去的，但腾讯是一家特殊的公司，是一家以<strong>产品为导向</strong>的公司，每个人都<strong>有</strong>或者说<strong>需要有</strong>那么一点产品意识，这样的结果是：一方面产品在进化发展，产品运营开发测试，每个人对业务的理解更透彻了；另一方面，对技术不那么感冒，甚至可以说，<strong>工程师文化，在腾讯销声匿迹了</strong>，也不能说没有，而是被忽略掉了。</p><p>对于大部分员工来说，KPI还是很重要的，而落实到每个人身上，很可能就是如果快速的解决某个问题，达到某个目的，一件事情做完之后，回头看的机会真的不多，业务在前进，人也一样——在业务飞速前进的大背景下，从Demo改到V3V4，是一件很痛苦的事情，甚至在一些团队变成了不切实际的行动。这样的结果是：<strong>对于大多数非核心部门而言，资源是非常有限的，新的老的业务问题都不一定能搞定，自然无法将资源投放在解决工作效率与代码质量的问题上。半年一次的KPI考评，则从另一个更重要的方面去促使员工选择去解决最能体现价值的业务问题。长期的收敛结果，就是基础设施碎片化、野蛮化生长。</strong></p><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><p>DevOps在腾讯，大部分部门都是很空白的。</p><p>代码权限严格，网络权限一年比一年收紧，测试环境(SecureCRT 甚至加上 sz/rz)产能底下，很多生产力工具没提供比如Mac无法申请(其实比某些台式机便宜多了)，很多老员工用着落后其他公司一个时代的硬件产品，追赶着行业领先的技术，这种戴着镣铐跳舞的感觉，很多时候实在让人无奈。</p><p>在SNG内部，经过近几年的发展，是有集成化运维这类的东西的，但仍然不够，很多重复的事情，仍然不得不人肉，而且还有一些非常蛋疼的规范限制着你——比如通过内部系统，每人每天每个pkg只能pub一次，你pub过就只能找其他同事帮忙，不然就上了本月的研发黑榜 = =||，本人有幸连续三个月上榜过。</p><p>另外，腾讯里，很多新团队开发的自动化组件，没有人去用，或者用的很少，推行起来也是困难重重，部门之间，业务不同，KPI没有交集，互帮互助都显得异常珍贵，团队之间，尤其是<em>有点历史</em>的团队之间，技术栈是大相径庭的，要他们容和统一，短时间内实在也不太现实，而长期来看，团队技术栈成型后，他们更倾向于Hire那些符合他们技术点要求的人，而不是能力相当的人，如何循环，再去改造就更加困难了；对比阿里巴巴，内部其实没有特别大的决心去推动一些东西，有学长在阿里中间件工作，基本上集团内推行一种新技术是非常容易的，JDK6到7到8，遇到的阻力也无非是一些必经之路上的技术问题，而不是该不该用好不好用的扯皮，这些问题是腾讯需要思考的。</p><p><strong>说了这么多，从我工程师的角度看，腾讯在产品上确实冠绝业界，但在工程技术上，要走的路还很远很曲折。</strong></p><h3 id="Benefit"><a href="#Benefit" class="headerlink" title="Benefit"></a>Benefit</h3><p>讲完技术，讲点福利。腾讯的福利非常之好，包含了衣食住行的方方面面，每年的旅行团建，夜宵，兑换，住房保障计划，无息贷款，覆盖全深圳堪比中型城市公交系统的班车服务，逢年过节的红包，结婚生育的礼金，甚至给下一代的VIPQQ号……<strong>对于职场新人来说，确实是一家非常值得加入的公司；对于职业暮年的人来说，则可能是可以颐养天年的公司；而对于其他员工，我觉得就因人而异了，可能要看具体工作的方向，部门，和个人对工作的理解了。</strong></p><h3 id="One-More-Thing"><a href="#One-More-Thing" class="headerlink" title="One More Thing"></a>One More Thing</h3><p>毕业的三年是一个非常重要的职业阶段，在腾讯我成长了非常多，也学会了很多，感谢与我一同工作的同事们，他们对我的协助，对我的指导，我都铭记于心；而我在腾讯文化的熏陶下，也完成了从一个青涩学生到一个工程师的转变，这些，都是我职业道路上毕生的财富。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鹅厂工作届满三年，明天即将离开，写一点自己的感受，希望能看到一些东西，也不被一些东西所影响。&lt;/p&gt;
    
    </summary>
    
    
      <category term="感悟" scheme="http://chen-tao.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>从jekyll到hexo</title>
    <link href="http://chen-tao.github.io/2017/03/09/move-to-hexo/"/>
    <id>http://chen-tao.github.io/2017/03/09/move-to-hexo/</id>
    <published>2017-03-09T09:39:10.000Z</published>
    <updated>2017-09-11T05:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前折腾了很多次jekyll，不管是评论，还是文章目录，都很不顺手，<strong>这次花了一天，迁移到了hexo</strong></p><p>开始是nodejs的组件报错，某些文章里有特殊的jekyll使用的字符等等，这个就折腾了半天 = = </p><p>然后是git的rebase出问题，差点崩溃，还好解决了</p><p>官网上关于迁移就是这短短的一句话：</p><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fdgqabh8i6j31520aot9u.jpg" alt=""></p><p>结果却不是这样 = = </p><p>这边选择了next主题，觉得不错，喜欢的可以看下，后面有时间，也会折腾一下主题(可能有坑 = = )</p><p>新开始！</p>]]></content>
    
    <summary type="html">
    
      刀耕火种结束，顺利进入自动化时代。
    
    </summary>
    
    
      <category term="jekyll" scheme="http://chen-tao.github.io/tags/jekyll/"/>
    
      <category term="hexo" scheme="http://chen-tao.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm Anaysis</title>
    <link href="http://chen-tao.github.io/2017/02/08/algo-pic/"/>
    <id>http://chen-tao.github.io/2017/02/08/algo-pic/</id>
    <published>2017-02-07T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fcivc207a8j319z0pwq8b.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ww1.sinaimg.cn/large/006tKfTcgy1fcivc207a8j319z0pwq8b.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="算法" scheme="http://chen-tao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SOA面向服务架构浅析</title>
    <link href="http://chen-tao.github.io/2017/02/01/soa-and-micro-service/"/>
    <id>http://chen-tao.github.io/2017/02/01/soa-and-micro-service/</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SOA定义"><a href="#SOA定义" class="headerlink" title="SOA定义"></a>SOA定义</h2><p>SOA是一个组件模型，它将应用程序的不同功能单元(称为服务)通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种这样的系统中的服务可以以一种统一和通用的方式进行交互。</p><p>这种具有中立的接口定义(没有强制绑定到特定的实现上)的特征称为服务之间的松耦合。<strong>SOA的目的，就是要将复杂的紧耦合的系统进行解耦，划分成面向业务的，细粒度，松耦合，无状态的服务。</strong>松耦合系统的好处有两点，一点是它的灵活性，另一点是，当组成整个应用程序的每个服务的内部结构和实现逐渐地发生改变时，它能够继续存在。而另一方面，紧耦合意味着应用程序的不同组件之间的接口与其功能和结构是紧密相连的，因而当需要对部分或整个应用程序进行某种形式的更改时，它们就显得非常脆弱，变更可能会导致部分乃至整个系统的重构。</p><p>对松耦合的系统的需要来源于业务应用程序需要根据业务的需要变得更加灵活，以适应不断变化的环境，比如经常改变的政策、业务级别、业务重点、合作伙伴关系、行业地位以及其他与业务有关的因素，这些因素甚至会影响业务的性质。我们称能够灵活地适应环境变化的业务为按需(On demand)业务，在按需业务中，一旦需要，就可以对完成或执行任务的方式进行必要的更改。</p><p>SOA是传统的面向对象架构模型的替代模型，面向对象的模型是紧耦合的，已经存在二十多年了。虽然基于 SOA 的系统并不排除使用面向对象的设计来构建单个服务，但是其整体设计却是面向服务的。由于它考虑到了系统内的对象，所以虽然 SOA 是基于对象的，但是作为一个整体，它却不是面向对象的。不同之处在于接口本身。SOA 系统原型的一个典型例子是通用对象请求代理体系结构(Common Object Request Broker Architecture，CORBA)，它已经出现很长时间了，其定义的概念与 SOA 相似。</p><p>然而，现在的 SOA 已经有所不同了，因为它依赖于一些更新的进展，这些进展是以可扩展标记语言(eXtensible Markup Language，XML)为基础的。通过使用基于 XML 的语言(称为 Web 服务描述语言(Web Services Definition Language，WSDL))来描述接口，服务已经转到更动态且更灵活的接口系统中，非以前 CORBA 中的接口描述语言(Interface Definition Language，IDL)可比了。更新的，如protobuf，Thrift等标记语言，则已经在RPC与其他服务协议中占有极为重要的角色。</p><p>Web 服务并不是实现 SOA 的惟一方式。前面刚讲的 CORBA 是另一种方式，这样就有了面向消息的中间件(Message-Oriented Middleware)系统。但是为了建立体系结构模型，您所需要的并不只是服务描述。您需要定义整个应用程序如何在服务之间执行其工作流。您尤其需要找到业务的操作和业务中所使用的软件的操作之间的转换点。因此，SOA 应该能够将业务的商业流程与它们的技术流程联系起来，并且映射这两者之间的关系。例如，给供应商付款的操作是商业流程，而更新您的零件数据库，以包括进新供应的货物却是技术流程。因而，工作流还可以在 SOA 的设计中扮演重要的角色。</p><p>此外，动态业务的工作流不仅可以包括部门之间的操作，甚至还可以包括与不为您控制的外部合作伙伴进行的操作。因此，为了提高效率，您需要定义应该如何得知服务之间的关系的策略，这种策略常常采用服务级协定和操作策略的形式。</p><p>最后，所有这些都必须处于一个信任和可靠的环境之中，以同预期的一样根据约定的条款来执行流程。因此，安全、信任和可靠的消息传递应该在任何 SOA 中都起着重要的作用。</p><h2 id="SOA原则"><a href="#SOA原则" class="headerlink" title="SOA原则"></a>SOA原则</h2><p>FROM <a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84" target="_blank" rel="external">WIKI</a></p><p>以下指导原则是开发，维护和使用SOA的基本原则：</p><ul><li>可重复使用, 粒度, 模组性, 可组合型, 物件化原件, 构件化以及具交互操作性</li><li>符合开放标准(通用的或行业的)</li><li>服务的识别和分类，提供和发布，监控和跟踪。</li></ul><p>下面是一些特定的体系架构原则：</p><ul><li>服务封装</li><li>服务松耦合(Loosely coupled) – 服务之间的关系最小化，只是互相知道。(Decouple Infrastructure)</li><li>服务契约 - 服务按照服务描述文档所定义的服务契约行事。</li><li>服务抽象 - 除了服务契约中所描述的内容，服务将对外部隐藏逻辑。</li><li>服务的重用性 - 将逻辑分布在不同的服务中，以提高服务的重用性。</li><li>服务的可组合性 - 一组服务可以协调工作并组合起来形成一个组合服务。</li><li>服务自治 – 服务对所封装的逻辑具有控制权</li><li>服务无状态 – 服务将一个活动所需保存的资讯最小化。</li><li>服务的可被发现性 – 服务需要对外部提供描述资讯，这样可以通过现有的发现机制发现并访问这些服务。[4]</li></ul><p>除此以外，在定义一个SOA实现时，还需要考虑以下因素：</p><ul><li>生命周期管理</li><li>有效使用系统资源</li><li>服务成熟度和性能</li></ul><h2 id="SOA用途"><a href="#SOA用途" class="headerlink" title="SOA用途"></a>SOA用途</h2><p>对 SOA 的需要来源于需要使业务 IT 系统变得更加灵活，以适应业务中的改变。通过允许强定义的关系和依然灵活的特定实现，IT 系统既可以利用现有系统的功能，又可以准备在以后做一些改变来满足它们之间交互的需要。</p><p>改变和 SOA 系统适应改变的能力是最重要的部分。对于开发人员来说，这样的改变无论是在他们工作的范围之内还是在他们工作的范围之外都有可能发生，这取决于是否有改变需要知道接口是如何定义的以及它们相互之间如何进行交互。与开发人员不同的是，架构师的作用就是引起对 SOA 模型大的改变。这种分工，就是让开发人员集中精力于创建作为服务定义的功能单元，而让架构师和建模人员集中精力于如何将这些单元适当地组织在一起。</p><h2 id="SOA与微服务"><a href="#SOA与微服务" class="headerlink" title="SOA与微服务"></a>SOA与微服务</h2><p>相比于基于业务的SOA，微服务则纯粹基于服务模块，也就是每个服务独立为一个子系统，平行扩容对其他服务透明，强调系统的伸缩性，服务发现，负载均衡，故障转移，高可用。微服务是互联网时代的新产物，它对服务的容错与可用提出了更新的思考，比如多版本，灰度发布，服务降级，分布式跟踪，这些都是SOA在实践中重视不够的地方，。</p><p>SOA在企业领域的应用更为广泛，对服务的可用性保证也很高，而很多现代互联网企业，对实时性的要求，对数据一致性的要求，甚至对大流量下可用性的要求都是弹性的，比如腾讯，很多业务服务的运营核心是：有损服务，动态运营，这时候，微服务的作用就显现出来，在海量请求下，尽量保证大多数用户的服务，尽量快（弱一致性）的实现数据的同步。可以说，SOA与微服务在不同的领域，但做法可以相互借鉴。</p>]]></content>
    
    <summary type="html">
    
      SOA面向服务架构的一点自我分析，同时对比一下SOA与微服务，互相借鉴，有的放失。
    
    </summary>
    
      <category term="感悟" scheme="http://chen-tao.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="server" scheme="http://chen-tao.github.io/tags/server/"/>
    
      <category term="服务" scheme="http://chen-tao.github.io/tags/%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>quick sort快速排序算法总结 </title>
    <link href="http://chen-tao.github.io/2017/01/28/quick-sort/"/>
    <id>http://chen-tao.github.io/2017/01/28/quick-sort/</id>
    <published>2017-01-27T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天总结一下非常有用的快速排序(qsort)算法, 以及由此衍生的一些其他相关算法(Knuth shuffle, quick select, 3-way partition).</p><p>快速排序的算法可以用三句话描述:<br><strong>[Algo]</strong></p><blockquote><ul><li>选择基准项(pivot element, 一般取第一个元素为pivot)</li><li>把数组里所有小于pivot的移动到pivot左边, 大于pivot的移动到右边 ⇒ 此时pivot已经位于最终排序时的正确位置</li><li>对pivot左右两个数组分别递归进行快速排序</li></ul></blockquote><p>由以上描述可见, qsort是一个递归算法, 我们可以把它的函数声明写成: <code>void qsort(int[] a, int lo, int hi)</code>, 表示排序a[lo, hi]之间(闭区间)的所有元素.</p><h2 id="quick-partition"><a href="#quick-partition" class="headerlink" title="quick partition"></a>quick partition</h2><p>由上面描述可以见, qsort最关键的是第二步: 把数组元素以pivot分为两部分. 这个操作就是quick partition.</p><p>函数声明为: <code>int partition(int[] a, int lo, int hi)</code>, 该函数返回pivot(即subarray的第一个元素<code>a[lo]</code>)所在的位置.</p><p>如果允许新建一个临时数组的话, 那么这个就不是什么问题, 但是为了节约空间占用, 现在需要直接修改(in-place)使得a[lo] 到, 而且希望可以用尽量少的交换(<code>swap(int[]a, int i, int j)</code>)操作, 就不是很evident了.</p><p>这个函数的写法是用两个指针i和j分别从两端向中间走, 如果两个指针指向的元素一个小于pivot一个大于pivot那么就进行交换, 当两个指针碰面的时候结束(最后把pivot和指针元素交换). 请看下面这个萌萌的图(图片来自&lt;&lt;啊哈!算法&gt;&gt;):<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fc7ns2lgb3j30f005p3yp.jpg" alt=""></p><p>选取第一个元素(6)为pivot, 然后j向左走直到遇到一个小于pivot(6)的数停止, i向右走直到遇到一个大于pivot的数停止(<em>注意要让j先移动</em>), 此时二者交换:<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fc7nsfvemtj30dm0a83yz.jpg" alt=""></p><p>只要重复这个过程, 直到i&gt;=j为止, 此时只要最后把pivot和j(<em>注意是j而不是i</em>)指向的元素交换即可:<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fc7nsr0uuxj30dp0bidga.jpg" alt=""></p><p>所以pivot的位置就是j, 函数返回j即可.</p><p>java实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> pivot = a[lo], i=lo, j=hi;  </div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </div><div class="line">        <span class="keyword">for</span>(;j&gt;=lo &amp;&amp; a[j]&gt;=pivot;j--);<span class="comment">// move j to a point where a[j]&lt;pivot  </span></div><div class="line">        <span class="keyword">for</span>(;i&lt;=hi &amp;&amp; a[i]&lt;=pivot;i++);<span class="comment">// move i to a point where a[i]&gt;pivot  </span></div><div class="line">        <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;<span class="comment">// break if i and j meets  </span></div><div class="line">        swap(a, i++, j--);  </div><div class="line">    &#125;  </div><div class="line">    swap(a, lo, j);<span class="comment">// swap pivot with a[j]  </span></div><div class="line">    <span class="keyword">return</span> j;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里有几点要注意的:</p><ul><li>让j先移动</li><li>最后pivot要和j交换而不是和i交换: 因为最后放在最左边的应该是一个小于pivot的数嘛</li><li>移动的时候别忘了需要加数组下标的边界检查(<code>i&lt;=hi</code>, <code>j&gt;=lo</code>)</li><li>partition()的复杂度是线性的<strong>O(n)</strong></li></ul><h2 id="Knuth-shuffle"><a href="#Knuth-shuffle" class="headerlink" title="Knuth shuffle"></a>Knuth shuffle</h2><p>qsort之所以快, 是因为每次都能够按照pivot分为大致同样长度的两个子数组(所以每次子问题的规模除以二), 所以复杂度为<strong>O(NlogN)</strong>. 最坏情况下, 如果每次两个子数组中可能有一个长度为0, 那么每次子问题的规模只减少了1, 所以复杂度变成了quadratic <strong>O(N2)</strong>.</p><p>为了防止这种最坏情况的出现, 可以在一切开始之前把数组打乱顺序, 所以这一节讨论快速shuffle的算法. 最经典的就是Knuth的shuffle算法了, 算法很简答, 描述为: for(k=1 to n): 每次把第k个元素和前k个元素中的随机一个元素交换.</p><p>代码只有两行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> K=<span class="number">0</span>; K&lt;a.length; K++)  </div><div class="line">        swap(K, Random.nextInt(K+<span class="number">1</span>));  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>关于算法的正确性, 其实只要证明”元素i在shuffle后最终位于位置i”的概率为1/N即可, 不难证明.</p><h2 id="quick-sort"><a href="#quick-sort" class="headerlink" title="quick sort"></a>quick sort</h2><p>好了 有了以上两个辅助函数就可以写qsort函数了:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;<span class="comment">//recursive helper function  </span></div><div class="line">    <span class="keyword">if</span>(lo&gt;=hi) <span class="keyword">return</span>;  </div><div class="line">    <span class="keyword">int</span> p = partition(a, lo, hi);  </div><div class="line">    qsort(a, lo, p-<span class="number">1</span>);  </div><div class="line">    qsort(a, hi, p+<span class="number">1</span>);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;  </div><div class="line">    shuffle(a);  </div><div class="line">    qsort(a, <span class="number">0</span>, a.length-<span class="number">1</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其实qsort的主体就是那个partition函数, 单独把partition列出来是因为它不止可以用在排序, 还可以用来做quick select, 见quick select节.</p><h2 id="quick-select"><a href="#quick-select" class="headerlink" title="quick select"></a>quick select</h2><p><em>对于一个没有排序的数组, 如何快速找到它的中值(median)?</em><br>以上这个问题的答案就在<code>partition()</code>函数.</p><p>之前说过, <code>partition()</code>函数的返回值表示pivot在排序好的数组中的位置(rank), 这个消息非常有用: 中值只不过是rank等于长度除以2的元素而已.</p><p>为了寻找rank等于k的元素, 我们用partition函数可以每次把问题规模缩小: 如果partition()=pk那么右边subarray不用考虑, 如果数组事先shuffle过了的话, 问题规模每次缩小一半.</p><p>定义一个函数, 寻找rank等于k的元素, 代码类似于二分查找:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">int findKth(int[] a, int k)&#123;  </div><div class="line">    shuffle(a);  </div><div class="line">    int lo=0, hi=a.length-1;  </div><div class="line">    while(lo&lt;hi)&#123;  </div><div class="line">    int p = partition(a, lo, hi);  </div><div class="line">    if(p==k) return a[k];  </div><div class="line">    else if(p&lt;k) lo=p+1;  </div><div class="line">    else hi=p-1;  </div><div class="line">    &#125;  </div><div class="line">    return a[k];  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该算法内层循环为O(hi-lo), 每次问题规模减少一半, 所以复杂度为N+N/2+N/4+…+1 = 2N, 复杂度为线性时间!</p><h2 id="3-way-qsort"><a href="#3-way-qsort" class="headerlink" title="3-way qsort"></a>3-way qsort</h2><p>qsort之前有个bug: 在数组里很多重复元素的时候, 效率会下降为O(N2). 原因是qsort没有好好处理重复元素的问题.</p><p>于是Dijkstra提出了一个<strong>3-way partition</strong>的算法: 把数组分为三部分: 左边<code>[lo, lt)</code>严格小于pivot, 中间<code>[lt, gt]</code>等于pivot, 右边<code>(gt, hi]</code>严格大于pivot.</p><p>算法初始化<code>lt=lo, gt=hi, i=lo</code>, 用指针i向右扫描, [i,gt]为未处理到的部分.<br>算法很subtle, invariant是这样的:</p><blockquote><ul><li>a[lo,lt-1] &lt; pivot</li><li>a[lt, i-1] = pivot</li><li>a[i,gt] = unseen</li><li>a[gt+1, hi] &gt; pivot</li></ul></blockquote><p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fc7nt1aur7j309k03gq2v.jpg" alt=""><br>这个图很有助于写代码:<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fc7nta4jkzj308704s0sr.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort3way</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;  </div><div class="line">    <span class="keyword">if</span>(hi&lt;=lo) <span class="keyword">return</span>;  </div><div class="line">    <span class="keyword">int</span> lt=lo, i=lo, gt=hi, pivot=a[lo];  </div><div class="line">    <span class="keyword">while</span> (i&lt;=gt)&#123;<span class="comment">// [i,gt] is unseen elements  </span></div><div class="line">        <span class="keyword">if</span>(a[i]==pivot) <span class="comment">//a[lt,i-1] are elements == pivot  </span></div><div class="line">            i++;  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;pivot) <span class="comment">// a[gt+1, hi] are elements &gt; pivot  </span></div><div class="line">            swap(a, gt--, i);  </div><div class="line">        <span class="keyword">else</span> <span class="comment">// a[lo, lt-1] are elements &lt; pivot  </span></div><div class="line">            swap(a, lt++, i++);  </div><div class="line">    &#125;  </div><div class="line">    qsort3way(a, lo, lt-<span class="number">1</span>);  </div><div class="line">    qsort3way(a, gt+<span class="number">1</span>, hi);  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>说它很subtle, 除了因为没有那个图我写不出来以外, 还有就是, 在把i和lt交换时, i可以increment (因为我们知道<code>a[lt]==pivot</code>), 但是i和gt交换时, i<strong>不能</strong>increment: 因为a[gt]不知道多大, 所以i位置要继续检查.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天总结一下非常有用的快速排序(qsort)算法, 以及由此衍生的一些其他相关算法(Knuth shuffle, quick select, 3-way partition).&lt;/p&gt;
&lt;p&gt;快速排序的算法可以用三句话描述:&lt;br&gt;&lt;strong&gt;[Algo]&lt;/stron
      
    
    </summary>
    
      <category term="算法" scheme="http://chen-tao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://chen-tao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="快速排序" scheme="http://chen-tao.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
      <category term="sort" scheme="http://chen-tao.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>递归，回溯，DFS，BFS的理解和模板</title>
    <link href="http://chen-tao.github.io/2017/01/27/al-template/"/>
    <id>http://chen-tao.github.io/2017/01/27/al-template/</id>
    <published>2017-01-26T16:00:00.000Z</published>
    <updated>2017-09-11T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode 里面很大一部分题目都是属于这个范围，例如Path Sum用的就是递归+DFS，Path Sum2用的是递归+DFS+回溯</p><p>这里参考了一些网上写得很不错的文章，总结一下理解与模板</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归：就是出现这种情况的代码： （或者说是用到了栈）</p><p>解答树角度：在dfs遍历一棵解答树      </p><p>优点：结构简洁</p><p>缺点：效率低，可能栈溢出</p><p>递归的一般结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     <span class="keyword">if</span>(符合边界条件)</div><div class="line">    &#123;</div><div class="line">       <span class="comment">///////</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">     <span class="comment">//某种形式的调用</span></div><div class="line">     f();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>回溯：递归的一种，或者说是通过递归这种代码结构来实现回溯这个目的。回溯法可以被认为是一个有过剪枝的DFS过程。</p><p>解答树角度：带回溯的dfs遍历一棵解答树</p><p>回溯的一般结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> 当前状态)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">      <span class="keyword">if</span>(当前状态为边界状态)</div><div class="line">      &#123;</div><div class="line">        记录或输出</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//横向遍历解答树所有子节点</span></div><div class="line">     &#123;</div><div class="line">           <span class="comment">//扩展出一个子状态。</span></div><div class="line">           修改了全局变量</div><div class="line">           <span class="keyword">if</span>(子状态满足约束条件)</div><div class="line">            &#123;</div><div class="line">              dfs(子状态)</div><div class="line">           &#125;</div><div class="line">            恢复全局变量<span class="comment">//回溯部分</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="BFS-amp-DFS"><a href="#BFS-amp-DFS" class="headerlink" title="BFS&amp;DFS"></a>BFS&amp;DFS</h2><p>常用的搜索方式。</p><ol><li>枚举。枚举运算量很大，需要预先确定枚举的定义域。</li><li>广度优先搜索（BFS ）——通常可以用于计算图的连通性、单源最短路径、计算最小操作次数等。</li><li>深度优先搜索（DFS）——经典题：火力中心布局。</li></ol><p>BFS的占用的是队列的空间</p><p>DFS 占用的是栈的空间（因为递归）</p><p>BFS和DFS的空间复杂度恰好相反</p><p>对链状图，BFS最好（队列中最多只有1个元素），DFS最差（所有节点都在根节点的递归内）</p><p>对起点与其他所有点相邻的图，DFS最好（递归深度为1），BFS最差（队列中放满了所有与起点相邻的图）。</p><h3 id="BFS模版"><a href="#BFS模版" class="headerlink" title="BFS模版"></a>BFS模版</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">queue</span>&lt;type&gt; q;</div><div class="line">q.push(初始状态);</div><div class="line"><span class="keyword">while</span> (!q.empty())</div><div class="line">&#123;</div><div class="line">  type t = q.front() ;</div><div class="line">  q.pop();</div><div class="line">  遍历 t 的各个Next状态  next</div><div class="line">  &#123; </div><div class="line">    <span class="keyword">if</span> (next is legal)</div><div class="line">      q.push(next); 计数或维护等; </div><div class="line">  &#125; </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是BFS的状态数一多，需要的空间就会较大。因此就需要状态压缩，BUPT OJ上的1180就是一个典型的例子，但是状态压缩以及解压的时候，又会涉及效率，反正1180将80M的状态压缩到40K以后就超时了……</p><h3 id="DFS模板"><a href="#DFS模板" class="headerlink" title="DFS模板"></a>DFS模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DFS（顶点） </div><div class="line">&#123;</div><div class="line">　　处理当前顶点，记录为已访问</div><div class="line">　　遍历与当前顶点相邻的所有未访问顶点</div><div class="line">　　&#123;</div><div class="line">　　　　　　标记更改;</div><div class="line">　　　　　　DFS( 下一子状态);</div><div class="line">　　　　　　恢复更改;</div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>回溯法：DFS适用于 显式图，但是对于一些隐式关系，我们需要使用回溯法，通过定义或找到各个状态、边界条件、搜索范围、约束条件和最优解结果进行建模求解。</p><p>边界条件：达到某状态时，需要检查并确定是继续搜索还是回到上一状态的条件（例如当前已使用时间比当前最优解要长，此时就不需要再进行搜索）</p><p>搜索范围：当前从当前状态开始进行搜索的所有下一级状态。 </p><p>搜索范围：</p><p>另外一定要注意，假如参与递归的参数不是通过传参形式的方式进入递归的话，那么一定要做好数据恢复。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Trace（当前状态） </div><div class="line">&#123;</div><div class="line">    if 当前状态是结束状态</div><div class="line">    &#123;</div><div class="line">         if 是最佳解： 记录。</div><div class="line">         退出</div><div class="line">    &#125;</div><div class="line">    遍历当前状态的各个邻接状态</div><div class="line">    &#123;</div><div class="line">        if 当前状态满足约束条件 且 满足最优性要求 ： Trace（子状态） </div><div class="line">    &#125; </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;LeetCode 里面很大一部分题目都是属于这个范围，例如Path Sum用的就是递归+DFS，Path Sum2用的是递归+DFS+回溯&lt;/p&gt;
&lt;p&gt;这里参考了一些网上写得很不错的文章，总结一下理解与模板&lt;/p&gt;
&lt;h2 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; cl
      
    
    </summary>
    
      <category term="算法" scheme="http://chen-tao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://chen-tao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="http://chen-tao.github.io/tags/BFS/"/>
    
      <category term="递归" scheme="http://chen-tao.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="回溯" scheme="http://chen-tao.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="DFS" scheme="http://chen-tao.github.io/tags/DFS/"/>
    
  </entry>
  
</feed>
